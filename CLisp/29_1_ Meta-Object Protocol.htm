<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0044)http://clisp.cons.org/impnotes/mop-chap.html -->
<?xml version="1.0" encoding="UTF-8" standalone="no"?><HTML 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>29.1. Meta-Object Protocol</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8"><LINK 
href="29_1_&nbsp;Meta-Object Protocol_files/impnotes.css" type=text/css 
rel=stylesheet><LINK rev=made href="mailto:clisp-list@lists.sourceforge.net">
<META content="MSHTML 6.00.2900.3020" name=GENERATOR><LINK 
title="Implementation Notes for GNU CLISP" href="index.html" rel=start><LINK 
title="Chapter&nbsp;29.&nbsp;Standard Widely Portable Extensions" 
href="ext-standard.html" rel=up><LINK 
title="Chapter&nbsp;29.&nbsp;Standard Widely Portable Extensions" 
href="ext-standard.html" rel=prev><LINK title="29.2.&nbsp;Gray streams" 
href="gray.html" rel=next><LINK 
title="Legal Status of the CLISP Implementation Notes" href="ln-legalese.html" 
rel=copyright>
<META content="'generated: 2006-10-13&nbsp;02:05:01-04:00'" name=date><LINK 
title=Authors href="index.html#authors" rel=author><LINK 
title="Table of Contents" href="index.html" rel=contents><LINK 
href="glossary.html" rel=glossary><LINK title="How do I ask for help?" 
href="faq.html#faq-help" rel=help><LINK title=Home href="http://clisp.cons.org" 
rel=home><LINK href="idx.html" rel=index></HEAD>
<BODY>
<DIV class=navheader>
<TABLE width="100%" summary="Navigation header">
  <TBODY>
  <TR>
    <TH align=middle colSpan=3>29.1.&nbsp;Meta-Object Protocol</TH></TR>
  <TR>
    <TD align=left width="20%"><A accessKey=p 
      href="http://clisp.cons.org/impnotes/ext-standard.html">Prev</A>&nbsp;</TD>
    <TH align=middle width="60%">Chapter&nbsp;29.&nbsp;Standard Widely 
      Portable Extensions</TH>
    <TD align=right width="20%">&nbsp;<A accessKey=n 
      href="http://clisp.cons.org/impnotes/gray.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A id=mop-chap></A>29.1.&nbsp;Meta-Object 
Protocol</H2></DIV>
<DIV>
<H3 class=subtitle>Adapted from chapters 5 and 6 of [<A 
href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>]</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-intro">29.1.1. 
  Introduction</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-intro-notation">29.1.1.1. 
    Notation</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-package">29.1.1.2. 
    Package</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-overview">29.1.2. 
  Overview</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects">29.1.2.1. 
    Metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-classes">29.1.2.1.1. 
      Classes</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-slot-defs">29.1.2.1.2. 
      Slot Definitions</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-gen-funs">29.1.2.1.3. 
      Generic Functions</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-methods">29.1.2.1.4. 
      Methods</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec">29.1.2.1.5. 
      Specializers</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-meth-combs">29.1.2.1.6. 
      Method Combinations</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-cl-inheritance">29.1.2.2. 
    Inheritance Structure of Metaobject Classes</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-impl-and-user-spec">29.1.2.2.1. 
      Implementation and User Specialization</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ui-macro">29.1.2.3. 
    Processing of the User Interface Macros</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-compile-ui-macro">29.1.2.3.1. 
      Compile-file Processing of the User Interface Macros</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-ui-others">29.1.2.3.2. 
      Compile-file Processing of Specific User Interface 
    Macros</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-mo-init">29.1.2.4. 
    Metaobject Initialization Protocol</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-classes">29.1.3. 
  Classes</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-defclass">29.1.3.1. 
    Macro <CODE class=function>DEFCLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-Inheritance">29.1.3.2. 
    Inheritance Structure of class metaobject Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers">29.1.3.3. 
    Introspection: Readers for class metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-name">29.1.3.3.1. 
      Generic Function <CODE class=function>CLASS-NAME</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses">29.1.3.3.2. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots">29.1.3.3.3. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs">29.1.3.3.4. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#cpl">29.1.3.3.5. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses">29.1.3.3.6. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots">29.1.3.3.7. 
      Generic Function <CODE class=function>CLOS:CLASS-SLOTS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs">29.1.3.3.8. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p">29.1.3.3.9. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-FINALIZED-P</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype">29.1.3.3.10. 
      Generic Function <CODE 
      class=function>CLOS:CLASS-PROTOTYPE</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers-methods">29.1.3.3.11. 
      Methods</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-finalization">29.1.3.4. 
    Class Finalization Protocol</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init">29.1.3.5. 
    Class Initialization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">29.1.3.5.1. 
      Initialization of class metaobjects</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-reinit-mo">29.1.3.5.2. 
      Reinitialization of class metaobjects</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-customize">29.1.3.6. 
    Customization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#setf-class-name">29.1.3.6.1. 
      Generic Function <CODE class=code>(SETF CLASS-NAME)</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class">29.1.3.6.2. 
      Generic Function <CODE class=function>CLOS:ENSURE-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC">29.1.3.6.3. 
      Generic Function <CODE 
      class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance">29.1.3.6.4. 
      Generic Function <CODE 
      class=function>CLOS:FINALIZE-INHERITANCE</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-make-instance">29.1.3.6.5. 
      Generic Function <CODE class=function>MAKE-INSTANCE</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#alloc-instance">29.1.3.6.6. 
      Generic Function <CODE class=function>ALLOCATE-INSTANCE</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass">29.1.3.6.7. 
      Generic Function <CODE 
      class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs">29.1.3.6.8. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class">29.1.3.6.9. 
      Generic Function <CODE 
      class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl">29.1.3.6.10. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots">29.1.3.6.11. 
      Generic Function <CODE class=function>CLOS:COMPUTE-SLOTS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd">29.1.3.6.12. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs">29.1.3.6.13. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class">29.1.3.6.14. 
      Generic Function <CODE 
      class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs">29.1.3.6.15. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-dep">29.1.3.7. 
    Updating Dependencies</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass">29.1.3.7.1. 
      Generic Function <CODE 
      class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass">29.1.3.7.2. 
      Generic Function <CODE 
      class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd">29.1.4. Slot 
  Definitions</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-inheritance">29.1.4.1. 
    Inheritance Structure of slot definition metaobject Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-readers">29.1.4.2. 
    Introspection: Readers for slot definition metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-readers-GFs">29.1.4.2.1. 
      Generic Functions</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-methods">29.1.4.2.2. 
      Methods</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-dsd">29.1.4.2.3. 
      Readers for direct slot definition metaobjects</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-esd">29.1.4.2.4. 
      Readers for effective slot definition metaobjects</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-init">29.1.4.3. 
    Initialization of slot definition metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-mo-methods">29.1.4.3.1. 
      Methods</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf">29.1.5. Generic 
  Functions</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-inheritance">29.1.5.1. 
    Inheritance Structure of generic function metaobject Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-readers">29.1.5.2. 
    Introspection: Readers for generic function metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name">29.1.5.2.1. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods">29.1.5.2.2. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list">29.1.5.2.3. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order">29.1.5.2.4. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations">29.1.5.2.5. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class">29.1.5.2.6. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination">29.1.5.2.7. 
      Generic Function <CODE 
      class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name-methods">29.1.5.2.8. 
      Methods</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init">29.1.5.3. 
    Initialization of Generic Functions</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-defgeneric">29.1.5.3.1. 
      Macro <CODE class=function>DEFGENERIC</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-invocation">29.1.5.3.2. 
      Generic Function Invocation Protocol</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-mo">29.1.5.3.3. 
      Initialization of generic function metaobjects</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-customize">29.1.5.4. 
    Customization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#setf-gf-name">29.1.5.4.1. 
      Generic Function <CODE class=code>(SETF 
      CLOS:GENERIC-FUNCTION-NAME)</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf">29.1.5.4.2. 
      Generic Function <CODE 
      class=function>ENSURE-GENERIC-FUNCTION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC">29.1.5.4.3. 
      Generic Function <CODE 
      class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-add-method">29.1.5.4.4. 
      Generic Function <CODE class=function>ADD-METHOD</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-remove-method">29.1.5.4.5. 
      Generic Function <CODE class=function>REMOVE-METHOD</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods">29.1.5.4.6. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC">29.1.5.4.7. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method">29.1.5.4.8. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function">29.1.5.4.9. 
      Function <CODE 
      class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda">29.1.5.4.10. 
      Generic Function <CODE 
      class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function">29.1.5.4.11. 
      Generic Function <CODE 
      class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth">29.1.6. 
  Methods</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-inheritance">29.1.6.1. 
    Inheritance Structure of method metaobject Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-mo-readers">29.1.6.2. 
    Introspection: Readers for method metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers">29.1.6.2.1. 
      Generic Function <CODE 
      class=function>CLOS:METHOD-SPECIALIZERS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-qualifiers">29.1.6.2.2. 
      Generic Function <CODE class=function>METHOD-QUALIFIERS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list">29.1.6.2.3. 
      Generic Function <CODE 
      class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf">29.1.6.2.4. 
      Generic Function <CODE 
      class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-function">29.1.6.2.5. 
      Generic Function <CODE 
      class=function>CLOS:METHOD-FUNCTION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-mo-readers-methods">29.1.6.2.6. 
      Methods</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init">29.1.6.3. 
    Initialization of Methods</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod">29.1.6.3.1. 
      Macro <CODE class=function>DEFMETHOD</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo">29.1.6.3.2. 
      Initialization of method metaobjects</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-customize">29.1.6.4. 
    Customization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list">29.1.6.4.1. 
      Function <CODE class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names">29.1.6.4.2. 
      Function <CODE 
      class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-accessors">29.1.7. 
  Accessor Methods</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-acc-readers">29.1.7.1. 
    Introspection</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef">29.1.7.1.1. 
      Generic Function <CODE 
      class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-acc-customize">29.1.7.2. 
    Customization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class">29.1.7.2.1. 
      Generic Function <CODE 
      class=function>CLOS:READER-METHOD-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class">29.1.7.2.2. 
      Generic Function <CODE 
      class=function>CLOS:WRITER-METHOD-CLASS</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-specializers">29.1.8. 
  Specializers</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-specializers-inheritance">29.1.8.1. 
    Inheritance Structure of Specializer Metaobject Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-spec-readers">29.1.8.2. 
    Introspection</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#eql-specializer-object">29.1.8.2.1. 
      Function <CODE 
      class=function>CLOS:EQL-SPECIALIZER-OBJECT</CODE></A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-spec-init">29.1.8.3. 
    Initialization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer">29.1.8.3.1. 
      Function <CODE 
      class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-spec-dep">29.1.8.4. 
    Updating Dependencies</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods">29.1.8.4.1. 
      Generic Function <CODE 
      class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs">29.1.8.4.2. 
      Generic Function <CODE 
      class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method">29.1.8.4.3. 
      Generic Function <CODE 
      class=function>CLOS:ADD-DIRECT-METHOD</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method">29.1.8.4.4. 
      Generic Function <CODE 
      class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comb">29.1.9. 
  Method Combinations</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comb-inheritance">29.1.9.1. 
    Inheritance Structure of method combination metaobject Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comb-customize">29.1.9.2. 
    Customization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#find-method-combination">29.1.9.2.1. 
      Generic Function <CODE 
      class=function>CLOS:FIND-METHOD-COMBINATION</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-access">29.1.10. 
  Slot Access</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-instance-stuct">29.1.10.1. 
    Instance Structure Protocol</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable">29.1.10.2. 
    Funcallable Instances</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-customize">29.1.10.3. 
    Customization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access">29.1.10.3.1. 
      Function <CODE 
      class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access">29.1.10.3.2. 
      Function <CODE 
      class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif">29.1.10.3.3. 
      Function <CODE 
      class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC">29.1.10.3.4. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC">29.1.10.3.5. 
      Generic Function <CODE class=code>(SETF 
      CLOS:SLOT-VALUE-USING-CLASS)</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC">29.1.10.3.6. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC">29.1.10.3.7. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint">29.1.11. 
  Dependent Maintenance</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint-protocol">29.1.11.1. 
    Protocol</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent">29.1.11.1.1. 
      Generic Function <CODE 
      class=function>CLOS:UPDATE-DEPENDENT</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent">29.1.11.1.2. 
      Generic Function <CODE class=function>CLOS:ADD-DEPENDENT</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent">29.1.11.1.3. 
      Generic Function <CODE 
      class=function>CLOS:REMOVE-DEPENDENT</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents">29.1.11.1.4. 
      Generic Function <CODE 
      class=function>CLOS:MAP-DEPENDENTS</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-clisp">29.1.12. 
  Deviations from [<ABBR class=abbrev>AMOP</ABBR>]</A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=mop-intro></A>29.1.1.&nbsp;Introduction</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-intro-notation">29.1.1.1. 
  Notation</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-package">29.1.1.2. 
  Package</A></SPAN></DT></DL></DIV>
<P>The <A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> specification 
([<A title="[ANSI CL]" 
href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
class=abbrev>ANSI CL</ABBR></A>] Chanpter 7) describes the standard Programmer 
Interface for the <A href="http://www.lisp.org/" target=_top><SPAN><STRONG 
class=command>Common Lisp</STRONG></SPAN></A> Object System (<A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A>). This document extends that 
specification by defining a metaobject protocol for <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> - that is, a description of <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> itself as an extensible <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> program. In this description, the 
fundamental elements of <A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> programs 
(classes, slot definitions, generic functions, methods, specializers and method 
combinations) are represented by first-class objects. The behavior of <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> is provided by these objects, or, more 
precisely, by methods specialized to the classes of these objects. </P>
<P>Because these objects represent pieces of <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> programs, and because their behavior 
provides the behavior of the <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> language itself, they are considered 
meta-level objects or metaobjects. The protocol followed by the metaobjects to 
provide the behavior of <A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> is called the 
<A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> “<SPAN 
class=quote>Metaobject Protocol</SPAN>” (MOP).</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-intro-notation></A>29.1.1.1.&nbsp;Notation</H4></DIV></DIV></DIV>
<P>The description of functions follows the same form as used in the <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> specification. The description of generic 
functions is similar to that in the <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> specification, but some minor changes 
have been made in the way methods are presented.</P>
<P>The following is an example of the format for the syntax description of a 
generic function: </P><PRE class=programlisting>(<CODE class=function>gf1</CODE> <EM class=replaceable><CODE>x</CODE></EM> <EM class=replaceable><CODE>y</CODE></EM> <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> <EM class=replaceable><CODE>v</CODE></EM> <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> <EM class=replaceable><CODE>k</CODE></EM>)
</PRE>
<P>This description indicates that <CODE class=function>gf1</CODE> is a generic 
function with two required parameters, <EM class=replaceable><CODE>x</CODE></EM> 
and <EM class=replaceable><CODE>y</CODE></EM>, an optional parameter <EM 
class=replaceable><CODE>v</CODE></EM> and a keyword parameter <EM 
class=replaceable><CODE>k</CODE></EM>.</P>
<P>The description of a generic function includes a description of its behavior. 
This provides the general behavior, or protocol of the generic function. All 
methods defined on the generic function, both portable and specified, must have 
behavior consistent with this description.</P>
<P>Every generic function described here is an instance of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> and uses 
the <A href="http://www.lisp.org/HyperSpec/Body/sec_7-6-6-2.html" 
target=_top><CODE class=function>STANDARD</CODE></A> method combination.</P>
<P>The description of a generic function also includes descriptions of the 
specified methods for that generic function. In the description of these 
methods, a <STRONG class=first><EM class=firstterm>method 
signature</EM></STRONG> is used to describe the parameters and parameter 
specializers of each method. The following is an example of the format for a 
method signature: </P><PRE class=programlisting><SPAN class=method><CODE class=literal>(<CODE class=function>gf1</CODE> (<EM class=replaceable><CODE>x</CODE></EM> <A href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE class=classname>CLASS</CODE></A>) <EM class=replaceable><CODE>y</CODE></EM> <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> <EM class=replaceable><CODE>v</CODE></EM> <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> <EM class=replaceable><CODE>k</CODE></EM>)</CODE></SPAN>
</PRE>
<P>This signature indicates that this primary method on the generic function 
<CODE class=function>gf1</CODE> has two required parameters, named <EM 
class=replaceable><CODE>x</CODE></EM> and <EM 
class=replaceable><CODE>y</CODE></EM>. In addition, there is an optional 
parameter <EM class=replaceable><CODE>v</CODE></EM> and a keyword parameter <EM 
class=replaceable><CODE>k</CODE></EM>. This signature also indicates that the 
method's parameter specializers are the classes <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
class=classname>T</CODE></A>. </P>
<P>The description of each method includes a description of the behavior 
particular to that method.</P>
<P>An abbreviated syntax is used when referring to a method defined elsewhere in 
the document. This abbreviated syntax includes the name of the generic function, 
the qualifiers, and the parameter specializers. A reference to the method with 
the signature shown above is written as: <SPAN class=method><CODE 
class=literal><CODE class=function>gf1</CODE> (<A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
class=classname>T</CODE></A>)</CODE></SPAN>. </P></DIV><!--mop-intro-notation-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-package></A>29.1.1.2.&nbsp;Package</H4></DIV></DIV></DIV>
<P>The package exporting the <A title="29.1.&nbsp;Meta-Object Protocol" 
href="http://clisp.cons.org/impnotes/mop-chap.html">Meta-Object Protocol</A> 
symbols is unspecified.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The symbols specified by the <A title="29.1.&nbsp;Meta-Object Protocol" 
href="http://clisp.cons.org/impnotes/mop-chap.html">Meta-Object Protocol</A> are 
exported from the package <A title="4.2.&nbsp;Classes [CLHS-4.3]" 
href="http://clisp.cons.org/impnotes/classes.html"><STRONG class=package>“<SPAN 
class=quote>CLOS</SPAN>”</STRONG></A> and <A 
title="11.5.3.&nbsp;Function EXT:RE-EXPORT" 
href="http://clisp.cons.org/impnotes/pack-dict.html#re-export"><CODE 
class=function>EXT:RE-EXPORT</CODE></A>ed from the package <A 
href="http://clisp.cons.org/impnotes/imppack.html#ext-pac"><STRONG 
class=package>“<SPAN class=quote>EXT</SPAN>”</STRONG></A>.</P></DIV>
<P>The package exporting the <A title="29.1.&nbsp;Meta-Object Protocol" 
href="http://clisp.cons.org/impnotes/mop-chap.html">Meta-Object Protocol</A> 
symbols is different in other implementations: In <A 
href="http://sbcl.sourceforge.net/" target=_top><SPAN><STRONG 
class=command>SBCL</STRONG></SPAN></A> it is the package <STRONG 
class=package>“<SPAN class=quote>SB-MOP</SPAN>”</STRONG>; in <A 
href="http://openmcl.clozure.com/" target=_top><SPAN><STRONG 
class=command>OpenMCL</STRONG></SPAN></A> it is the package <STRONG 
class=package>“<SPAN class=quote>OPENMCL-MOP</SPAN>”</STRONG>.</P></DIV><!--mop-package--></DIV><!--mop-intro-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=mop-overview></A>29.1.2.&nbsp;Overview</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects">29.1.2.1. 
  Metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-classes">29.1.2.1.1. 
    Classes</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-slot-defs">29.1.2.1.2. 
    Slot Definitions</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-gen-funs">29.1.2.1.3. 
    Generic Functions</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-methods">29.1.2.1.4. 
    Methods</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec">29.1.2.1.5. 
    Specializers</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-meth-combs">29.1.2.1.6. 
    Method Combinations</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-cl-inheritance">29.1.2.2. 
  Inheritance Structure of Metaobject Classes</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-impl-and-user-spec">29.1.2.2.1. 
    Implementation and User Specialization</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-portable-restrictions">29.1.2.2.1.1. 
      Restrictions on Portable Programs</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-impl-restrictions">29.1.2.2.1.2. 
      Restrictions on Implementations</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ui-macro">29.1.2.3. 
  Processing of the User Interface Macros</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-compile-ui-macro">29.1.2.3.1. 
    Compile-file Processing of the User Interface Macros</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-ui-others">29.1.2.3.2. 
    Compile-file Processing of Specific User Interface Macros</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-mo-init">29.1.2.4. 
  Metaobject Initialization Protocol</A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-metaobjects></A>29.1.2.1.&nbsp;Metaobjects</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-classes">29.1.2.1.1. 
  Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-slot-defs">29.1.2.1.2. 
  Slot Definitions</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-gen-funs">29.1.2.1.3. 
  Generic Functions</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-methods">29.1.2.1.4. 
  Methods</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec">29.1.2.1.5. 
  Specializers</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-meth-combs">29.1.2.1.6. 
  Method Combinations</A></SPAN></DT></DL></DIV>
<P>For each kind of program element there is a corresponding <STRONG 
class=first><EM class=firstterm>basic metaobject class <A class=indexterm 
id=mop-ba-mo-cl></A></EM></STRONG>. These are the classes: <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A>, <A title="29.1.4.&nbsp;Slot Definitions" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
class=classname>CLOS:SLOT-DEFINITION</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
class=classname>METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method-combination.html" 
target=_top><CODE class=classname>METHOD-COMBINATION</CODE></A>. A <STRONG 
class=first><EM class=firstterm>metaobject class<A class=indexterm 
id=mo-cl></A></EM></STRONG> is a subclass of exactly one of these classes. The 
results are undefined if an attempt is made to define a <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A> that is a subclass of more than one basic 
metaobject class. A <STRONG class=first><EM class=firstterm>metaobject<A 
class=indexterm id=mop-mo></A></EM></STRONG> is an instance of a metaobject 
class.</P>
<P>Each metaobject represents one program element. Associated with each 
metaobject is the information required to serve its role. This includes 
information that might be provided directly in a user interface macro such as <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> or <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A>. It also includes information computed 
indirectly from other metaobjects such as that computed from class inheritance 
or the full set of methods associated with a generic function.</P>
<P>Much of the information associated with a metaobject is in the form of 
connections to other metaobjects. This interconnection means that the role of a 
metaobject is always based on that of other metaobjects. As an introduction to 
this interconnected structure, this section presents a partial enumeration of 
the kinds of information associated with each kind of metaobject. More detailed 
information is presented later.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=mop-mo-classes></A>29.1.2.1.1.&nbsp;Classes</H5></DIV></DIV></DIV>
<P>A <STRONG class=first><EM class=firstterm>class metaobject <A class=indexterm 
id=mop-class-mo></A></EM></STRONG>determines the structure and the default 
behavior of its instances. The following information is associated with <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s: </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The name, if there is one, is available as an object. 
  <LI>The direct subclasses, direct superclasses and class precedence list are 
  available as lists of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>s.
  <LI>The slots defined directly in the class are available as a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s. The slots which are accessible in instances of the 
  class are available as a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s.
  <LI>The methods which use the class as a specializer, and the generic 
  functions associated with those methods are available as lists of method and 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>s respectively.
  <LI>The documentation is available as a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>.</LI></UL></DIV>
<P>See also <A title=29.1.3.&nbsp;Classes 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-classes">Section&nbsp;29.1.3, 
“Classes”</A></P></DIV><!--mop-mo-classes-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-mo-slot-defs></A>29.1.2.1.2.&nbsp;Slot 
Definitions</H5></DIV></DIV></DIV>
<P>A <STRONG class=first><EM class=firstterm>slot definition metaobject <A 
class=indexterm id=mop-slot-def-mo></A></EM></STRONG>contains information about 
the definition of a slot. There are two kinds of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s: A <STRONG class=first><EM class=firstterm>direct<A 
class=indexterm id=mop-dsd-mo></A></EM></STRONG> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> is used to represent the direct definition of a slot 
in a class. This corresponds roughly to the slot specifiers found in <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> forms. An <STRONG class=first><EM 
class=firstterm>effective<A class=indexterm id=mop-esd-mo></A></EM></STRONG> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> is used to represent information, including inherited 
information, about a slot which is accessible in instances of a particular 
class.</P>
<P>Associated with each <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> is a list of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s representing the slots defined directly in the class. 
Also associated with each <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> is a list of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s representing the set of slots accessible in instances 
of that class.</P>
<P>The following information is associated with both direct and effective slot 
definitions metaobjects: </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The name, allocation, and type are available as forms that could appear in 
  a <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
  target=_top><CODE class=function>DEFCLASS</CODE></A> form.
  <LI>The initialization form, if there is one, is available as a form that 
  could appear in a <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form. The initialization form together with 
  its <A href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" 
  target=_top>lexical environment</A> is available as a function of no arguments 
  which, when called, returns the result of evaluating the initialization form 
  in its <A href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" 
  target=_top>lexical environment</A>. This is called the <STRONG 
  class=first><EM class=firstterm>initfunction</EM></STRONG> of the slot. 
  <LI>The slot filling initialization arguments are available as a list of 
  symbols.
  <LI>The documentation is available as a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>.</LI></UL></DIV>
<P>Certain other information is only associated with <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s. This information applies only to the direct 
definition of the slot in the class (it is not inherited). </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The function names of those generic functions for which there are 
  automatically generated reader and writer methods. This information is 
  available as lists of function names. Any accessors specified in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form are broken down into their equivalent 
  readers and writers in the direct slot definition.</LI></UL></DIV>
<P>Information, including inherited information, which applies to the definition 
of a slot in a particular class in which it is accessible is associated only 
with <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s. </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>For certain slots, the location of the slot in instances of the class is 
  available. </LI></UL></DIV>
<P>See also <A title="29.1.4.&nbsp;Slot Definitions" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd">Section&nbsp;29.1.4, 
“Slot Definitions”</A></P></DIV><!--mop-mo-slot-defs-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-mo-gen-funs></A>29.1.2.1.3.&nbsp;Generic 
Functions</H5></DIV></DIV></DIV>
<P>A <STRONG class=first><EM class=firstterm>generic function metaobject <A 
class=indexterm id=mop-gen-fun-mo></A></EM></STRONG>contains information about a 
generic function over and above the information associated with each of the 
generic function's methods. </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The name is available as a function name. 
  <LI>The methods associated with the generic function are available as a list 
  of <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s.
  <LI>The default class for this generic function's <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s is available as a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>.
  <LI>The <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> is available 
  as a <A href="http://www.lisp.org/HyperSpec/Body/syscla_list.html" 
  target=_top><CODE class=classname>LIST</CODE></A>. 
  <LI>The method combination is available as a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
  combination metaobject</A>. 
  <LI>The argument precedence order is available as a permutation of those 
  symbols from the <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> which name 
  the required arguments of the generic function.
  <LI>
  <P>The “<SPAN class=quote>declarations</SPAN>” are available as a list of <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_d.html#declaration_specifier" 
  target=_top>declaration specifier</A>s.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Note</H3>
  <P>There is a slight misnomer in the naming of functions and options in this 
  document: Where the term “<SPAN class=quote>declaration</SPAN>” is used, 
  actually a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_d.html#declaration_specifier" 
  target=_top>declaration specifier</A> is meant. </P></DIV>
  <LI>The documentation is available as a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>.</LI></UL></DIV>
<P>See also <A title="29.1.5.&nbsp;Generic Functions" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf">Section&nbsp;29.1.5, 
“Generic Functions”</A></P></DIV><!--mop-mo-gen-funs-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=mop-mo-methods></A>29.1.2.1.4.&nbsp;Methods</H5></DIV></DIV></DIV>
<P>A <STRONG class=first><EM class=firstterm>method metaobject <A 
class=indexterm id=mop-method-mo></A></EM></STRONG>contains information about a 
specific <A href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
target=_top><CODE class=classname>METHOD</CODE></A>. </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The qualifiers are available as a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_list.html" target=_top><CODE 
  class=classname>LIST</CODE></A> of of non-<A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> atoms.
  <LI>The <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> is available 
  as a <A href="http://www.lisp.org/HyperSpec/Body/syscla_list.html" 
  target=_top><CODE class=classname>LIST</CODE></A>. 
  <LI>The specializers are available as a list of specializer metaobjects.
  <LI>The function is available as a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_function.html" 
  target=_top><CODE class=classname>FUNCTION</CODE></A>. This function can be 
  applied to arguments and a list of next methods using <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_apply.html" target=_top><CODE 
  class=function>APPLY</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_funcall.html" target=_top><CODE 
  class=function>FUNCALL</CODE></A>.
  <LI>When the method is associated with a generic function, that <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A> is available. A method can be associated with at most 
  one generic function at a time.
  <LI>The documentation is available as a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>.</LI></UL></DIV>
<P>See also <A title=29.1.6.&nbsp;Methods 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth">Section&nbsp;29.1.6, 
“Methods”</A></P></DIV><!--mop-mo-methods-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=mop-mo-spec></A>29.1.2.1.5.&nbsp;Specializers</H5></DIV></DIV></DIV>
<P>A <STRONG class=first><EM class=firstterm>specializer metaobject <A 
class=indexterm id=spec-mo></A></EM></STRONG>represents the specializers of a <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
class=classname>METHOD</CODE></A>. <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s are themselves specializer metaobjects. A special kind of 
specializer metaobject is used for <A 
href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
class=classname>EQL</CODE></A> specializers.</P>
<P>See also <A title=29.1.8.&nbsp;Specializers 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-specializers">Section&nbsp;29.1.8, 
“Specializers”</A></P></DIV><!--mop-mo-spec-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-mo-meth-combs></A>29.1.2.1.6.&nbsp;Method 
Combinations</H5></DIV></DIV></DIV>
<P>A <STRONG class=first><EM class=firstterm>method combination metaobject <A 
class=indexterm id=mop-meth-comp-mo></A></EM></STRONG>represents the information 
about the method combination being used by a generic function.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>
<P>This document does not specify the structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
combination metaobject</A>s. </P></DIV>
<P>See also <A title="29.1.9.&nbsp;Method Combinations" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comb">Section&nbsp;29.1.9, 
“Method Combinations”</A></P></DIV><!--mop-mo-meth-combs--></DIV><!--mop-metaobjects-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-mo-cl-inheritance></A>29.1.2.2.&nbsp;Inheritance 
Structure of Metaobject Classes</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-impl-and-user-spec">29.1.2.2.1. 
  Implementation and User Specialization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-portable-restrictions">29.1.2.2.1.1. 
    Restrictions on Portable Programs</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-impl-restrictions">29.1.2.2.1.2. 
    Restrictions on Implementations</A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=figure><A id=mop-mo-cl-inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.1.&nbsp;Inheritance structure of metaobject 
classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG alt="Inheritance structure of metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-all.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR class=figure-break>
<P>The inheritance structure of the specified metaobject classes is shown in <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships&#10;  Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct">Table&nbsp;29.1, 
“Direct Superclass Relationships Among The Specified Metaobject Classes”</A>. 
The class of every class shown is <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> except for the 
classes <A href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" 
target=_top><CODE class=classname>T</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_function.html" target=_top><CODE 
class=classname>FUNCTION</CODE></A>, which are instances of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>, and the classes <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>, which 
are instances of the class <A title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>. </P>
<DIV class=table><A id=mop-inherit-struct></A>
<P class=title><B>Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among 
The Specified Metaobject Classes</B></P>
<DIV class=table-contents>
<TABLE 
summary="Direct Superclass Relationships&#10;  Among The Specified Metaobject Classes" 
border=1>
  <COLGROUP>
  <COL>
  <COL>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Metaobject Class</TH>
    <TH align=middle>Abstract</TH>
    <TH align=middle>Subclassable</TH>
    <TH align=middle>Direct Superclasses</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
      target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
      class=classname>T</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A title="29.1.10.2.&nbsp;Funcallable Instances" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
      class=classname>CLOS:FUNCALLABLE-STANDARD-OBJECT</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
      target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A> <A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_function.html" 
      target=_top><CODE class=classname>FUNCTION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A title=29.1.2.1.&nbsp;Metaobjects 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
      class=classname>CLOS:METAOBJECT</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
      target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
      target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.&nbsp;Metaobjects 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
      class=classname>CLOS:METAOBJECT</CODE></A> <A 
      title="29.1.10.2.&nbsp;Funcallable Instances" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
      class=classname>CLOS:FUNCALLABLE-STANDARD-OBJECT</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
      target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
      target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
      target=_top><CODE class=classname>METHOD</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.&nbsp;Metaobjects 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
      class=classname>CLOS:METAOBJECT</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
      target=_top><CODE class=classname>STANDARD-METHOD</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
      target=_top><CODE class=classname>METHOD</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.6.3.2.&nbsp;Initialization of method metaobjects" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo"><CODE 
      class=classname>CLOS:STANDARD-ACCESSOR-METHOD</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
      target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:STANDARD-READER-METHOD</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      title="29.1.6.3.2.&nbsp;Initialization of method metaobjects" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo"><CODE 
      class=classname>CLOS:STANDARD-ACCESSOR-METHOD</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
      class=classname>CLOS:STANDARD-WRITER-METHOD</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      title="29.1.6.3.2.&nbsp;Initialization of method metaobjects" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo"><CODE 
      class=classname>CLOS:STANDARD-ACCESSOR-METHOD</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_method-combination.html" 
      target=_top><CODE class=classname>METHOD-COMBINATION</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.&nbsp;Metaobjects 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
      class=classname>CLOS:METAOBJECT</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A title="29.1.4.&nbsp;Slot Definitions" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
      class=classname>CLOS:SLOT-DEFINITION</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.&nbsp;Metaobjects 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
      class=classname>CLOS:METAOBJECT</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:DIRECT-SLOT-DEFINITION</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title="29.1.4.&nbsp;Slot Definitions" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
      class=classname>CLOS:SLOT-DEFINITION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:EFFECTIVE-SLOT-DEFINITION</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title="29.1.4.&nbsp;Slot Definitions" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
      class=classname>CLOS:SLOT-DEFINITION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title="29.1.4.&nbsp;Slot Definitions" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
      class=classname>CLOS:SLOT-DEFINITION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A> <A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:DIRECT-SLOT-DEFINITION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A> <A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:EFFECTIVE-SLOT-DEFINITION</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A title=29.1.2.1.5.&nbsp;Specializers 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
      class=classname>CLOS:SPECIALIZER</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.&nbsp;Metaobjects 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
      class=classname>CLOS:METAOBJECT</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:EQL-SPECIALIZER</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.5.&nbsp;Specializers 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
      class=classname>CLOS:SPECIALIZER</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
      target=_top><CODE class=classname>CLASS</CODE></A></TD>
    <TD align=middle>yes</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A title=29.1.2.1.5.&nbsp;Specializers 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
      class=classname>CLOS:SPECIALIZER</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
      target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
      target=_top><CODE class=classname>CLASS</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>no</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
      target=_top><CODE class=classname>CLASS</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
      target=_top><CODE class=classname>STANDARD-CLASS</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
      target=_top><CODE class=classname>CLASS</CODE></A>)</TD></TR>
  <TR>
    <TD align=middle><A title="29.1.10.2.&nbsp;Funcallable Instances" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
      class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A></TD>
    <TD align=middle>no</TD>
    <TD align=middle>yes</TD>
    <TD align=middle>(<A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
      target=_top><CODE 
class=classname>CLASS</CODE></A>)</TD></TR></TBODY></TABLE></DIV></DIV>
<P><BR class=table-break></P>
<P>Each class with a “<SPAN class=quote>yes</SPAN>” in the “<SPAN 
class=quote>Abstract</SPAN>” column is an <SPAN class=emphasis><EM>abstract 
class</EM></SPAN> and is not intended to be instantiated. The results are 
undefined if an attempt is made to make an instance of one of these classes with 
<A href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>.</P>
<P>Each class with a “<SPAN class=quote>yes</SPAN>” in the “<SPAN 
class=quote>Subclassable</SPAN>” column can be used as direct superclass for 
portable programs. It is not meaningful to subclass a class that has a “<SPAN 
class=quote>no</SPAN>” in this column.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The class <A href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
target=_top><CODE class=classname>METHOD</CODE></A> is also subclassable: It is 
possible to create subclasses of <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
class=classname>METHOD</CODE></A> that do not inherit from <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>.</P></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN> and some other implementations</H3>
<P>The class <A title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-OBJECT</CODE></A>'s class precedence 
list contains <A href="http://www.lisp.org/HyperSpec/Body/syscla_function.html" 
target=_top><CODE class=classname>FUNCTION</CODE></A> before <A 
href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>, not after <A 
href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>. This is the most 
transparent way to realize the [<A title="[ANSI CL]" 
href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
class=abbrev>ANSI CL</ABBR></A>] requirement (see the [<A title="[ANSI CL]" 
href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
class=abbrev>ANSI CL</ABBR></A>] section <A 
href="http://www.lisp.org/HyperSpec/Body/sec_4-2-2.html" target=_top>4.2.2 
“<SPAN class=quote>Type Relationships</SPAN>”</A>) that <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A>'s class precedence 
list contains <A href="http://www.lisp.org/HyperSpec/Body/syscla_function.html" 
target=_top><CODE class=classname>FUNCTION</CODE></A> before <A 
href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>.</P></DIV>
<P>The classes <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>, <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>, <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>, <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:STANDARD-READER-METHOD</CODE></A>, <A 
title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
class=classname>CLOS:STANDARD-WRITER-METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> are 
called <STRONG class=first><EM class=firstterm>standard metaobject <A 
class=indexterm id=std-mo></A></EM></STRONG>classes. For each kind of 
metaobject, this is the class the user interface macros presented in the <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> use by default. These are also the 
classes on which user specializations are normally based.</P>
<P>The classes <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>, <A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> and <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> are special-purpose <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes. Built-in classes are instances of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>. The class <A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> provides a special 
kind of instances described in <A title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable">Section&nbsp;29.1.10.2, 
“Funcallable Instances”</A>. When the definition of a class references another 
class which has not yet been defined, an instance of <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> is used as a stand-in 
until the class is actually defined.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title><A id=forward-referenced-class-clisp></A>Implementation of class 
<CODE class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE> in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The class <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> is implemented in a way 
that fixes several flaws in the [<A 
href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>] specification.</P>
<P>It is not a subclass of <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A> and <A title=29.1.2.1.5.&nbsp;Specializers 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
class=classname>CLOS:SPECIALIZER</CODE></A>, just a subclass of <A 
title=29.1.2.1.&nbsp;Metaobjects 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-metaobjects"><CODE 
class=classname>CLOS:METAOBJECT</CODE></A>, because forward references to 
classes are not classes and cannot be used as specializers of methods. An [<A 
href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>] compatibility mode is provided, however, if you 
set the variable <STRONG class=first><EM class=firstterm><CODE 
class=varname>CUSTOM:*FORWARD-REFERENCED-CLASS-MISDESIGN*</CODE> <A 
class=indexterm id=frc-bad></A></EM></STRONG>to <A 
href="http://www.lisp.org/HyperSpec/Body/convar_t.html" target=_top><CODE 
class=constant>T</CODE></A>. In this mode, <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> is formally a subclass 
of <A href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
target=_top><CODE class=classname>CLASS</CODE></A> and <A 
title=29.1.2.1.5.&nbsp;Specializers 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
class=classname>CLOS:SPECIALIZER</CODE></A>, but the behaviour of <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> instances is the 
same.</P>
<P>The [<A href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>] says that the first argument of <A 
title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> can be a <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A>. But from the 
description of <A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A>, it is clear that it can only be a 
class returned by <A 
href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE 
class=function>FIND-CLASS</CODE></A>, and [<A title="[ANSI CL]" 
href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
class=abbrev>ANSI CL</ABBR></A>] <A 
href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE 
class=function>FIND-CLASS</CODE></A> cannot return a <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A>.</P>
<P>The [<A href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>] says that <A 
title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> creates a <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> for not-yet-defined 
class symbols among the direct-superclasses list. But this leads to many <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> with the same name 
(since they cannot be stored and retrieved through <A 
href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE 
class=function>FIND-CLASS</CODE></A>), and since <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
target=_top><CODE class=function>CHANGE-CLASS</CODE></A> preserves the <A 
href="http://www.lisp.org/HyperSpec/Body/fun_eq.html" target=_top><CODE 
class=function>EQ</CODE></A>-ness, after the class is defined, we have many 
class objects with the same name.</P>
<P>In the direct-superclasses list of non-finalized classes, <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> instances can occur, 
denoting classes that have not yet been defined. When or after such a class gets 
defined, the <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> instance is replaced 
with the real class. <A href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></A> uses simple object replacement, not <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
target=_top><CODE class=function>CHANGE-CLASS</CODE></A>, in this 
process.</P></DIV>
<P>The class <A 
href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A> is the <SPAN 
class=emphasis><EM>default direct superclass</EM></SPAN> of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>. When an instance of 
the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> is created, and no 
direct superclasses are explicitly specified, it defaults to the class <A 
href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>. In this way, any 
behavior associated with the class <A 
href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A> will be inherited, 
directly or indirectly, by all instances of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>. A subclass of <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> may have a different 
class as its default direct superclass, but that class must be a subclass of the 
class <A href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>.</P>
<P>The same is true for <A title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> and <A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-OBJECT</CODE></A>.</P>
<P>The class <A title=29.1.2.1.5.&nbsp;Specializers 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
class=classname>CLOS:SPECIALIZER</CODE></A> captures only the most basic 
behavior of method specializers, and is not itself intended to be instantiated. 
The class <A href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
target=_top><CODE class=classname>CLASS</CODE></A> is a direct subclass of <A 
title=29.1.2.1.5.&nbsp;Specializers 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-spec"><CODE 
class=classname>CLOS:SPECIALIZER</CODE></A> reflecting the property that classes 
by themselves can be used as method specializers. The class <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:EQL-SPECIALIZER</CODE></A> is used for <A 
href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
class=classname>EQL</CODE></A> specializers.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=mop-ov-impl-and-user-spec></A>29.1.2.2.1.&nbsp;Implementation and User 
Specialization</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-portable-restrictions">29.1.2.2.1.1. 
  Restrictions on Portable Programs</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-impl-restrictions">29.1.2.2.1.2. 
  Restrictions on Implementations</A></SPAN></DT></DL></DIV>
<P>The purpose of the Metaobject Protocol is to provide users with a powerful 
mechanism for extending and customizing the basic behavior of the <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A>. As an object-oriented description of the 
basic <A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> behavior, the 
Metaobject Protocol makes it possible to create these extensions by defining 
specialized subclasses of existing metaobject classes.</P>
<P>The Metaobject Protocol provides this capability without interfering with the 
implementor's ability to develop high-performance implementations. This balance 
between user extensibility and implementor freedom is mediated by placing 
explicit restrictions on each. Some of these restrictions are general---they 
apply to the entire class graph and the applicability of all methods. These are 
presented in this section.</P>
<P>The following additional terminology is used to present these 
restrictions:</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>Metaobjects are divided into three categories. Those defined in this 
  document are called <STRONG class=first><EM 
  class=firstterm>specified</EM></STRONG>; those defined by an implementation 
  but not mentioned in this document are called <STRONG class=first><EM 
  class=firstterm>implementation-specific</EM></STRONG>; and those defined by a 
  portable program are called <STRONG class=first><EM 
  class=firstterm>portable</EM></STRONG>. 
  <LI>A class <EM class=replaceable><CODE>i</CODE></EM> is <STRONG 
  class=first><EM class=firstterm>interposed</EM></STRONG> between two other 
  classes <EM class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> and <EM 
  class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> if and only if there is some 
  path, following direct superclasses, from the class <EM 
  class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> to the class <EM 
  class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> which includes <EM 
  class=replaceable><CODE>i</CODE></EM>.
  <LI>A method is <STRONG class=first><EM 
  class=firstterm>specialized</EM></STRONG> to a class if and only if that class 
  is in the list of specializers associated with the method; and the method is 
  in the list of methods associated with some generic function.
  <LI>In a given implementation, a specified method is said to have been <STRONG 
  class=first><EM class=firstterm>promoted</EM></STRONG> if and only if the 
  specializers of the method, <EM 
  class=replaceable><CODE>x<SUB>1</SUB></CODE></EM> ... <EM 
  class=replaceable><CODE>x<SUB>n</SUB></CODE></EM>, are defined in this 
  specification as the classes <EM 
  class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> ... <EM 
  class=replaceable><CODE>k<SUB>n</SUB></CODE></EM>, but in the implementation, 
  one or more of the specializers <EM 
  class=replaceable><CODE>x<SUB>l</SUB></CODE></EM>, is a superclass of the 
  class given in the specification <EM 
  class=replaceable><CODE>k<SUB>l</SUB></CODE></EM>. 
  <LI>
  <P>For a given generic function and set of arguments, a method <EM 
  class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> <STRONG class=first><EM 
  class=firstterm>extends</EM></STRONG> a method <EM 
  class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> if and only if: </P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI><EM class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> and <EM 
    class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> are both associated with 
    the given generic function 
    <LI><EM class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> and <EM 
    class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> are both applicable to the 
    given arguments,
    <LI>the specializers and qualifiers of the methods are such that when the 
    generic function is called, <EM 
    class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> is executed before <EM 
    class=replaceable><CODE>k<SUB>1</SUB></CODE></EM>,
    <LI><EM class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> will be executed 
    if and only if <A 
    href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
    target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> is invoked from 
    within the body of <EM class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> and 

    <LI><A 
    href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
    target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> is invoked from 
    within the body of <EM class=replaceable><CODE>k<SUB>2</SUB></CODE></EM>, 
    thereby causing <EM class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> to be 
    executed. </LI></OL></DIV>
  <LI>
  <P>For a given generic function and set of arguments, a method <EM 
  class=replaceable><CODE>k<SUB>2</SUB></CODE></EM> <STRONG class=first><EM 
  class=firstterm>overrides</EM></STRONG> a method <EM 
  class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> if and only if conditions 
  <SPAN class=emphasis><EM>i</EM></SPAN> through <SPAN 
  class=emphasis><EM>iv</EM></SPAN> above hold and, instead of <SPAN 
  class=emphasis><EM>v</EM></SPAN>, </P>
  <DIV class=orderedlist>
  <OL type=i start=6>
    <LI><A 
    href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
    target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> is not invoked 
    from within the body of <EM 
    class=replaceable><CODE>k<SUB>2</SUB></CODE></EM>, thereby preventing <EM 
    class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> from being executed. 
  </LI></OL></DIV></LI></UL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=mop-portable-restrictions></A>29.1.2.2.1.1.&nbsp;Restrictions on Portable 
Programs</H6></DIV></DIV></DIV>
<P>Portable programs are allowed to define subclasses of specified classes, and 
are permitted to define methods on specified generic functions, with the 
following restrictions: </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>Portable programs must not redefine any specified classes, generic 
  functions, methods or method combinations. Any method defined by a portable 
  program on a specified generic function must have at least one specializer 
  that is neither a specified class nor an <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializer whose associated value is an 
  instance of a specified class.
  <LI>Portable programs may define methods that extend specified methods unless 
  the description of the specified method explicitly prohibits this. Unless 
  there is a specific statement to the contrary, these extending methods must 
  return whatever value was returned by the call to <A 
  href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
  target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A>.
  <LI>
  <P>Portable programs may define methods that override specified methods only 
  when the description of the specified method explicitly allows this. 
  Typically, when a method is allowed to be overridden, a small number of 
  related methods will need to be overridden as well.</P>
  <P>An example of this is the specified methods on the generic functions <A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A>, <A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> and <A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A>. Overriding a specified method 
  on one of these generic functions requires that the corresponding method on 
  the other two generic functions be overridden as well.</P>
  <LI>
  <P>Portable methods on specified generic functions specialized to portable 
  metaobject classes must be defined before any instances of those classes (or 
  any subclasses) are created, either directly or indirectly by a call to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. Methods can be 
  defined after instances are created by <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
  target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> however. 
  Portable metaobject classes cannot be redefined.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Note</H3>
  <P>The purpose of this last restriction is to permit implementations to 
  provide performance optimizations by analyzing, at the time the first instance 
  of a metaobject class is initialized, what portable methods will be applicable 
  to it. This can make it possible to optimize calls to those specified generic 
  functions which would have no applicable portable methods.</P></DIV>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title><A id=mop-mo-redef-clisp-warn></A>Implementation dependent: 
  only in <SPAN><STRONG class=command>CLISP</STRONG></SPAN></H3>
  <P>When a metaobject class is redefined, <A href="http://clisp.cons.org/" 
  target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A> issues a <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_warning.html" 
  target=_top><CODE class=classname>WARNING</CODE></A> that the redefinition has 
  no effect. To avoid this warning, place all metaobject class definitions in a 
  separate file, compile it in a <SPAN class=emphasis><EM>separate</EM></SPAN> 
  session (because <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> in <A href="http://clisp.cons.org/" 
  target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A> is evaluated 
  at <A href="http://www.lisp.org/HyperSpec/Body/glo_c.html#compile_time" 
  target=_top>compile time</A> too; see <A 
  title="29.1.2.3.2.&nbsp;Compile-file Processing of Specific User Interface Macros" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-ui-others">Section&nbsp;29.1.2.3.2, 
  “Compile-file Processing of Specific User Interface Macros”</A>), and then <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_load.html" target=_top><CODE 
  class=function>LOAD</CODE></A> it only <SPAN 
  class=emphasis><EM>once</EM></SPAN> per session. </P></DIV></LI></UL></DIV>
<P></P>
<P>The results are undefined if any of these restrictions are violated.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>
<P>The specification technology used in this document needs further development. 
The concepts of object-oriented protocols and subclass specialization are 
intuitively familiar to programmers of object-oriented systems; the protocols 
presented here fit quite naturally into this framework. Nonetheless, in 
preparing this document, we have found it difficult to give 
specification-quality descriptions of the protocols in a way that makes it clear 
what extensions users can and cannot write. Object-oriented protocol 
specification is inherently about specifying leeway, and this seems difficult 
using current technology.</P></DIV></DIV><!--mop-portable-restrictions-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=mop-impl-restrictions></A>29.1.2.2.1.2.&nbsp;Restrictions 
on Implementations</H6></DIV></DIV></DIV>
<P>Implementations are allowed latitude to modify the structure of specified 
classes and methods. This includes: the interposition of implementation-specific 
classes; the promotion of specified methods; and the consolidation of two or 
more specified methods into a single method specialized to interposed 
classes.</P>
<P>Any such modifications are permitted only so long as for any portable class 
<EM class=replaceable><CODE>k</CODE></EM> that is a subclass of one or more 
specified classes <EM class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> ... <EM 
class=replaceable><CODE>k<SUB>n</SUB></CODE></EM>, the following conditions are 
met:</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>In the actual class precedence list of <EM 
  class=replaceable><CODE>k</CODE></EM>, the classes <EM 
  class=replaceable><CODE>k<SUB>1</SUB></CODE></EM> ... <EM 
  class=replaceable><CODE>k<SUB>n</SUB></CODE></EM> must appear in the same 
  order as they would have if no implementation-specific modifications had been 
  made. 
  <LI>The method applicability of any specified generic function must be the 
  same in terms of behavior as it would have been had no implementation-specific 
  changes been made. This includes specified generic functions that have had 
  portable methods added. In this context, the expression “<SPAN class=quote>the 
  same in terms of behavior</SPAN>” means that methods with the same behavior as 
  those specified are applicable, and in the same order.
  <LI>No portable class <EM class=replaceable><CODE>k</CODE></EM> may inherit, 
  by virtue of being a direct or indirect subclass of a specified class, any 
  slot for which the name is a symbol accessible in the <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_11-1-2-2.html" 
  target=_top><STRONG class=package>“<SPAN 
  class=quote>COMMON-LISP-USER</SPAN>”</STRONG></A> package or exported by any 
  package defined in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>].
  <LI>Implementations are free to define implementation-specific before- and 
  after-methods on specified generic functions. Implementations are also free to 
  define implementation-specific around-methods with extending behavior. 
</LI></UL></DIV></DIV><!--mop-impl-restrictions--></DIV><!--mop-ov-impl-and-user-spec--></DIV><!--mop-mo-cl-inheritance-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-ui-macro></A>29.1.2.3.&nbsp;Processing of the User 
Interface Macros</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-compile-ui-macro">29.1.2.3.1. 
  Compile-file Processing of the User Interface Macros</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-ui-others">29.1.2.3.2. 
  Compile-file Processing of Specific User Interface 
Macros</A></SPAN></DT></DL></DIV>
<P>A list in which the first element is one of the symbols <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/mac_define-me_-combination.html" 
target=_top><CODE class=function>DEFINE-METHOD-COMBINATION</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Issues/iss181.html" target=_top><CODE 
class=function>CLOS:GENERIC-FUNCTION</CODE></A>, <A 
href="http://clisp.cons.org/impnotes/clos-diff.html#gen-flet"><CODE 
class=function>CLOS:GENERIC-FLET</CODE></A> or <A 
href="http://clisp.cons.org/impnotes/clos-diff.html#gen-labels"><CODE 
class=function>CLOS:GENERIC-LABELS</CODE></A>, and which has proper syntax for 
that macro is called a <STRONG class=first><EM class=firstterm>user interface 
macro form</EM></STRONG>. This document provides an extended specification of 
the <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
target=_top><CODE class=function>DEFCLASS</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> macros.</P>
<P>The user interface macros <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> can be used not only to define metaobjects 
that are instances of the corresponding standard metaobject class, but also to 
define metaobjects that are instances of appropriate portable metaobject 
classes. To make it possible for portable metaobject classes to properly process 
the information appearing in the macro form, this document provides a limited 
specification of the processing of these macro forms.</P>
<P>User interface macro forms can be <SPAN 
class=emphasis><EM>evaluated</EM></SPAN> or <SPAN 
class=emphasis><EM>compiled</EM></SPAN> and later <SPAN 
class=emphasis><EM>executed</EM></SPAN>. The effect of evaluating or executing a 
user interface macro form is specified in terms of calls to specified functions 
and generic functions which provide the actual behavior of the macro. The 
arguments received by these functions and generic functions are derived in a 
specified way from the macro form.</P>
<P>Converting a user interface macro form into the arguments to the appropriate 
functions and generic functions has two major aspects: the conversion of the 
macro argument syntax into a form more suitable for later processing, and the 
processing of macro arguments which are forms to be evaluated (including method 
bodies).</P>
<P>In the syntax of the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> macro, the <EM 
class=replaceable><CODE>initform</CODE></EM> and <EM 
class=replaceable><CODE>default-initarg-initial-value-form</CODE></EM> arguments 
are forms which will be evaluated one or more times after the macro form is 
evaluated or executed. Special processing must be done on these arguments to 
ensure that the lexical scope of the forms is captured properly. This is done by 
building a function of zero arguments which, when called, returns the result of 
evaluating the form in the proper <A 
href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" target=_top>lexical 
environment</A>.</P>
<P>In the syntax of the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> macro the <EM 
class=replaceable><CODE>forms</CODE></EM> argument is a list of forms that 
comprise the body of the method definition. This list of forms must be processed 
specially to capture the lexical scope of the macro form. In addition, the 
lexical functions available only in the body of methods must be introduced. To 
allow this and any other special processing (such as slot access optimization), 
a specializable protocol is used for processing the body of methods. This is 
discussed in <A title="29.1.6.3.1.1.&nbsp;Processing Method Bodies" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-body">Section&nbsp;29.1.6.3.1.1, 
“Processing Method Bodies”</A>.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-compile-ui-macro></A>29.1.2.3.1.&nbsp;Compile-file 
Processing of the User Interface Macros</H5></DIV></DIV></DIV>
<P>It is a common practice for <A href="http://www.lisp.org/" 
target=_top><SPAN><STRONG class=command>Common Lisp</STRONG></SPAN></A> 
compilers, while processing a file or set of files, to maintain information 
about the definitions that have been compiled so far. Among other things, this 
makes it possible to ensure that a global macro definition (<A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmacro.html" target=_top><CODE 
class=function>DEFMACRO</CODE></A> form) which appears in a file will affect 
uses of the macro later in that file. This information about the state of the 
compilation is called the <STRONG class=first><EM class=firstterm><A 
href="http://www.lisp.org/HyperSpec/Body/fun_compile-file.html" 
target=_top><CODE class=function>COMPILE-FILE</CODE></A> 
environment</EM></STRONG>.</P>
<P>When compiling files containing <A 
href="http://www.lisp.org/HyperSpec/Body/chap-7.html" target=_top><SPAN><STRONG 
class=command>CLOS</STRONG></SPAN></A> definitions, it is useful to maintain 
certain additional information in the <A 
href="http://www.lisp.org/HyperSpec/Body/fun_compile-file.html" 
target=_top><CODE class=function>COMPILE-FILE</CODE></A> environment. This can 
make it possible to issue various kinds of warnings (e.g., <A 
title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> congruence) 
and to do various performance optimizations that would not otherwise be 
possible.</P>
<P>At this time, there is such significant variance in the way existing <A 
href="http://www.lisp.org/" target=_top><SPAN><STRONG class=command>Common 
Lisp</STRONG></SPAN></A> implementations handle <A 
href="http://www.lisp.org/HyperSpec/Body/fun_compile-file.html" 
target=_top><CODE class=function>COMPILE-FILE</CODE></A> environments that it 
would be premature to specify this mechanism. Consequently, this document 
specifies only the behavior of evaluating or executing user interface macro 
forms. What functions and generic functions are called during <A 
href="http://www.lisp.org/HyperSpec/Body/fun_compile-file.html" 
target=_top><CODE class=function>COMPILE-FILE</CODE></A> processing of a user 
interface macro form is not specified. Implementations are free to define and 
document their own behavior. Users may need to check implementation-specific 
behavior before attempting to compile certain portable programs.</P></DIV><!--mop-compile-ui-macro-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-ov-ui-others></A>29.1.2.3.2.&nbsp;Compile-file 
Processing of Specific User Interface Macros</H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term><A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A></SPAN>
  <DD>
  <P><A title="29.1.3.1.&nbsp;Macro DEFCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-defclass">Section&nbsp;29.1.3.1, 
  “Macro <CODE class=function>DEFCLASS</CODE>”</A></P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P><A href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></A> evaluates <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> forms also at <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_c.html#compile_time" 
  target=_top>compile time</A>.</P></DIV>
  <DT><SPAN class=term><A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A></SPAN>
  <DD>
  <P><A title="29.1.6.3.1.&nbsp;Macro DEFMETHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod">Section&nbsp;29.1.6.3.1, 
  “Macro <CODE class=function>DEFMETHOD</CODE>”</A></P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P><A href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></A> does <SPAN 
  class=strong><STRONG>not</STRONG></SPAN> evaluate <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> forms at <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_c.html#compile_time" 
  target=_top>compile time</A> except as necessary for signature checking. 
  </P></DIV>
  <DT><SPAN class=term><A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A></SPAN>
  <DD>
  <P><A title="29.1.5.3.1.&nbsp;Macro DEFGENERIC" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-defgeneric">Section&nbsp;29.1.5.3.1, 
  “Macro <CODE class=function>DEFGENERIC</CODE>”</A></P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P><A href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></A> does <SPAN 
  class=strong><STRONG>not</STRONG></SPAN> evaluate <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> forms at <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_c.html#compile_time" 
  target=_top>compile time</A> except as necessary for signature checking. 
  </P></DIV></DD></DL></DIV></DIV><!--mop-ov-ui-others--></DIV><!--mop-ui-macro-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-ov-mo-init></A>29.1.2.4.&nbsp;Metaobject 
Initialization Protocol</H4></DIV></DIV></DIV>
<P>Like other objects, metaobjects can be created by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The initialization 
arguments passed to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> are used to initialize 
the metaobject in the usual way. The set of legal initialization arguments, and 
their interpretation, depends on the kind of metaobject being created. 
Implementations and portable programs are free to extend the set of legal 
initialization arguments. Detailed information about the initialization of each 
kind of metaobject are provided in the appropriate sections:</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI><A title="29.1.3.5.1.&nbsp;Initialization of class metaobjects" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">Section&nbsp;29.1.3.5.1, 
  “Initialization of class metaobjects”</A>
  <LI><A title="29.1.3.5.2.&nbsp;Reinitialization of class metaobjects" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-reinit-mo">Section&nbsp;29.1.3.5.2, 
  “Reinitialization of class metaobjects”</A>
  <LI><A title="29.1.5.3.3.&nbsp;Initialization of generic function metaobjects" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-mo">Section&nbsp;29.1.5.3.3, 
  “Initialization of generic function metaobjects”</A>
  <LI><A title="29.1.3.4.&nbsp;Class Finalization Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-finalization">Section&nbsp;29.1.3.4, 
  “Class Finalization Protocol”</A>
  <LI><A title="29.1.10.1.&nbsp;Instance Structure Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-instance-stuct">Section&nbsp;29.1.10.1, 
  “Instance Structure Protocol”</A>
  <LI><A title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable">Section&nbsp;29.1.10.2, 
  “Funcallable Instances”</A>
  <LI><A title="29.1.5.3.2.&nbsp;Generic Function Invocation Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-invocation">Section&nbsp;29.1.5.3.2, 
  “Generic Function Invocation Protocol”</A>
  <LI><A title="29.1.11.&nbsp;Dependent Maintenance" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint">Section&nbsp;29.1.11, 
  “Dependent Maintenance”</A></LI></UL></DIV></DIV><!--mop-ov-mo-init--></DIV><!--mop-overview-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=mop-classes></A>29.1.3.&nbsp;Classes</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-defclass">29.1.3.1. 
  Macro <CODE class=function>DEFCLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-Inheritance">29.1.3.2. 
  Inheritance Structure of class metaobject Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers">29.1.3.3. 
  Introspection: Readers for class metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-name">29.1.3.3.1. 
    Generic Function <CODE class=function>CLASS-NAME</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses">29.1.3.3.2. 
    Generic Function <CODE 
    class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots">29.1.3.3.3. 
    Generic Function <CODE 
    class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs">29.1.3.3.4. 
    Generic Function <CODE 
    class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#cpl">29.1.3.3.5. Generic 
    Function <CODE class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses">29.1.3.3.6. 
    Generic Function <CODE 
    class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots">29.1.3.3.7. 
    Generic Function <CODE class=function>CLOS:CLASS-SLOTS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs">29.1.3.3.8. 
    Generic Function <CODE 
    class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p">29.1.3.3.9. 
    Generic Function <CODE 
    class=function>CLOS:CLASS-FINALIZED-P</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype">29.1.3.3.10. 
    Generic Function <CODE class=function>CLOS:CLASS-PROTOTYPE</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers-methods">29.1.3.3.11. 
    Methods</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-finalization">29.1.3.4. 
  Class Finalization Protocol</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init">29.1.3.5. 
  Class Initialization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">29.1.3.5.1. 
    Initialization of class metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-mo-init-methods">29.1.3.5.1.1. 
      Methods</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-anon">29.1.3.5.1.2. 
      Initialization of Anonymous Classes</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-reinit-mo">29.1.3.5.2. 
    Reinitialization of class metaobjects</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-customize">29.1.3.6. 
  Customization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#setf-class-name">29.1.3.6.1. 
    Generic Function <CODE class=code>(SETF CLASS-NAME)</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class">29.1.3.6.2. 
    Generic Function <CODE class=function>CLOS:ENSURE-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC">29.1.3.6.3. 
    Generic Function <CODE 
    class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance">29.1.3.6.4. 
    Generic Function <CODE 
    class=function>CLOS:FINALIZE-INHERITANCE</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-make-instance">29.1.3.6.5. 
    Generic Function <CODE class=function>MAKE-INSTANCE</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#alloc-instance">29.1.3.6.6. 
    Generic Function <CODE class=function>ALLOCATE-INSTANCE</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass">29.1.3.6.7. 
    Generic Function <CODE 
    class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs">29.1.3.6.8. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class">29.1.3.6.9. 
    Generic Function <CODE 
    class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl">29.1.3.6.10. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots">29.1.3.6.11. 
    Generic Function <CODE class=function>CLOS:COMPUTE-SLOTS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd">29.1.3.6.12. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs">29.1.3.6.13. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class">29.1.3.6.14. 
    Generic Function <CODE 
    class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs">29.1.3.6.15. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-dep">29.1.3.7. 
  Updating Dependencies</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass">29.1.3.7.1. 
    Generic Function <CODE 
    class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass">29.1.3.7.2. 
    Generic Function <CODE 
    class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-cl-defclass></A>29.1.3.1.&nbsp;Macro <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A></H4></DIV></DIV></DIV>
<P>The evaluation or execution of a <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> form results in a call to the <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A> function. The arguments received by 
<A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A> are derived from the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> form in a defined way. The exact 
macro-expansion of the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> form is not defined, only the relationship 
between the arguments to the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> macro and the arguments received by the <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A> function. Examples of typical <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> forms and sample expansions are shown in the 
following two examples: </P>
<DIV class=informalexample>
<P>A <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
target=_top><CODE class=function>DEFCLASS</CODE></A> form with standard slot and 
class options and an expansion of it that would result in the proper call to <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A>.</P><PRE class=programlisting>(defclass plane (moving-object graphics-object)
  ((altitude :initform 0 :accessor plane-altitude)
   (speed))
  (:default-initargs :engine *jet*))

(ensure-class 'plane
  ':direct-superclasses '(moving-object graphics-object)
  ':direct-slots (list (list ':name 'altitude
                             ':initform '0
                             ':initfunction #'(lambda () 0)
                             ':readers '(plane-altitude)
                             ':writers '((setf plane-altitude)))
                       (list ':name 'speed))
  ':direct-default-initargs (list (list ':engine
                                        '*jet*
                                        #'(lambda () *jet*))))
</PRE></DIV>
<P></P>
<DIV class=informalexample>
<P>A <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
target=_top><CODE class=function>DEFCLASS</CODE></A> form with non-standard 
class and slot options, and an expansion of it which results in the proper call 
to <A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A>. Note that the order of the slot 
options has not affected the order of the properties in the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
slot specification</A>, but has affected the order of the elements in the lists 
which are the values of those properties.</P><PRE class=programlisting>(defclass sst (plane)
  ((mach mag-step 2
         locator sst-mach
         locator mach-location
         :reader mach-speed
         :reader mach))
  (:metaclass faster-class)
  (another-option foo bar))

(ensure-class 'sst
  ':direct-superclasses '(plane)
  ':direct-slots (list (list ':name 'mach
                             ':readers '(mach-speed mach)
                             'mag-step '2
                             'locator '(sst-mach mach-location)))
  ':metaclass 'faster-class
  'another-option '(foo bar))
</PRE></DIV>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The <EM class=replaceable><CODE>name</CODE></EM> argument to <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> becomes the value of the first argument to 
  <A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>. This is the only positional 
  argument accepted by <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>; all other arguments are keyword 
  arguments.
  <LI>The <CODE class=constant>:DIRECT-SUPERCLASSES</CODE> argument to <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> becomes the value of the <CODE 
  class=constant>:DIRECT-SUPERCLASSES</CODE> keyword argument to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.
  <LI>
  <P>The <CODE class=constant>:DIRECT-SLOTS</CODE> argument to <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> becomes the value of the <CODE 
  class=constant>:DIRECT-SLOTS</CODE> keyword argument to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>. Special processing of this value 
  is done to regularize the form of each slot specification and to properly 
  capture the lexical scope of the initialization forms. This is done by 
  converting each slot specification to a property list called a <STRONG 
  class=first><EM class=firstterm>canonicalized slot 
  specification</EM></STRONG>. The resulting list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A>s is the value of the <CODE 
  class=constant>:DIRECT-SLOTS</CODE> keyword argument.</P>
  <P><A id=mop-canonicalized-slot-spec></A>Canonicalized slot specifications are 
  later used as the keyword arguments to a generic function which will, in turn, 
  pass them to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> for use as a set of 
  initialization arguments. Each <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A> is formed from the corresponding slot specification as 
  follows: </P>
  <DIV class=itemizedlist>
  <UL type=circle>
    <LI>The name of the slot is the value of the <CODE 
    class=constant>:NAME</CODE> property. This property appears in every <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
    slot specification</A>.
    <LI>When the <CODE class=constant>:INITFORM</CODE> slot option is present in 
    the slot specification, then both the <CODE class=constant>:INITFORM</CODE> 
    and <CODE class=constant>:INITFUNCTION</CODE> properties are present in the 
    <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
    slot specification</A>. The value of the <CODE 
    class=constant>:INITFORM</CODE> property is the initialization form. The 
    value of the <CODE class=constant>:INITFUNCTION</CODE> property is a 
    function of zero arguments which, when called, returns the result of 
    evaluating the initialization form in its proper <A 
    href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" 
    target=_top>lexical environment</A>. 
    <LI>If the <CODE class=constant>:INITFORM</CODE> slot option is not present 
    in the slot specification, then either the <CODE 
    class=constant>:INITFUNCTION</CODE> property will not appear, or its value 
    will be false. In such cases, the value of the <CODE 
    class=constant>:INITFORM</CODE> property, or whether it appears, is 
    unspecified.
    <LI>The value of the <CODE class=constant>:INITARGS</CODE> property is a 
    list of the values of each <CODE class=constant>:INITARG</CODE> slot option. 
    If there are no <CODE class=constant>:INITARG</CODE> slot options, then 
    either the <CODE class=constant>:INITARGS</CODE> property will not appear or 
    its value will be the empty list. 
    <LI>The value of the <CODE class=constant>:READERS</CODE> property is a list 
    of the values of each <CODE class=constant>:READER</CODE> and <CODE 
    class=constant>:ACCESSOR</CODE> slot option. If there are no <CODE 
    class=constant>:READER</CODE> or <CODE class=constant>:ACCESSOR</CODE> slot 
    options, then either the <CODE class=constant>:READERS</CODE> property will 
    not appear or its value will be the empty list.
    <LI>The value of the <CODE class=constant>:WRITERS</CODE> property is a list 
    of the values specified by each <CODE class=constant>:WRITER</CODE> and 
    <CODE class=constant>:ACCESSOR</CODE> slot option. The value specified by a 
    <CODE class=constant>:WRITER</CODE> slot option is just the value of the 
    slot option. The value specified by an <CODE class=constant>:ACCESSOR</CODE> 
    slot option is a two element list: the first element is the symbol <A 
    href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
    target=_top><CODE class=function>SETF</CODE></A>, the second element is the 
    value of the slot option. If there are no <CODE 
    class=constant>:WRITER</CODE> or <CODE class=constant>:ACCESSOR</CODE> slot 
    options, then either the <CODE class=constant>:WRITERS</CODE> property will 
    not appear or its value will be the empty list.
    <LI>The value of the <CODE class=constant>:DOCUMENTATION</CODE> property is 
    the value of the <CODE class=constant>:DOCUMENTATION</CODE> slot option. If 
    there is no <CODE class=constant>:DOCUMENTATION</CODE> slot option, then 
    either the <CODE class=constant>:DOCUMENTATION</CODE> property will not 
    appear or its value will be false. 
    <LI>All other slot options appear as the values of properties with the same 
    name as the slot option. Note that this includes not only the remaining 
    standard slot options (<CODE class=constant>:ALLOCATION</CODE> and <CODE 
    class=constant>:TYPE</CODE>), but also any other options and values 
    appearing in the slot specification. If one of these slot options appears 
    more than once, the value of the property will be a list of the specified 
    values.
    <LI>An implementation is free to add additional properties to the <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
    slot specification</A> provided these are not symbols accessible in the <A 
    href="http://www.lisp.org/HyperSpec/Body/sec_11-1-2-2.html" 
    target=_top><STRONG class=package>“<SPAN 
    class=quote>COMMON-LISP-USER</SPAN>”</STRONG></A> package, or exported by 
    any package defined in the [<A title="[ANSI CL]" 
    href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
    class=abbrev>ANSI CL</ABBR></A>].</LI></UL></DIV>
  <LI>
  <P>The <EM class=replaceable><CODE>default initargs</CODE></EM> class option, 
  if it is present in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form, becomes the value of the <CODE 
  class=constant>:DIRECT-DEFAULT-INITARGS</CODE> keyword argument to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>. Special processing of this value 
  is done to properly capture the lexical scope of the default value forms. This 
  is done by converting each default initarg in the class option into a <STRONG 
  class=first><EM class=firstterm>canonicalized default initialization 
  argument</EM></STRONG>. The resulting list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
  default initialization argument</A>s is the value of the <CODE 
  class=constant>:DIRECT-DEFAULT-INITARGS</CODE> keyword argument to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>. </P>
  <P><A id=mop-canonicalized-default-initarg></A>A canonicalized default initarg 
  is a list of three elements. The first element is the name; the second is the 
  actual form itself; and the third is a function of zero arguments which, when 
  called, returns the result of evaluating the default value form in its proper 
  <A href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" 
  target=_top>lexical environment</A>.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If a <EM class=replaceable><CODE>default initargs</CODE></EM> class option 
  is not present in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form, <CODE 
  class=constant>:DIRECT-DEFAULT-INITARGS</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> is passed to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.</P>
  <P>This is needed to fulfill the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] requirement (see <A 
  title="4.6.&nbsp;Redefining Classes&#10;  [CLHS-4.3.6]" 
  href="http://clisp.cons.org/impnotes/redef-class.html">Section&nbsp;4.6, 
  “Redefining Classes [CLHS-4.3.6]”</A>) that the resulting <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A> object reflects the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form.</P></DIV>
  <LI>
  <P>The <EM class=replaceable><CODE>metaclass</CODE></EM> class option, if it 
  is present in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form, becomes the value of the <CODE 
  class=constant>:METACLASS</CODE> keyword argument to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If a <EM class=replaceable><CODE>metaclass</CODE></EM> class option is not 
  present in the <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
  target=_top><CODE class=function>DEFCLASS</CODE></A> form, <CODE 
  class=constant>:METACLASS</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> is passed to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.</P>
  <P>This is needed to fulfill the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] requirement (see <A 
  title="4.6.&nbsp;Redefining Classes&#10;  [CLHS-4.3.6]" 
  href="http://clisp.cons.org/impnotes/redef-class.html">Section&nbsp;4.6, 
  “Redefining Classes [CLHS-4.3.6]”</A>) that the resulting <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A> object reflects the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form.</P></DIV>
  <LI>
  <P>The <EM class=replaceable><CODE>documentation</CODE></EM> class option, if 
  it is present in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form, becomes the value of the <CODE 
  class=constant>:DOCUMENTATION</CODE> keyword argument to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If a <EM class=replaceable><CODE>documentation</CODE></EM> class option is 
  not present in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form, <CODE 
  class=constant>:DIRECT-DEFAULT-INITARGS</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> is passed to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.</P>
  <P>This is needed to fulfill the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] requirement (see <A 
  title="4.6.&nbsp;Redefining Classes&#10;  [CLHS-4.3.6]" 
  href="http://clisp.cons.org/impnotes/redef-class.html">Section&nbsp;4.6, 
  “Redefining Classes [CLHS-4.3.6]”</A>) that the resulting <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A> object reflects the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form.</P></DIV>
  <LI>
  <P>Any other class options become the value of keyword arguments with the same 
  name. The value of the keyword argument is the tail of the class option. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if any class option appears more than once 
  in the <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
  target=_top><CODE class=function>DEFCLASS</CODE></A> form.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>The default initargs of the <EM 
  class=replaceable><CODE>metaclass</CODE></EM> are added at the end of the list 
  of arguments to pass to <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>.</P>
  <P>This is needed to fulfill the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] requirement (see <A 
  title="4.6.&nbsp;Redefining Classes&#10;  [CLHS-4.3.6]" 
  href="http://clisp.cons.org/impnotes/redef-class.html">Section&nbsp;4.6, 
  “Redefining Classes [CLHS-4.3.6]”</A>) that the resulting <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A> object reflects the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> form.</P></DIV></LI></UL></DIV>
<P>In the call to <A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A>, every element of its arguments 
appears in the same left-to-right order as the corresponding element of the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> form, except that the order of the properties 
of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
slot specification</A>s is unspecified. The values of properties in <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
slot specification</A>s do follow this ordering requirement. Other ordering 
relationships in the keyword arguments to <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A> are unspecified.</P>
<P>The result of the call to <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A> is returned as the result of 
evaluating or executing the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> form.</P></DIV><!--mop-cl-defclass-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-cl-Inheritance></A>29.1.3.2.&nbsp;Inheritance 
Structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> Classes</H4></DIV></DIV></DIV>
<DIV class=figure><A id=mop-cl-Inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.2.&nbsp;Inheritance structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG alt="Inheritance structure of class metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-class.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR 
class=figure-break></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-cl-readers></A>29.1.3.3.&nbsp;Introspection: Readers 
for <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-name">29.1.3.3.1. 
  Generic Function <CODE class=function>CLASS-NAME</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses">29.1.3.3.2. 
  Generic Function <CODE 
  class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots">29.1.3.3.3. 
  Generic Function <CODE 
class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs">29.1.3.3.4. 
  Generic Function <CODE 
  class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#cpl">29.1.3.3.5. Generic 
  Function <CODE class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses">29.1.3.3.6. 
  Generic Function <CODE 
  class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots">29.1.3.3.7. 
  Generic Function <CODE class=function>CLOS:CLASS-SLOTS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs">29.1.3.3.8. 
  Generic Function <CODE 
  class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p">29.1.3.3.9. 
  Generic Function <CODE class=function>CLOS:CLASS-FINALIZED-P</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype">29.1.3.3.10. 
  Generic Function <CODE class=function>CLOS:CLASS-PROTOTYPE</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers-methods">29.1.3.3.11. 
  Methods</A></SPAN></DT></DL></DIV>
<P>In this and the following sections, the “<SPAN class=quote>reader</SPAN>” 
generic functions which simply return information associated with a particular 
kind of metaobject are presented together. General information is presented 
first, followed by a description of the purpose of each, and ending with the 
specified methods for these generic functions.</P>
<P>The reader generic functions which simply return information associated with 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s are presented together in this section.</P>
<P>Each of the reader generic functions for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s has the same syntax, accepting one required argument called <EM 
class=replaceable><CODE>class</CODE></EM>, which must be a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>; otherwise, an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed. An <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is also <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> has not been initialized.</P>
<P>These generic functions can be called by the user or the implementation.</P>
<P>For any of these generic functions which returns a list, such lists will not 
be mutated by the implementation. The results are undefined if a portable 
program allows such a list to be mutated.</P><!--begin class basic introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-name></A>29.1.3.3.1.&nbsp;Generic Function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_class-name.html" 
target=_top><CODE class=function>CLASS-NAME</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_class-name.html" 
target=_top><CODE class=function>CLASS-NAME</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the name of <EM class=replaceable><CODE>class</CODE></EM>. This value 
can be any Lisp object, but is usually a symbol, or <A 
href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A> if the class has no name. This is the defaulted 
value of the <CODE class=constant>:NAME</CODE> initialization argument that was 
associated with the class during initialization or reinitialization. (Also see 
<A title="29.1.3.6.1.&nbsp;Generic Function (SETF CLASS-NAME)" 
href="http://clisp.cons.org/impnotes/mop-chap.html#setf-class-name"><CODE 
class=code>(SETF CLASS-NAME)</CODE></A>.) </P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-direct-superclasses></A>29.1.3.3.2.&nbsp;Generic 
Function <A 
title="29.1.3.3.2.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUPERCLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses"><CODE 
class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.2.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUPERCLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses"><CODE 
class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a list of the direct superclasses of <EM 
class=replaceable><CODE>class</CODE></EM>. The elements of this list are <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s. The empty list is returned if <EM 
class=replaceable><CODE>class</CODE></EM> has no direct superclasses. This is 
the defaulted value of the <CODE class=constant>:DIRECT-SUPERCLASSES</CODE> 
initialization argument that was associated with the class during initialization 
or reinitialization.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>For a class that has not yet been finalized, the returned list may contain <A 
title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> instances as 
placeholder for classes that were not yet defined when finalization of the class 
was last attempted.</P></DIV></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-direct-slots></A>29.1.3.3.3.&nbsp;Generic Function 
<A title="29.1.3.3.3.&nbsp;Generic Function CLOS:CLASS-DIRECT-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots"><CODE 
class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.3.&nbsp;Generic Function CLOS:CLASS-DIRECT-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots"><CODE 
class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a set of the direct slots of <EM 
class=replaceable><CODE>class</CODE></EM>. The elements of this set are <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s. If the class has no direct slots, the empty set is 
returned. This is the defaulted value of the <CODE 
class=constant>:DIRECT-SLOTS</CODE> initialization argument that was associated 
with the class during initialization and reinitialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-direct-default-initargs></A>29.1.3.3.4.&nbsp;Generic 
Function <A 
title="29.1.3.3.4.&nbsp;Generic Function CLOS:CLASS-DIRECT-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs"><CODE 
class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.4.&nbsp;Generic Function CLOS:CLASS-DIRECT-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs"><CODE 
class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a list of the direct default initialization arguments for <EM 
class=replaceable><CODE>class</CODE></EM>. Each element of this list is a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
default initialization argument</A>. The empty list is returned if <EM 
class=replaceable><CODE>class</CODE></EM> has no direct default initialization 
arguments. This is the defaulted value of the <CODE 
class=constant>:DIRECT-DEFAULT-INITARGS</CODE> initialization argument that was 
associated with the class during initialization or reinitialization. </P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=cpl></A>29.1.3.3.5.&nbsp;Generic Function <A 
title="29.1.3.3.5.&nbsp;Generic Function CLOS:CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#cpl"><CODE 
class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.5.&nbsp;Generic Function CLOS:CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#cpl"><CODE 
class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the class precedence list of <EM 
class=replaceable><CODE>class</CODE></EM>. The elements of this list are <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s.</P>
<P>During class finalization <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> calls <A 
title="29.1.3.6.10.&nbsp;Generic Function CLOS:COMPUTE-CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl"><CODE 
class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A> to compute the 
class precedence list of the class. That value is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and is returned by <A 
title="29.1.3.3.5.&nbsp;Generic Function CLOS:CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#cpl"><CODE 
class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A>.</P>
<P>This generic function <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> if <EM 
class=replaceable><CODE>class</CODE></EM> has not been finalized. </P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-direct-subclasses></A>29.1.3.3.6.&nbsp;Generic 
Function <A 
title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a set of the direct subclasses of <EM 
class=replaceable><CODE>class</CODE></EM>. The elements of this set are <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s that all mention this class among their direct superclasses. The 
empty set is returned if <EM class=replaceable><CODE>class</CODE></EM> has no 
direct subclasses. This value is maintained by the generic functions <A 
title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A> and <A 
title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A>.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The set of direct subclasses of a class is internally managed as a <A 
title="30.7.2.&nbsp;Weak Lists" 
href="http://clisp.cons.org/impnotes/weak.html#weak-list"><CODE 
class=classname>EXT:WEAK-LIST</CODE></A>. Therefore the existence of the <A 
title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A> function does not prevent 
otherwise unreferenced classes from being <A class=olink 
href="http://clisp.cons.org/impnotes/gc.html">garbage-collect</A>ed.</P></DIV></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-slots></A>29.1.3.3.7.&nbsp;Generic Function <A 
title="29.1.3.3.7.&nbsp;Generic Function CLOS:CLASS-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots"><CODE 
class=function>CLOS:CLASS-SLOTS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.7.&nbsp;Generic Function CLOS:CLASS-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots"><CODE 
class=function>CLOS:CLASS-SLOTS</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a possibly empty set of the slots accessible in instances of <EM 
class=replaceable><CODE>class</CODE></EM>. The elements of this set are <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s.</P>
<P>During class finalization <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> calls <A 
title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A> to compute the slots of the class. 
That value is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and is returned by <A 
title="29.1.3.3.7.&nbsp;Generic Function CLOS:CLASS-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots"><CODE 
class=function>CLOS:CLASS-SLOTS</CODE></A>.</P>
<P>This generic function <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> if <EM 
class=replaceable><CODE>class</CODE></EM> has not been finalized. </P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-default-initargs></A>29.1.3.3.8.&nbsp;Generic 
Function <A 
title="29.1.3.3.8.&nbsp;Generic Function CLOS:CLASS-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs"><CODE 
class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.8.&nbsp;Generic Function CLOS:CLASS-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs"><CODE 
class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a list of the default initialization arguments for <EM 
class=replaceable><CODE>class</CODE></EM>. Each element of this list is a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
default initialization argument</A>. The empty list is returned if <EM 
class=replaceable><CODE>class</CODE></EM> has no default initialization 
arguments.</P>
<P>During finalization <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> calls <A 
title="29.1.3.6.15.&nbsp;Generic Function CLOS:COMPUTE-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs"><CODE 
class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A> to compute the default 
initialization arguments for the class. That value is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and is returned by <A 
title="29.1.3.3.8.&nbsp;Generic Function CLOS:CLASS-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs"><CODE 
class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A>.</P>
<P>This generic function <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> if <EM 
class=replaceable><CODE>class</CODE></EM> has not been finalized.</P></DIV><!--end class basic introspection--><!--begin class advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-finalized-p></A>29.1.3.3.9.&nbsp;Generic Function <A 
title="29.1.3.3.9.&nbsp;Generic Function CLOS:CLASS-FINALIZED-P" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p"><CODE 
class=function>CLOS:CLASS-FINALIZED-P</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.9.&nbsp;Generic Function CLOS:CLASS-FINALIZED-P" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p"><CODE 
class=function>CLOS:CLASS-FINALIZED-P</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns true if <EM class=replaceable><CODE>class</CODE></EM> has been 
finalized. Returns false otherwise. Also returns false if the <EM 
class=replaceable><CODE>class</CODE></EM> has not been initialized. </P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=class-prototype></A>29.1.3.3.10.&nbsp;Generic Function <A 
title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE 
class=function>CLOS:CLASS-PROTOTYPE</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE 
class=function>CLOS:CLASS-PROTOTYPE</CODE></A> <EM 
class=replaceable><CODE>class</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a prototype instance of <EM 
class=replaceable><CODE>class</CODE></EM>. Whether the instance is initialized 
is not specified. The results are undefined if a portable program modifies the 
binding of any slot of a prototype instance. </P>
<P>This generic function <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> if <EM 
class=replaceable><CODE>class</CODE></EM> has not been finalized. </P>
<DIV class=informalexample>
<P>This allows non-<A href="http://www.lisp.org/HyperSpec/Body/glo_c.html#cons" 
target=_top>consing[3]</A> access to slots with allocation <CODE 
class=constant>:CLASS</CODE>:</P><PRE class=programlisting>(defclass counter ()
  ((count :allocation :class :initform 0 :reader how-many)))
(defmethod initialize-instance :after ((obj counter) &amp;rest args)
  (incf (slot-value obj 'count)))
(defclass counted-object (counter) ((name :initarg :name)))
 </PRE>
<P>Now one can find out how many <CODE class=classname>COUNTED-OBJECT</CODE>s 
have been created by using <CODE class=code>(HOW-MANY (<A 
title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE 
class=function>CLOS:CLASS-PROTOTYPE</CODE></A> (<A 
href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE 
class=function>FIND-CLASS</CODE></A> 'COUNTER)))</CODE>: </P><PRE class=programlisting>(<A href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> 'counted-object :name 'foo)
⇒&nbsp;<CODE class=computeroutput>#&lt;COUNTED-OBJECT #x203028C9&gt;</CODE>
(HOW-MANY (<A title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE class=function>CLOS:CLASS-PROTOTYPE</CODE></A> (<A href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE class=function>FIND-CLASS</CODE></A> 'counter)))
⇒&nbsp;<CODE class=computeroutput>1</CODE>
(<A href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> 'counted-object :name 'bar)
⇒&nbsp;<CODE class=computeroutput>#&lt;COUNTED-OBJECT #x20306CB1&gt;</CODE>
(HOW-MANY (<A title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE class=function>CLOS:CLASS-PROTOTYPE</CODE></A> (<A href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE class=function>FIND-CLASS</CODE></A> 'counter)))
⇒&nbsp;<CODE class=computeroutput>2</CODE>
</PRE></DIV></DIV><!--end class advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=mop-cl-readers-methods></A>29.1.3.3.11.&nbsp;Methods</H5></DIV></DIV></DIV>
<P>The specified methods for the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> reader generic functions are presented below.</P>
<P>Each entry in the table indicates a method on one of the reader generic 
functions, specialized to a specified class. The number in each entry is a 
reference to the full description of the method. The full descriptions appear 
after the table.</P>
<DIV class=informaltable>
<TABLE border=1>
  <COLGROUP>
  <COL>
  <COL>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Generic Function</TH>
    <TH align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
      target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>, <A 
      title="29.1.10.2.&nbsp;Funcallable Instances" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
      class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A></TH>
    <TH align=middle><A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A></TH>
    <TH align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
      target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A></TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_class-name.html" 
      target=_top><CODE class=function>CLASS-NAME</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-1">1</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-1">1</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-8">8</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.2.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUPERCLASSES" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses"><CODE 
      class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-1">1</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-7">7</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.3.&nbsp;Generic Function CLOS:CLASS-DIRECT-SLOTS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots"><CODE 
      class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-1">1</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.4.&nbsp;Generic Function CLOS:CLASS-DIRECT-DEFAULT-INITARGS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs"><CODE 
      class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-1">1</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.5.&nbsp;Generic Function CLOS:CLASS-PRECEDENCE-LIST" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#cpl"><CODE 
      class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-2">2</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-3">3</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-7">7</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
      class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-9">9</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-9">9</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-7">7</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.7.&nbsp;Generic Function CLOS:CLASS-SLOTS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots"><CODE 
      class=function>CLOS:CLASS-SLOTS</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-2">2</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-3">3</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.8.&nbsp;Generic Function CLOS:CLASS-DEFAULT-INITARGS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs"><CODE 
      class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-2">2</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-3">3</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-4">4</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.9.&nbsp;Generic Function CLOS:CLASS-FINALIZED-P" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p"><CODE 
      class=function>CLOS:CLASS-FINALIZED-P</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-2">2</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-6">6</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-5">5</A></TD></TR>
  <TR>
    <TD align=middle><A 
      title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE 
      class=function>CLOS:CLASS-PROTOTYPE</CODE></A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-10">10</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-10">10</A></TD>
    <TD align=middle><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#CRM-10">10</A></TD></TR></TBODY></TABLE></DIV>
<DIV class=orderedlist>
<P class=title><B>Class Reader Methods</B></P>
<OL type=1>
  <LI><A id=CRM-1></A>This method returns the value which was associated with 
  the <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> during initialization or reinitialization.
  <LI><A id=CRM-2></A>This method returns the value associated with the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> by <SPAN class=method><CODE class=literal><A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> (<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>)</CODE></SPAN> or 
  <SPAN class=method><CODE class=literal><A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> (<A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>)</CODE></SPAN>
  <LI><A id=CRM-3></A>This method <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>.
  <LI><A id=CRM-4></A>This method returns the empty list. 
  <LI><A id=CRM-5></A>This method returns true.
  <LI><A id=CRM-6></A>This method returns false.
  <LI><A id=CRM-7></A>This method returns a value derived from the information 
  in <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships&#10;  Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct">Table&nbsp;29.1, 
  “Direct Superclass Relationships Among The Specified Metaobject Classes”</A>, 
  except that implementation-specific modifications are permitted as described 
  in <A title="29.1.2.2.1.&nbsp;Implementation and User Specialization" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-ov-impl-and-user-spec">Section&nbsp;29.1.2.2.1, 
  “Implementation and User Specialization”</A>.
  <LI><A id=CRM-8></A>This method returns the name of the built-in class.
  <LI><A id=CRM-9></A>This methods returns a value which is maintained by <SPAN 
  class=method><CODE class=literal><A 
  title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
  class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A>(<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN> and <SPAN class=method><CODE 
  class=literal><A 
  title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
  class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A> (<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN>. This method can be overridden 
  only if those methods are overridden as well.
  <LI><A id=CRM-10></A>No behavior is specified for this method beyond that 
  which is specified for the generic function.</LI></OL></DIV></DIV><!--mop-cl-readers-methods--></DIV><!--mop-cl-readers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-cl-finalization></A>29.1.3.4.&nbsp;Class Finalization 
Protocol</H4></DIV></DIV></DIV>
<P>Class <STRONG class=first><EM class=firstterm>finalization</EM></STRONG> is 
the process of computing the information a class inherits from its superclasses 
and preparing to actually allocate instances of the class. The class 
finalization process includes computing the class's class precedence list, the 
full set of slots accessible in instances of the class and the full set of 
default initialization arguments for the class. These values are associated with 
the <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and can be accessed by calling the appropriate reader. In 
addition, the class finalization process makes decisions about how instances of 
the class will be implemented.</P>
<P>To support forward-referenced superclasses, and to account for the fact that 
not all classes are actually instantiated, class finalization is not done as 
part of the initialization of the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>. Instead, finalization is done as a separate protocol, invoked by 
calling the generic function <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A>. The exact point at which <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> is called depends on the 
class of the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>; for <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> it is called 
sometime after all the classes superclasses are defined, but no later than when 
the first instance of the class is allocated (by <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A>).</P>
<P>The first step of class finalization is computing the class precedence list. 
Doing this first allows subsequent steps to access the class precedence list. 
This step is performed by calling the generic function <A 
title="29.1.3.6.10.&nbsp;Generic Function CLOS:COMPUTE-CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl"><CODE 
class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A>. The value returned 
from this call is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and can be accessed by calling the <A 
title="29.1.3.3.5.&nbsp;Generic Function CLOS:CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#cpl"><CODE 
class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A> generic function.</P>
<P>The second step is computing the full set of slots that will be accessible in 
instances of the class. This step is performed by calling the generic function 
<A title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A>. The result of this call is a list 
of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s. This value is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and can be accessed by calling the <A 
title="29.1.3.3.7.&nbsp;Generic Function CLOS:CLASS-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-slots"><CODE 
class=function>CLOS:CLASS-SLOTS</CODE></A> generic function.</P>
<P>The behavior of <A 
title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A> is itself layered, consisting of 
calls to <A 
title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> and <A 
title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A>.</P>
<P>The final step of class finalization is computing the full set of 
initialization arguments for the class. This is done by calling the generic 
function <A 
title="29.1.3.6.15.&nbsp;Generic Function CLOS:COMPUTE-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs"><CODE 
class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A>. The value returned by 
this generic function is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> and can be accessed by calling <A 
title="29.1.3.3.8.&nbsp;Generic Function CLOS:CLASS-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs"><CODE 
class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A>.</P>
<P>If the class was previously finalized, <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> may call <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_mak_ces-obsolete.html" 
target=_top><CODE class=function>MAKE-INSTANCES-OBSOLETE</CODE></A>. The 
circumstances under which this happens are described in the [<A 
title="[ANSI CL]" 
href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
class=abbrev>ANSI CL</ABBR></A>] section <A 
title="4.6.&nbsp;Redefining Classes&#10;  [CLHS-4.3.6]" 
href="http://clisp.cons.org/impnotes/redef-class.html">Section&nbsp;4.6, 
“Redefining Classes [CLHS-4.3.6]”</A>.</P>
<P>Forward-referenced classes, which provide a temporary definition for a class 
which has been referenced but not yet defined, can never be finalized. An <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> is called on a 
forward-referenced class.</P></DIV><!--mop-cl-finalization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-cl-init></A>29.1.3.5.&nbsp;Class 
Initialization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">29.1.3.5.1. 
  Initialization of class metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-mo-init-methods">29.1.3.5.1.1. 
    Methods</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-anon">29.1.3.5.1.2. 
    Initialization of Anonymous Classes</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-reinit-mo">29.1.3.5.2. 
  Reinitialization of class metaobjects</A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-cl-init-mo></A>29.1.3.5.1.&nbsp;Initialization of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-mo-init-methods">29.1.3.5.1.1. 
  Methods</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-anon">29.1.3.5.1.2. 
  Initialization of Anonymous Classes</A></SPAN></DT></DL></DIV>
<P>A <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> can be created by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The initialization 
arguments establish the definition of the class. A <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> can be redefined by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. Some classes 
of <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> do not support redefinition; in these cases, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A>.</P>
<P>Initialization of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> must be done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> and allowing it to 
call <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>. 
Reinitialization of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> must be done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. Portable 
programs must <SPAN class=strong><STRONG>not</STRONG></SPAN> </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> directly to 
  initialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A> directly to 
  initialize or reinitialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> to change the class 
  of any <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> or to turn a non-class object into a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>.</LI></UL></DIV>
<P>Since metaobject classes may not be redefined, no behavior is specified for 
the result of calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_efined-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-REDEFINED-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s. Since the class of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s may not be changed, no behavior is specified for the result of 
calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_ferent-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-DIFFERENT-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s.</P>
<P>During initialization or reinitialization, each initialization argument is 
checked for errors and then associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>. The value can then be accessed by calling the appropriate 
accessor as shown in <A 
title="Table&nbsp;29.2.&nbsp;Initialization arguments and&#10;   accessors for class metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-mo-initargs">Table&nbsp;29.2, 
“Initialization arguments and accessors for class metaobjects”</A>.</P>
<P>This section begins with a description of the error checking and processing 
of each initialization argument. This is followed by a table showing the generic 
functions that can be used to access the stored initialization arguments. 
Initialization behavior specific to the different specified <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes comes next. The section ends with a set of restrictions 
on portable methods affecting <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> initialization and reinitialization.</P>
<P>In these descriptions, the phrase “<SPAN class=quote>this argument defaults 
to <EM class=replaceable><CODE>value</CODE></EM></SPAN>” means that when that 
initialization argument is not supplied, initialization or reinitialization is 
performed as if <EM class=replaceable><CODE>value</CODE></EM> had been supplied. 
For some initialization arguments this could be done by the use of default 
initialization arguments, but whether it is done this way is not specified. 
Implementations are free to define default initialization arguments for 
specified <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes. Portable programs are free to define default 
initialization arguments for portable subclasses of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A>.</P>
<P>Unless there is a specific note to the contrary, then during 
reinitialization, if an initialization argument is not supplied, the previously 
stored value is left unchanged.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>
  <P>The <CODE class=constant>:DIRECT-DEFAULT-INITARGS</CODE> argument is a list 
  of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
  default initialization argument</A>s.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A>, or if any element of the list is not a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
  default initialization argument</A>.</P>
  <P>If the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is being initialized, this argument defaults to the empty 
  list.</P>
  <LI>
  <P>The <CODE class=constant>:DIRECT-SLOTS</CODE> argument is a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A>s.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A> or if any element of the list is not a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A>. </P>
  <P>After error checking, this value is converted to a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s before it is associated with the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. Conversion of each <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A> to a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> is a two-step process. First, the generic function 
  <A title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A> is called with the 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> and the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A> to determine the class of the new <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>; this permits both the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> and the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A> to control the resulting <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> class. Second, <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> is applied to the 
  direct <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> class and the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A>. This conversion could be implemented as shown in the 
  following code:</P><PRE class=programlisting>(<A href="http://www.lisp.org/HyperSpec/Body/mac_defun.html" target=_top><CODE class=function>DEFUN</CODE></A> convert-to-direct-slot-definition (class canonicalized-slot)
  (<A href="http://www.lisp.org/HyperSpec/Body/fun_apply.html" target=_top><CODE class=function>APPLY</CODE></A> #'<A href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>
         (<A href="http://www.lisp.org/HyperSpec/Body/fun_apply.html" target=_top><CODE class=function>APPLY</CODE></A> #'<A title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A>
                class canonicalized-slot)
         canonicalized-slot))
</PRE>
  <P>If the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is being initialized, this argument defaults to the empty 
  list.</P>
  <P>Once the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s have been created, the specified reader and writer 
  methods are created. The generic functions <A 
  title="29.1.7.2.1.&nbsp;Generic Function CLOS:READER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class"><CODE 
  class=function>CLOS:READER-METHOD-CLASS</CODE></A> and <A 
  title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
  class=function>CLOS:WRITER-METHOD-CLASS</CODE></A> are called to determine the 
  classes of the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s created.</P>
  <LI>
  <P>The <CODE class=constant>:DIRECT-SUPERCLASSES</CODE> argument is a list of 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>s. Classes which do not support multiple inheritance signal an 
  error if the list contains more than one element.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A> or if <A 
  title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
  class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A> applied to <EM 
  class=replaceable><CODE>class</CODE></EM> and any element of this list returns 
  false.</P>
  <P>When the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is being initialized, and this argument is either not supplied 
  or is the empty list, this argument defaults as follows: if the class is an 
  instance of <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> or one of its 
  subclasses the default value is a list of the class <A 
  href="http://www.lisp.org/HyperSpec/Body/cla_standard-object.html" 
  target=_top><CODE class=classname>STANDARD-OBJECT</CODE></A>; if the class is 
  an instance of <A title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> or one of its 
  subclasses the default value is a list of the class <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-OBJECT</CODE></A>.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If the class is an instance of <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_structure-class.html" 
  target=_top><CODE class=classname>STRUCTURE-CLASS</CODE></A> or one of its 
  subclasses the default value is a list of the class <A 
  href="http://www.lisp.org/HyperSpec/Body/cla_structure-object.html" 
  target=_top><CODE class=classname>STRUCTURE-OBJECT</CODE></A></P></DIV>
  <P>After any defaulting of the value, the generic function <A 
  title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
  class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A> is called once for each 
  element of the list. </P>
  <P>When the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is being reinitialized and this argument is supplied, the 
  generic function <A 
  title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
  class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A> is called once for each 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> in the previously stored value but not in the new value; the 
  generic function <A 
  title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
  class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A> is called once for each <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> in the new value but not in the previously stored value.</P>
  <LI>The <CODE class=constant>:DOCUMENTATION</CODE> argument is a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if it is not. This argument default to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> during initialization.
  <LI>
  <P>The <CODE class=constant>:NAME</CODE> argument is an object.</P>
  <P>If the class is being initialized, this argument defaults to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>.</P></LI></UL></DIV>
<P>After the processing and defaulting of initialization arguments described 
above, the value of each initialization argument is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>. These values can then be accessed by calling the corresponding 
generic function. The correspondences are as follows: </P>
<DIV class=table><A id=class-mo-initargs></A>
<P class=title><B>Table&nbsp;29.2.&nbsp;Initialization arguments and accessors 
for <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s</B></P>
<DIV class=table-contents>
<TABLE 
summary="Initialization arguments and&#10;   accessors for class metaobjects" 
border=1>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Initialization Argument</TH>
    <TH align=middle>Generic Function</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><CODE class=constant>:DIRECT-DEFAULT-INITARGS</CODE></TD>
    <TD align=middle><A 
      title="29.1.3.3.4.&nbsp;Generic Function CLOS:CLASS-DIRECT-DEFAULT-INITARGS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-default-initargs"><CODE 
      class=function>CLOS:CLASS-DIRECT-DEFAULT-INITARGS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DIRECT-SLOTS</CODE></TD>
    <TD align=middle><A 
      title="29.1.3.3.3.&nbsp;Generic Function CLOS:CLASS-DIRECT-SLOTS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-slots"><CODE 
      class=function>CLOS:CLASS-DIRECT-SLOTS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DIRECT-SUPERCLASSES</CODE></TD>
    <TD align=middle><A 
      title="29.1.3.3.2.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUPERCLASSES" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-superclasses"><CODE 
      class=function>CLOS:CLASS-DIRECT-SUPERCLASSES</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DOCUMENTATION</CODE></TD>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_doc_umentationcp.html" 
      target=_top><CODE class=function>DOCUMENTATION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:NAME</CODE></TD>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_class-name.html" 
      target=_top><CODE 
class=function>CLASS-NAME</CODE></A></TD></TR></TBODY></TABLE></DIV></DIV>
<P><BR class=table-break></P>
<P>Instances of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> support multiple 
inheritance and reinitialization. Instances of the class <A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> support multiple 
inheritance and reinitialization. For forward referenced classes, all of the 
initialization arguments default to <A 
href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A>.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>Instances of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_structure-class.html" 
target=_top><CODE class=classname>STRUCTURE-CLASS</CODE></A> do not support 
multiple inheritance and reinitialization. </P></DIV>
<P>Since built-in classes cannot be created or reinitialized by the user, an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> or <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> are called to 
initialize or reinitialize a derived instance of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=class-mo-init-methods></A>29.1.3.5.1.1.&nbsp;Methods</H6></DIV></DIV></DIV>
<P>It is not specified which methods provide the initialization and 
reinitialization behavior described above. Instead, the information needed to 
allow portable programs to specialize this behavior is presented as a set of 
restrictions on the methods a portable program can define. The model is that 
portable initialization methods have access to the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> when either all or none of the specified initialization has taken 
effect.</P>
<P>These restrictions govern the methods that a portable program can define on 
the generic functions <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>, and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A>. These 
restrictions apply only to methods on these generic functions for which the 
first specializer is a subclass of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
class=classname>CLASS</CODE></A>. Other portable methods on these generic 
functions are not affected by these restrictions.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>Portable programs must not define methods on <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A>.
  <LI>
  <P>For <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> and <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>: </P>
  <DIV class=itemizedlist>
  <UL type=circle>
    <LI>Portable programs must not define primary methods. 
    <LI>Portable programs may define around-methods, but these must be 
    extending, not overriding methods.
    <LI>Portable before-methods must assume that when they are run, none of the 
    initialization behavior described above has been completed.
    <LI>Portable after-methods must assume that when they are run, all of the 
    initialization behavior described above has been 
  completed.</LI></UL></DIV></LI></UL></DIV>
<P>The results are undefined if any of these restrictions are 
violated.</P></DIV><!--class-mo-init-methods-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=mop-cl-init-anon></A>29.1.3.5.1.2.&nbsp;Initialization of 
Anonymous Classes</H6></DIV></DIV></DIV>
<P><A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s created with <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> are usually <STRONG 
class=first><EM class=firstterm>anonymous</EM></STRONG>; that is, they have no 
<A href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_name" 
target=_top>proper name</A>. An anonymous <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> can be given a <A 
href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_name" 
target=_top>proper name</A> using <CODE class=code>(<A 
href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
target=_top><CODE class=function>SETF</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" target=_top><CODE 
class=function>FIND-CLASS</CODE></A>)</CODE> and <CODE class=code>(<A 
href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
target=_top><CODE class=function>SETF</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_class-name.html" 
target=_top><CODE class=function>CLASS-NAME</CODE></A>)</CODE>.</P>
<P>When a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> is created with <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>, it is initialized in 
the usual way. The initialization arguments passed to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> are use to establish 
the definition of the class. Each initialization argument is checked for errors 
and associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>. The initialization arguments correspond roughly to the arguments 
accepted by the <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
target=_top><CODE class=function>DEFCLASS</CODE></A> macro, and more closely to 
the arguments accepted by the <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A> function.</P>
<P>Some <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes allow their instances to be redefined. When permissible, 
this is done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. This is 
discussed in the <A 
title="29.1.3.5.2.&nbsp;Reinitialization of class metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-reinit-mo">next 
section</A>.</P>
<P>An example of creating an anonymous class directly using <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> follows:</P><PRE class=programlisting>(flet ((zero () 0)
       (propellor () *propellor*))
  (make-instance 'standard-class
    :name '(my-class foo)
    :direct-superclasses (list (find-class 'plane)
                               another-anonymous-class)
    :direct-slots `((:name x
                     :initform 0
                     :initfunction ,#'zero
                     :initargs (:x)
                     :readers (position-x)
                     :writers ((setf position-x)))
                    (:name y
                     :initform 0
                     :initfunction ,#'zero
                     :initargs (:y)
                     :readers (position-y)
                     :writers ((setf position-y))))
    :direct-default-initargs `((:engine *propellor* ,#'propellor))))
</PRE></DIV><!--mop-cl-init-anon--></DIV><!--mop-cl-init-mo-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-cl-reinit-mo></A>29.1.3.5.2.&nbsp;Reinitialization of 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>s</H5></DIV></DIV></DIV>
<P>Some <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes allow their instances to be reinitialized. This is done 
by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. The 
initialization arguments have the same interpretation as in class 
initialization.</P>
<P>If the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> was finalized before the call to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>, <A 
title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> will be called again once 
all the initialization arguments have been processed and associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A>. In addition, once finalization is complete, any dependents of 
the <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> will be updated by calling <A 
title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
class=function>CLOS:UPDATE-DEPENDENT</CODE></A>.</P></DIV><!--mop-cl-reinit-mo--></DIV><!--mop-cl-init-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-cl-customize></A>29.1.3.6.&nbsp;Customization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-class-name">29.1.3.6.1. 
  Generic Function <CODE class=code>(SETF CLASS-NAME)</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class">29.1.3.6.2. 
  Generic Function <CODE class=function>CLOS:ENSURE-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC">29.1.3.6.3. 
  Generic Function <CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance">29.1.3.6.4. 
  Generic Function <CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-make-instance">29.1.3.6.5. 
  Generic Function <CODE class=function>MAKE-INSTANCE</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#alloc-instance">29.1.3.6.6. 
  Generic Function <CODE class=function>ALLOCATE-INSTANCE</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass">29.1.3.6.7. 
  Generic Function <CODE 
  class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs">29.1.3.6.8. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class">29.1.3.6.9. 
  Generic Function <CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl">29.1.3.6.10. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots">29.1.3.6.11. 
  Generic Function <CODE class=function>CLOS:COMPUTE-SLOTS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd">29.1.3.6.12. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs">29.1.3.6.13. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class">29.1.3.6.14. 
  Generic Function <CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs">29.1.3.6.15. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A></SPAN></DT></DL></DIV><!--begin class basic customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=setf-class-name></A>29.1.3.6.1.&nbsp;Generic Function <A 
title="29.1.3.6.1.&nbsp;Generic Function (SETF CLASS-NAME)" 
href="http://clisp.cons.org/impnotes/mop-chap.html#setf-class-name"><CODE 
class=code>(SETF CLASS-NAME)</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.1.&nbsp;Generic Function (SETF CLASS-NAME)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-class-name"><CODE 
  class=code>(SETF CLASS-NAME)</CODE></A> <EM 
  class=replaceable><CODE>new-name</CODE></EM> <EM 
  class=replaceable><CODE>class</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>new-name</CODE></EM></SPAN>
    <DD>any Lisp object.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This function returns its <EM class=replaceable><CODE>new-name</CODE></EM> 
  argument. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function changes the name of <EM 
  class=replaceable><CODE>class</CODE></EM> to <EM 
  class=replaceable><CODE>new-name</CODE></EM>. This value is usually a symbol, 
  or <A href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" 
  target=_top><CODE class=constant>NIL</CODE></A> if the class has no name.</P>
  <P>This function works by calling <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> with <EM 
  class=replaceable><CODE>class</CODE></EM> as its first argument, the symbol 
  <CODE class=constant>:NAME</CODE> as its second argument and <EM 
  class=replaceable><CODE>new-name</CODE></EM> as its third argument. 
</P></DD></DL></DIV></DIV><!--setf-class-name-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=ensure-class></A>29.1.3.6.2.&nbsp;Generic Function <A 
title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
class=function>CLOS:ENSURE-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A> <EM 
  class=replaceable><CODE>name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>name</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/syscla_symbol.html" 
    target=_top><CODE class=classname>SYMBOL</CODE></A>.
    <DT><SPAN class=term>keyword arguments</SPAN>
    <DD>Some of the keyword arguments accepted by this function are actually 
    processed by <A 
    title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
    class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A>, others are 
    processed during initialization of the <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> (as described in <A 
    title="29.1.3.5.1.&nbsp;Initialization of class metaobjects" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">Section&nbsp;29.1.3.5.1, 
    “Initialization of class metaobjects”</A>). </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function is called to define or redefine a class with the specified 
  name, and can be called by the user or the implementation. It is the 
  functional equivalent of <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A>, and is called by the expansion of the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
  class=function>DEFCLASS</CODE></A> macro.</P>
  <P>The behavior of this function is actually implemented by the generic 
  function <A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A>. When <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A> is called, it immediately calls <A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> and returns that 
  result as its own.</P>
  <P>The first argument to <A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> is computed as 
  follows:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI>If <EM class=replaceable><CODE>name</CODE></EM> names a class (<A 
    href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" 
    target=_top><CODE class=function>FIND-CLASS</CODE></A> returns a class when 
    called with <EM class=replaceable><CODE>name</CODE></EM>) use that class.
    <LI>Otherwise use <A 
    href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
    class=constant>NIL</CODE></A>.</LI></UL></DIV>
  <P>The second argument is <EM class=replaceable><CODE>name</CODE></EM>. The 
  remaining arguments are the complete set of keyword arguments received by the 
  <A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A> function.</P></DD></DL></DIV></DIV><!--ensure-class-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=ensure-class-UC></A>29.1.3.6.3.&nbsp;Generic Function <A 
title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE 
  class=constant>:DIRECT-DEFAULT-INITARGS</CODE> <CODE 
  class=constant>:DIRECT-SLOTS</CODE> <CODE 
  class=constant>:DIRECT-SUPERCLASSES</CODE> <CODE class=constant>:NAME</CODE> 
  <CODE class=constant>:METACLASS</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> or <A 
    href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
    class=constant>NIL</CODE></A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>name</CODE></EM></SPAN>
    <DD>a class name.
    <DT><SPAN class=term><CODE class=constant>:METACLASS</CODE></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> class or a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> class name. If this argument is not supplied, it defaults to 
    the class named <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>. If a class name 
    is supplied, it is interpreted as the class with that name. If a class name 
    is supplied, but there is no such class, an <A 
    href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
    target=_top><CODE class=classname>ERROR</CODE></A> is <A 
    href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
    class=function>SIGNAL</CODE></A>ed.
    <DT><SPAN class=term><CODE class=constant>:DIRECT-SUPERCLASSES</CODE></SPAN>
    <DD>a list of which each element is a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> or a class name. An <A 
    href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
    target=_top><CODE class=classname>ERROR</CODE></A> is <A 
    href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
    class=function>SIGNAL</CODE></A>ed if this argument is not a <A 
    href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
    target=_top>proper list</A>.
    <DT><SPAN class=term>additional keyword arguments</SPAN>
    <DD>See <A title="29.1.3.5.1.&nbsp;Initialization of class metaobjects" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">Section&nbsp;29.1.3.5.1, 
    “Initialization of class metaobjects”</A> </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to define or modify the definition of a 
  named class. It is called by the <A 
  title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A> function. It can also be called 
  directly.</P>
  <P>The first step performed by this generic function is to compute the set of 
  initialization arguments which will be used to create or reinitialize the 
  named class. The initialization arguments are computed from the full set of 
  keyword arguments received by this generic function as follows:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI>The <CODE class=constant>:METACLASS</CODE> argument is not included in 
    the initialization arguments.
    <LI>
    <P>If the <CODE class=constant>:DIRECT-SUPERCLASSES</CODE> argument was 
    received by this generic function, it is converted into a list of <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>s. This conversion does not affect the structure of the 
    supplied <CODE class=constant>:DIRECT-SUPERCLASSES</CODE> argument. For each 
    element in the <CODE class=constant>:DIRECT-SUPERCLASSES</CODE> 
argument:</P>
    <DIV class=itemizedlist>
    <UL type=circle>
      <LI>If the element is a <A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
      metaobject</A>, that <A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
      metaobject</A> is used.
      <LI>If the element names a class, that <A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
      metaobject</A> is used.
      <LI>
      <P>Otherwise an instance of the class <A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> is created and 
      used. The <A 
      href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_name" 
      target=_top>proper name</A> of the newly created forward referenced <A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
      metaobject</A> is set to the element.</P>
      <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
      <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
      class=command>CLISP</STRONG></SPAN></H3>
      <P>A new <A 
      title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
      class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> instance is only 
      created when one for the given class name does not yet exist; otherwise 
      the existing one is reused. See <A 
      title="Implementation of class CLOS:FORWARD-REFERENCED-CLASS in CLISP" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#forward-referenced-class-clisp">Implementation 
      of class <CODE class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE> in 
      <SPAN><STRONG 
    class=command>CLISP</STRONG></SPAN></A>.</P></DIV></LI></UL></DIV>
    <LI>All other keyword arguments are included directly in the initialization 
    arguments.</LI></UL></DIV>
  <P>If the <EM class=replaceable><CODE>class</CODE></EM> argument is <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>, a new <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is created by calling the <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> generic function 
  with the value of the <CODE class=constant>:METACLASS</CODE> argument as its 
  first argument, and the previously computed initialization arguments. The <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_name" 
  target=_top>proper name</A> of the newly created <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is set to <EM class=replaceable><CODE>name</CODE></EM>. The 
  newly created <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is returned.</P>
  <P>If the <EM class=replaceable><CODE>class</CODE></EM> argument is a forward 
  referenced class, <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> is called to change 
  its class to the value specified by the <CODE class=constant>:METACLASS</CODE> 
  argument. The <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is then reinitialized with the previously initialization 
  arguments. (This is a documented violation of the general constraint that <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> may not be used with 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>s.)</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>The <EM class=replaceable><CODE>class</CODE></EM> argument cannot be a 
  forward referenced class. See <A 
  title="Implementation of class CLOS:FORWARD-REFERENCED-CLASS in CLISP" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#forward-referenced-class-clisp">Implementation 
  of class <CODE class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE> in 
  <SPAN><STRONG class=command>CLISP</STRONG></SPAN></A>.</P></DIV>
  <P>If the class of the <EM class=replaceable><CODE>class</CODE></EM> argument 
  is not the same as the class specified by the <CODE 
  class=constant>:METACLASS</CODE> argument, an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>Otherwise, the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> <EM class=replaceable><CODE>class</CODE></EM> is redefined by 
  calling the <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> generic 
  function with <EM class=replaceable><CODE>class</CODE></EM> and the 
  initialization arguments. The <EM class=replaceable><CODE>class</CODE></EM> 
  argument is then returned.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>) <EM class=replaceable><CODE>name</CODE></EM> 
  <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE class=constant>:METACLASS</CODE> <CODE 
  class=constant>:DIRECT-SUPERCLASSES</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function in the case 
  where the <EM class=replaceable><CODE>class</CODE></EM> argument is a 
  class.</P>
  <P>This method can be overridden.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE class=constant>:METACLASS</CODE> <CODE 
  class=constant>:DIRECT-SUPERCLASSES</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function in the case 
  where the <EM class=replaceable><CODE>class</CODE></EM> argument is a forward 
  referenced class.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>This method does not exist. See <A 
  title="Implementation of class CLOS:FORWARD-REFERENCED-CLASS in CLISP" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#forward-referenced-class-clisp">Implementation 
  of class <CODE class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE> in 
  <SPAN><STRONG class=command>CLISP</STRONG></SPAN></A>. Use the method 
  specialized on <A href="http://www.lisp.org/HyperSpec/Body/syscla_null.html" 
  target=_top><CODE class=classname>NULL</CODE></A> instead.</P></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.3.&nbsp;Generic Function CLOS:ENSURE-CLASS-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class-UC"><CODE 
  class=function>CLOS:ENSURE-CLASS-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_null.html" target=_top><CODE 
  class=classname>NULL</CODE></A>) <EM class=replaceable><CODE>name</CODE></EM> 
  <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE class=constant>:METACLASS</CODE> <CODE 
  class=constant>:DIRECT-SUPERCLASSES</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE></SPAN></SPAN>
  <DD>This method implements the behavior of the generic function in the case 
  where the <EM class=replaceable><CODE>class</CODE></EM> argument is <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. </DD></DL></DIV></DIV><!--ensure-class-UC-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=finalize-inheritance></A>29.1.3.6.4.&nbsp;Generic Function 
<A title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
class=function>CLOS:FINALIZE-INHERITANCE</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to finalize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. This is described in <A 
  title="29.1.3.4.&nbsp;Class Finalization Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-finalization">Section&nbsp;29.1.3.4, 
  “Class Finalization Protocol”</A> </P>
  <P>After <A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> returns, the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> is finalized and the result of calling <A 
  title="29.1.3.3.9.&nbsp;Generic Function CLOS:CLASS-FINALIZED-P" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p"><CODE 
  class=function>CLOS:CLASS-FINALIZED-P</CODE></A> on the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> will be true.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE 
  class=classname>STANDARD-CLASS</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for these methods beyond that which is specified 
  for their respective generic functions.
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>. </DD></DL></DIV></DIV><!--finalize-inheritance-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-make-instance></A>29.1.3.6.5.&nbsp;Generic Function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> or a class name. 
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>a list of alternating initialization argument names and 
  values.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is a newly allocated and initialized instance of <EM 
  class=replaceable><CODE>class</CODE></EM>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>The generic function <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> creates and returns 
  a new instance of the given class. Its behavior and use is described in the 
  [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>]. </DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_symbol.html" target=_top><CODE 
  class=classname>SYMBOL</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>This method simply invokes <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> recursively on the 
  arguments <SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" 
  target=_top><CODE class=function>FIND-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM>)</CODE></SPAN> and <EM 
  class=replaceable><CODE>initargs</CODE></EM>.
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>These methods implement the behavior of <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> described in the [<A 
  title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_7-1.html" target=_top>7.1 “<SPAN 
  class=quote>Object Creation and Initialization</SPAN>”</A>. 
</DD></DL></DIV></DIV><!--mop-make-instance-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=alloc-instance></A>29.1.3.6.6.&nbsp;Generic Function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
target=_top><CODE 
class=function>ALLOCATE-INSTANCE</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
  target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>alternating initialization argument names and values.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned is a newly allocated instance of <EM 
  class=replaceable><CODE>class</CODE></EM>
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to create a new, uninitialized instance of 
  a class. The interpretation of the concept of an <STRONG class=first><EM 
  class=firstterm>uninitialized</EM></STRONG> instance depends on the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> class.</P>
  <P>Before allocating the new instance, <A 
  title="29.1.3.3.9.&nbsp;Generic Function CLOS:CLASS-FINALIZED-P" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-finalized-p"><CODE 
  class=function>CLOS:CLASS-FINALIZED-P</CODE></A> is called to see if <EM 
  class=replaceable><CODE>class</CODE></EM> has been finalized. If it has not 
  been finalized, <A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> is called before the new 
  instance is allocated.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
  target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM></CODE></SPAN></SPAN>
  <DD>This method allocates storage in the instance for each slot with 
  allocation <CODE class=constant>:INSTANCE</CODE>. These slots are unbound. 
  Slots with any other allocation are ignored by this method (no <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed).
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
  target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method allocates storage in the instance for each slot with allocation 
  <CODE class=constant>:INSTANCE</CODE>. These slots are unbound. Slots with any 
  other allocation are ignored by this method (no <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed).</P>
  <P>The funcallable instance function of the instance is undefined - the 
  results are undefined if the instance is applied to arguments before <A 
  title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
  class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A> has been used 
  to set the funcallable instance function. </P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
  target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
  target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>. </DD></DL></DIV></DIV><!--alloc-instance--><!--end class basic customization--><!--begin class advanced customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=validate-superclass></A>29.1.3.6.7.&nbsp;Generic Function 
<A title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
  class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>superclass</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>superclass</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns true or false. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to determine whether the class <EM 
  class=replaceable><CODE>superclass</CODE></EM> is suitable for use as a 
  superclass of <EM class=replaceable><CODE>class</CODE></EM>.</P>
  <P>This generic function can be be called by the implementation or user code. 
  It is called during <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> initialization and reinitialization, before the direct 
  superclasses are stored. If this generic function returns false, the 
  initialization or reinitialization will signal an error. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
  class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>superclass</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>This method returns true in three situations: </P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI>If the <EM class=replaceable><CODE>superclass</CODE></EM> argument is 
    the class named <A href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" 
    target=_top><CODE class=classname>T</CODE></A>, 
    <LI>if the class of the <EM class=replaceable><CODE>class</CODE></EM> 
    argument is the same as the class of the <EM 
    class=replaceable><CODE>superclass</CODE></EM> argument, or 
    <LI>if the class of one of the arguments is <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> and the class of 
    the other is <A title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>.</LI></OL></DIV>
  <P>In all other cases, this method returns false.</P>
  <P>This method can be overridden.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>This method also returns true in a fourth situation: </P>
  <DIV class=orderedlist>
  <OL type=i start=4>
    <LI>If the class of the <EM class=replaceable><CODE>class</CODE></EM> 
    argument is a subclass of the class of the <EM 
    class=replaceable><CODE>superclass</CODE></EM> argument. 
  </LI></OL></DIV></DIV></DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>Defining a method on <A 
title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A> requires detailed knowledge 
of of the internal protocol followed by each of the two <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes. A method on <A 
title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A> which returns true for two 
different <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> classes declares that they are compatible.</P></DIV><!--validate-superclass-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-dsd-initargs></A>29.1.3.6.8.&nbsp;Generic Function 
<A 
title="29.1.3.6.8.&nbsp;Generic Function CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs"><CODE 
class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P></P></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.8.&nbsp;Generic Function CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs"><CODE 
  class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>slot-spec</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM 
class=replaceable><CODE>slot-spec</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
    slot specification</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is a list of initialization 
  arguments for a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function determines the initialization arguments for the 
  direct slot definition for a slot in a class. It is called during 
  initialization of a class. The resulting initialization arguments are passed 
  to <A 
  title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A> and then to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>.</P>
  <P>This generic function uses the supplied <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A>. The value of <CODE class=constant>:NAME</CODE> in the 
  returned initargs is the same as the value of <CODE 
  class=constant>:NAME</CODE> in the supplied <EM 
  class=replaceable><CODE>slot-spec</CODE></EM> argument. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.8.&nbsp;Generic Function CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs"><CODE 
  class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>slot-spec</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.8.&nbsp;Generic Function CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs"><CODE 
  class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>slot-spec</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method returns <EM class=replaceable><CODE>slot-spec</CODE></EM> 
  unmodified.</P>
  <P>This method can be overridden.</P></DD></DL></DIV></DIV><!--compute-dsd-initargs-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=dsd-class></A>29.1.3.6.9.&nbsp;Generic Function <A 
title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>a set of initialization arguments and values. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned is a subclass of the class <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:DIRECT-SLOT-DEFINITION</CODE></A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>When a class is initialized, each of the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A>s must be converted to a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>. This generic function is called to determine the 
  class of that <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>.</P>
  <P>The <EM class=replaceable><CODE>initargs</CODE></EM> argument is simply the 
  <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-slot-spec">canonicalized 
  slot specification</A> for the slot. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>These methods return the class <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>. </P>
  <P>These methods can be overridden.</P></DD></DL></DIV></DIV><!--dsd-class-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-cpl></A>29.1.3.6.10.&nbsp;Generic Function <A 
title="29.1.3.6.10.&nbsp;Generic Function CLOS:COMPUTE-CLASS-PRECEDENCE-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl"><CODE 
class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.10.&nbsp;Generic Function CLOS:COMPUTE-CLASS-PRECEDENCE-LIST" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl"><CODE 
  class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>s.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic-function is called to determine the class precedence list of a 
  class.</P>
  <P>The result is a list which contains each of <EM 
  class=replaceable><CODE>class</CODE></EM> and its superclasses once and only 
  once. The first element of the list is <EM 
  class=replaceable><CODE>class</CODE></EM> and the last element is the class 
  named <A href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" 
  target=_top><CODE class=classname>T</CODE></A>.</P>
  <P>All methods on this generic function must compute the class precedence list 
  as a function of the ordered direct superclasses of the superclasses of <EM 
  class=replaceable><CODE>class</CODE></EM>. The results are undefined if the 
  rules used to compute the class precedence list depend on any other 
  factors.</P>
  <P>When a class is finalized, <A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> calls this generic 
  function and associates the returned value with the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. The value can then be accessed by calling <A 
  title="29.1.3.3.5.&nbsp;Generic Function CLOS:CLASS-PRECEDENCE-LIST" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#cpl"><CODE 
  class=function>CLOS:CLASS-PRECEDENCE-LIST</CODE></A>.</P>
  <P>The list returned by this function will not be mutated by the 
  implementation. The results are undefined if a portable program mutates the 
  list returned by this function.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.10.&nbsp;Generic Function CLOS:COMPUTE-CLASS-PRECEDENCE-LIST" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-cpl"><CODE 
  class=function>CLOS:COMPUTE-CLASS-PRECEDENCE-LIST</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>This method computes the class precedence list according to the rules 
  described in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_4-3-5.html" target=_top>4.3.5 
  “<SPAN class=quote>Determining the Class Precedence List</SPAN>”</A>.</P>
  <P>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> if <EM 
  class=replaceable><CODE>class</CODE></EM> or any of its superclasses is a 
  forward referenced class.</P>
  <P>This method can be overridden.</P></DD></DL></DIV></DIV><!--compute-cpl-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-slots></A>29.1.3.6.11.&nbsp;Generic Function <A 
title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned is a set of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function computes a set of effective <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s for the class <EM 
  class=replaceable><CODE>class</CODE></EM>. The result is a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s: one for each slot that will be accessible in 
  instances of <EM class=replaceable><CODE>class</CODE></EM>. </P>
  <P>This generic function proceeds in 3 steps:</P>
  <P>The first step collects the full set of direct slot definitions from the 
  superclasses of <EM class=replaceable><CODE>class</CODE></EM>.</P>
  <P>The direct slot definitions are then collected into individual lists, one 
  list for each slot name associated with any of the direct slot definitions. 
  The slot names are compared with <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A>. Each such list is then sorted into class 
  precedence list order. Direct slot definitions coming from classes earlier in 
  the class precedence list of <EM class=replaceable><CODE>class</CODE></EM> 
  appear before those coming from classes later in the class precedence list. 
  For each slot name, the generic function <A 
  title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A> is called to 
  compute an effective slot definition. The result of <A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> is a list of these effective slot 
  definitions, in unspecified order.</P>
  <P>In the final step, the location for each effective slot definition is set. 
  This is done by specified around-methods; portable methods cannot take over 
  this behavior. For more information on the slot definition locations, see <A 
  title="29.1.10.1.&nbsp;Instance Structure Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-instance-stuct">Section&nbsp;29.1.10.1, 
  “Instance Structure Protocol”</A>.</P>
  <P>The list returned by this function will not be mutated by the 
  implementation. The results are undefined if a portable program mutates the 
  list returned by this function.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE 
  class=classname>STANDARD-CLASS</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>)}</CODE></SPAN></SPAN>
  <DD>
  <P>These methods implement the specified behavior of the generic function.</P>
  <P>These methods can be overridden.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> <CODE 
  class=constant>:AROUND</CODE> (<EM class=replaceable><CODE>class</CODE></EM> 
  <A href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE 
  class=classname>STANDARD-CLASS</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> <CODE 
  class=constant>:AROUND</CODE> (<EM class=replaceable><CODE>class</CODE></EM> 
  <A title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>These methods implement the specified behavior of computing and storing 
  slot locations. These methods cannot be overridden. </DD></DL></DIV></DIV><!--compute-slots-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-esd></A>29.1.3.6.12.&nbsp;Generic Function <A 
title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>name</CODE></EM> <EM 
  class=replaceable><CODE>direct-slot-definitions</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>name</CODE></EM></SPAN>
    <DD>a slot name.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>direct-slot-definitions</CODE></EM></SPAN>
    <DD>an ordered list of <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>s. The most specific <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A> appears first in the list.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is an <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function determines the effective slot definition for a slot 
  in a class. It is called by <A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> once for each slot accessible in 
  instances of <EM class=replaceable><CODE>class</CODE></EM>.</P>
  <P>This generic function uses the supplied list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s to compute the inheritance of slot properties for a 
  single slot. The returned effective slot definition represents the result of 
  computing the inheritance. The name of the new effective slot definition is 
  the same as the name of the direct slot definitions supplied.</P>
  <P>The class of the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> is determined by calling <A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A>. The effective 
  slot definition is then created by calling <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The initialization 
  arguments passed in this call to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> are used to 
  initialize the new <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>. See <A title="29.1.4.&nbsp;Slot Definitions" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd">Section&nbsp;29.1.4, 
  “Slot Definitions”</A> for details. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>name</CODE></EM> <EM 
  class=replaceable><CODE>direct-slot-definitions</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>name</CODE></EM> <EM 
  class=replaceable><CODE>direct-slot-definitions</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the inheritance and defaulting of slot options 
  following the rules described in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_7-5-3.html" target=_top>7.5.3 
  “<SPAN class=quote>Inheritance of Slots and Options</SPAN>”</A>.</P>
  <P>This method can be extended, but the value returned by the extending method 
  must be the value returned by this method. </P></DD></DL></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The initialization arguments that are passed to <A 
title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> are computed through a 
call to <A 
title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A>. It is 
the <A 
title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A> method 
that implements the inheritance rules.</P></DIV></DIV><!--compute-esd-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-esd-initargs></A>29.1.3.6.13.&nbsp;Generic 
Function <A 
title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P></P></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>direct-slot-definitions</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>direct-slot-definitions</CODE></EM></SPAN>
    <DD>an ordered list of <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>s. The most specific <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A> appears first in the list.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is a list of initialization 
  arguments for an <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function determines the initialization arguments for the 
  effective slot definition for a slot in a class. It is called by <A 
  title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A>. The 
  resulting initialization arguments are passed to <A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> and then to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>.</P>
  <P>This generic function uses the supplied list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>s to compute the inheritance of slot properties for a 
  single slot. The returned effective slot definition initargs represent the 
  result of computing the inheritance. The value of <CODE 
  class=constant>:NAME</CODE> in the returned initargs is the same as the name 
  of the direct slot definitions supplied.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>direct-slot-definitions</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>direct-slot-definitions</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the inheritance and defaulting of slot options 
  following the rules described in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_7-5-3.html" target=_top>7.5.3 
  “<SPAN class=quote>Inheritance of Slots and Options</SPAN>”</A>.</P>
  <P>This method can be extended.</P></DD></DL></DIV></DIV><!--compute-esd-initargs-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=esd-class></A>29.1.3.6.14.&nbsp;Generic Function <A 
title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>set of initialization arguments and values. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned is a subclass of the class <A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This generic function is called by <A 
  title="29.1.3.6.12.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION</CODE></A> to determine 
  the class of the resulting <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>. The <EM 
  class=replaceable><CODE>initargs</CODE></EM> argument is the set of 
  initialization arguments and values that will be passed to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> when the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> is created. </DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>These methods return the class <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>. </P>
  <P>These methods can be overridden.</P></DD></DL></DIV></DIV><!--esd-class-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-default-initargs></A>29.1.3.6.15.&nbsp;Generic 
Function <A 
title="29.1.3.6.15.&nbsp;Generic Function CLOS:COMPUTE-DEFAULT-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs"><CODE 
class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.6.15.&nbsp;Generic Function CLOS:COMPUTE-DEFAULT-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs"><CODE 
  class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
  default initialization argument</A>s. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic-function is called to determine the default initialization 
  arguments for a class.</P>
  <P>The result is a list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-canonicalized-default-initarg">canonicalized 
  default initialization argument</A>s, with no duplication among initialization 
  argument names.</P>
  <P>All methods on this generic function must compute the default 
  initialization arguments as a function of only: </P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI>the class precedence list of <EM 
    class=replaceable><CODE>class</CODE></EM>, and
    <LI>the direct default initialization arguments of each class in that 
    list.</LI></OL></DIV>
  <P>The results are undefined if the rules used to compute the default 
  initialization arguments depend on any other factors.</P>
  <P>When a class is finalized, <A 
  title="29.1.3.6.4.&nbsp;Generic Function CLOS:FINALIZE-INHERITANCE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#finalize-inheritance"><CODE 
  class=function>CLOS:FINALIZE-INHERITANCE</CODE></A> calls this generic 
  function and associates the returned value with the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. The value can then be accessed by calling <A 
  title="29.1.3.3.8.&nbsp;Generic Function CLOS:CLASS-DEFAULT-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-default-initargs"><CODE 
  class=function>CLOS:CLASS-DEFAULT-INITARGS</CODE></A>.</P>
  <P>The list returned by this function will not be mutated by the 
  implementation. The results are undefined if a portable program mutates the 
  list returned by this function.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.15.&nbsp;Generic Function CLOS:COMPUTE-DEFAULT-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs"><CODE 
  class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE 
  class=classname>STANDARD-CLASS</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.6.15.&nbsp;Generic Function CLOS:COMPUTE-DEFAULT-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-default-initargs"><CODE 
  class=function>CLOS:COMPUTE-DEFAULT-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>These methods compute the default initialization arguments according to the 
  rules described in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_7-1-3.html" target=_top>7.1.3 
  “<SPAN class=quote>Defaulting of Initialization Arguments</SPAN>”</A>.</P>
  <P>These methods signal an error if <EM 
  class=replaceable><CODE>class</CODE></EM> or any of its superclasses is a 
  forward referenced class.</P>
  <P>These methods can be overridden.</P></DD></DL></DIV></DIV><!--compute-default-initargs--><!--end class advanced customization--></DIV><!--mop-cl-customize-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-cl-dep></A>29.1.3.7.&nbsp;Updating 
Dependencies</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass">29.1.3.7.1. 
  Generic Function <CODE 
  class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass">29.1.3.7.2. 
  Generic Function <CODE 
  class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=add-direct-subclass></A>29.1.3.7.1.&nbsp;Generic Function 
<A title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
  class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A> <EM 
  class=replaceable><CODE>superclass</CODE></EM> <EM 
  class=replaceable><CODE>subclass</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>superclass</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>subclass</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to maintain a set of backpointers from a 
  class to its direct subclasses. This generic function adds <EM 
  class=replaceable><CODE>subclass</CODE></EM> to the set of direct subclasses 
  of <EM class=replaceable><CODE>superclass</CODE></EM>.</P>
  <P>When a class is initialized, this generic function is called once for each 
  direct superclass of the class.</P>
  <P>When a class is reinitialized, this generic function is called once for 
  each added direct superclass of the class. The generic function <A 
  title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
  class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A> is called once for each 
  deleted direct superclass of the class. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
  class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A> (<EM 
  class=replaceable><CODE>superclass</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>subclass</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
    class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
    class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <P></P></DD></DL></DIV></DIV><!--add-direct-subclass-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=remove-direct-subclass></A>29.1.3.7.2.&nbsp;Generic 
Function <A 
title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
  class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A> <EM 
  class=replaceable><CODE>superclass</CODE></EM> <EM 
  class=replaceable><CODE>subclass</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>superclass</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>subclass</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to maintain a set of backpointers from a 
  class to its direct subclasses. It removes <EM 
  class=replaceable><CODE>subclass</CODE></EM> from the set of direct subclasses 
  of <EM class=replaceable><CODE>superclass</CODE></EM>. No <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if <EM 
  class=replaceable><CODE>subclass</CODE></EM> is not in this set.</P>
  <P>Whenever a class is reinitialized, this generic function is called once 
  with each deleted direct superclass of the class. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.3.7.2.&nbsp;Generic Function CLOS:REMOVE-DIRECT-SUBCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-subclass"><CODE 
  class=function>CLOS:REMOVE-DIRECT-SUBCLASS</CODE></A> (<EM 
  class=replaceable><CODE>superclass</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>subclass</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.3.7.1.&nbsp;Generic Function CLOS:ADD-DIRECT-SUBCLASS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-subclass"><CODE 
    class=function>CLOS:ADD-DIRECT-SUBCLASS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
    class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN></LI></UL></DIV></DD></DL></DIV></DIV><!--remove-direct-subclass--></DIV><!--mop-cl-dep--></DIV><!--mop-classes-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-sd></A>29.1.4.&nbsp;Slot 
Definitions</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-inheritance">29.1.4.1. 
  Inheritance Structure of slot definition metaobject Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-readers">29.1.4.2. 
  Introspection: Readers for slot definition metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-readers-GFs">29.1.4.2.1. 
    Generic Functions</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name">29.1.4.2.1.1. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation">29.1.4.2.1.2. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform">29.1.4.2.1.3. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction">29.1.4.2.1.4. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type">29.1.4.2.1.5. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs">29.1.4.2.1.6. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-methods">29.1.4.2.2. 
    Methods</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-dsd">29.1.4.2.3. 
    Readers for direct slot definition metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers">29.1.4.2.3.1. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers">29.1.4.2.3.2. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-esd">29.1.4.2.4. 
    Readers for effective slot definition metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location">29.1.4.2.4.1. 
      Generic Function <CODE 
      class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-init">29.1.4.3. 
  Initialization of slot definition metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-mo-methods">29.1.4.3.1. 
    Methods</A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-sd-inheritance></A>29.1.4.1.&nbsp;Inheritance 
Structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> Classes</H4></DIV></DIV></DIV>
<DIV class=figure><A id=mop-sd-inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.3.&nbsp;Inheritance structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG alt="Inheritance structure of slot definition metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-slotdef.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR 
class=figure-break></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-sd-readers></A>29.1.4.2.&nbsp;Introspection: Readers 
for <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd-readers-GFs">29.1.4.2.1. 
  Generic Functions</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name">29.1.4.2.1.1. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation">29.1.4.2.1.2. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform">29.1.4.2.1.3. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction">29.1.4.2.1.4. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type">29.1.4.2.1.5. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs">29.1.4.2.1.6. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-methods">29.1.4.2.2. 
  Methods</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-dsd">29.1.4.2.3. 
  Readers for direct slot definition metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers">29.1.4.2.3.1. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers">29.1.4.2.3.2. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-readers-esd">29.1.4.2.4. 
  Readers for effective slot definition metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location">29.1.4.2.4.1. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<P>The reader generic functions which simply return information associated with 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s are presented together here in the format described 
in <A title="29.1.3.3.&nbsp;Introspection: Readers for class metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers">Section&nbsp;29.1.3.3, 
“Introspection: Readers for class metaobjects”</A>.</P>
<P>Each of the reader generic functions for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s has the same syntax, accepting one required argument 
called <EM class=replaceable><CODE>slot</CODE></EM>, which must be a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>; otherwise, an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed. An <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is also <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> has not been initialized.</P>
<P>These generic functions can be called by the user or the implementation.</P>
<P>For any of these generic functions which returns a list, such lists will not 
be mutated by the implementation. The results are undefined if a portable 
program allows such a list to be mutated.</P><!--begin slot-definition basic introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-sd-readers-GFs></A>29.1.4.2.1.&nbsp;Generic 
Functions</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name">29.1.4.2.1.1. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation">29.1.4.2.1.2. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform">29.1.4.2.1.3. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction">29.1.4.2.1.4. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type">29.1.4.2.1.5. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs">29.1.4.2.1.6. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-name></A>29.1.4.2.1.1.&nbsp;Generic Function <A 
title="29.1.4.2.1.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-NAME" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name"><CODE 
class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.1.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-NAME" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name"><CODE 
class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A> <EM 
class=replaceable><CODE>slot</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the name of <EM class=replaceable><CODE>slot</CODE></EM>. This value 
is a symbol that can be used as a variable name. This is the value of the <CODE 
class=constant>:NAME</CODE> initialization argument that was associated with the 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The slot name does not need to be usable as a variable name. Slot names like 
<A href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A> or <A 
href="http://www.lisp.org/HyperSpec/Body/convar_t.html" target=_top><CODE 
class=constant>T</CODE></A> are perfectly valid. </P></DIV></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-allocation></A>29.1.4.2.1.2.&nbsp;Generic Function 
<A title="29.1.4.2.1.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-ALLOCATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation"><CODE 
class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.1.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-ALLOCATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation"><CODE 
class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A> <EM 
class=replaceable><CODE>slot</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the allocation of <EM class=replaceable><CODE>slot</CODE></EM>. This 
is a symbol. This is the defaulted value of the <CODE 
class=constant>:ALLOCATION</CODE> initialization argument that was associated 
with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-initform></A>29.1.4.2.1.3.&nbsp;Generic Function 
<A title="29.1.4.2.1.3.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFORM" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.1.3.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFORM" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A> <EM 
class=replaceable><CODE>slot</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the initialization form of <EM 
class=replaceable><CODE>slot</CODE></EM>. This can be any form. This is the 
defaulted value of the <CODE class=constant>:INITFORM</CODE> initialization 
argument that was associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization. When <EM 
class=replaceable><CODE>slot</CODE></EM> has no initialization form, the value 
returned is unspecified (however, <A 
title="29.1.4.2.1.4.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A> is guaranteed to 
return <A href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" 
target=_top><CODE class=constant>NIL</CODE></A>).</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-initfunction></A>29.1.4.2.1.4.&nbsp;Generic 
Function <A 
title="29.1.4.2.1.4.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.1.4.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A> <EM 
class=replaceable><CODE>slot</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the initialization function of <EM 
class=replaceable><CODE>slot</CODE></EM>. This value is either a function of no 
arguments, or <A href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" 
target=_top><CODE class=constant>NIL</CODE></A>, indicating that the slot has no 
initialization function. This is the defaulted value of the <CODE 
class=constant>:INITFUNCTION</CODE> initialization argument that was associated 
with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-type></A>29.1.4.2.1.5.&nbsp;Generic Function <A 
title="29.1.4.2.1.5.&nbsp;Generic Function CLOS:SLOT-DEFINITION-TYPE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type"><CODE 
class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.1.5.&nbsp;Generic Function CLOS:SLOT-DEFINITION-TYPE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type"><CODE 
class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A> <EM 
class=replaceable><CODE>slot</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the type of <EM class=replaceable><CODE>slot</CODE></EM>. This is a 
type specifier name. This is the defaulted value of the <CODE 
class=constant>:TYPE</CODE> initialization argument that was associated with the 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-initargs></A>29.1.4.2.1.6.&nbsp;Generic Function 
<A title="29.1.4.2.1.6.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.1.6.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITARGS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs"><CODE 
class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A> <EM 
class=replaceable><CODE>slot</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the set of initialization argument keywords for <EM 
class=replaceable><CODE>slot</CODE></EM>. This is the defaulted value of the 
<CODE class=constant>:INITARGS</CODE> initialization argument that was 
associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization.</P></DIV></DIV><!--mop-sd-readers-GFs-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=slotd-mo-readers-methods></A>29.1.4.2.2.&nbsp;Methods</H5></DIV></DIV></DIV>
<DIV class=variablelist>
<P class=title><B>The specified methods for the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> readers</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.1.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-NAME" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name"><CODE 
  class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A> (<EM 
  class=replaceable><CODE>slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.1.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-ALLOCATION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation"><CODE 
  class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A> (<EM 
  class=replaceable><CODE>slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.1.3.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFORM" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform"><CODE 
  class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A> (<EM 
  class=replaceable><CODE>slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.1.4.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction"><CODE 
  class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A> (<EM 
  class=replaceable><CODE>slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.1.5.&nbsp;Generic Function CLOS:SLOT-DEFINITION-TYPE" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type"><CODE 
  class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A> (<EM 
  class=replaceable><CODE>slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.1.6.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs"><CODE 
  class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A> (<EM 
  class=replaceable><CODE>slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for these methods beyond that which is specified 
  for their respective generic functions.</DD></DL></DIV></DIV><!--slotd-mo-readers-methods-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=slotd-mo-readers-dsd></A>29.1.4.2.3.&nbsp;Readers for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers">29.1.4.2.3.1. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers">29.1.4.2.3.2. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A></SPAN></DT></DL></DIV>
<P>The following additional reader generic functions are defined for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-readers></A>29.1.4.2.3.1.&nbsp;Generic Function <A 
title="29.1.4.2.3.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-READERS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers"><CODE 
class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.3.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-READERS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers"><CODE 
class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A> <EM 
class=replaceable><CODE>direct-slot-definition</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a (possibly empty) set of readers of the <EM 
class=replaceable><CODE>direct-slot-definition</CODE></EM>. This value is a list 
of function names. This is the defaulted value of the <CODE 
class=constant>:READERS</CODE> initialization argument that was associated with 
the direct <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-writers></A>29.1.4.2.3.2.&nbsp;Generic Function <A 
title="29.1.4.2.3.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-WRITERS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers"><CODE 
class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.3.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-WRITERS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers"><CODE 
class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A> <EM 
class=replaceable><CODE>direct-slot-definition</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a (possibly empty) set of writers of the <EM 
class=replaceable><CODE>direct-slot-definition</CODE></EM>. This value is a list 
of function names. This is the defaulted value of the <CODE 
class=constant>:WRITERS</CODE> initialization argument that was associated with 
the direct <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> during initialization. </P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.3.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-READERS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers"><CODE 
  class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A> (<EM 
  class=replaceable><CODE>direct-slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.3.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-WRITERS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers"><CODE 
  class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A> (<EM 
  class=replaceable><CODE>direct-slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for these methods beyond that which is specified 
  for their respective generic functions.</DD></DL></DIV>
<P></P></DIV></DIV><!--slotd-mo-readers-dsd--><!--end slot-definition basic introspection--><!--begin slot-definition advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=slotd-mo-readers-esd></A>29.1.4.2.4.&nbsp;Readers for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location">29.1.4.2.4.1. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A></SPAN></DT></DL></DIV>
<P>The following reader generic function is defined for effective <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=slotdef-location></A>29.1.4.2.4.1.&nbsp;Generic Function 
<A title="29.1.4.2.4.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-LOCATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location"><CODE 
class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A></H6></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.4.2.4.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-LOCATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location"><CODE 
class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A> <EM 
class=replaceable><CODE>effective-slot-definition</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the location of <EM 
class=replaceable><CODE>effective-slot-definition</CODE></EM>. The meaning and 
interpretation of this value is described in <A 
title="29.1.10.1.&nbsp;Instance Structure Protocol" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-instance-stuct">Section&nbsp;29.1.10.1, 
“Instance Structure Protocol”</A>.</P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.4.2.4.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-LOCATION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location"><CODE 
  class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A> (<EM 
  class=replaceable><CODE>effective-slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>This method returns the value stored by <SPAN class=method><CODE 
  class=literal><A title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> <CODE 
  class=constant>:AROUND</CODE> (<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>)</CODE></SPAN> and 
  <SPAN class=method><CODE class=literal><A 
  title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
  class=function>CLOS:COMPUTE-SLOTS</CODE></A> <CODE 
  class=constant>:AROUND</CODE> (<A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>)</CODE></SPAN>. 
  </DD></DL></DIV></DIV></DIV><!--slotd-mo-readers-esd--><!--end slot-definition advanced introspection--></DIV><!--mop-sd-readers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-sd-init></A>29.1.4.3.&nbsp;Initialization of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-mo-methods">29.1.4.3.1. 
  Methods</A></SPAN></DT></DL></DIV>
<P>A <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> can be created by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The initialization 
arguments establish the definition of the slot definition. A <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> cannot be redefined; calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A>.</P>
<P>Initialization of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> must be done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> and allowing it to 
call <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>. Portable 
programs must <SPAN class=strong><STRONG>not</STRONG></SPAN>...</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> directly to 
  initialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A> directly to 
  initialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> to change the class 
  of any <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> or to turn a non-slot-definition object into a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A>.</LI></UL></DIV>
<P>Since metaobject classes may not be redefined, no behavior is specified for 
the result of calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_efined-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-REDEFINED-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s. Since the class of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> cannot be changed, no behavior is specified for the 
result of calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_ferent-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-DIFFERENT-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s.</P>
<P>During initialization, each initialization argument is checked for errors and 
then associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>. The value can then be accessed by calling the 
appropriate accessor as shown in <A 
title="Table&nbsp;29.3.&nbsp;Initialization arguments and&#10;  accessors for slot definition metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotd-mo-initargs">Table&nbsp;29.3, 
“Initialization arguments and accessors for slot definition 
metaobjects”</A>.</P>
<P>This section begins with a description of the error checking and processing 
of each initialization argument. This is followed by a table showing the generic 
functions that can be used to access the stored initialization arguments.</P>
<P>In these descriptions, the phrase “<SPAN class=quote>this argument defaults 
to <EM class=replaceable><CODE>value</CODE></EM></SPAN>” means that when that 
initialization argument is not supplied, initialization is performed as if <EM 
class=replaceable><CODE>value</CODE></EM> had been supplied. For some 
initialization arguments this could be done by the use of default initialization 
arguments, but whether it is done this way is not specified. Implementations are 
free to define default initialization arguments for specified <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> classes. Portable programs are free to define default 
initialization arguments for portable subclasses of the class <A 
title="29.1.4.&nbsp;Slot Definitions" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
class=classname>CLOS:SLOT-DEFINITION</CODE></A>.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>
  <P>The <CODE class=constant>:NAME</CODE> argument is a slot name. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this argument is not a symbol which can 
  be used as a variable name. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this argument is not supplied.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>The <CODE class=constant>:NAME</CODE> argument does not need to be usable 
  as a variable name. Slot names like <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_t.html" target=_top><CODE 
  class=constant>T</CODE></A> are perfectly valid.</P></DIV>
  <LI>The <CODE class=constant>:INITFORM</CODE> argument is a form. The <CODE 
  class=constant>:INITFORM</CODE> argument defaults to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if the <CODE 
  class=constant>:INITFORM</CODE> argument is supplied, but the <CODE 
  class=constant>:INITFUNCTION</CODE> argument is not supplied.
  <LI>The <CODE class=constant>:INITFUNCTION</CODE> argument is a function of 
  zero arguments which, when called, evaluates the <CODE 
  class=constant>:INITFORM</CODE> in the appropriate <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" target=_top>lexical 
  environment</A>. The <CODE class=constant>:INITFUNCTION</CODE> argument 
  defaults to false. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if the <CODE 
  class=constant>:INITFUNCTION</CODE> argument is supplied, but the <CODE 
  class=constant>:INITFORM</CODE> argument is not supplied.
  <LI>The <CODE class=constant>:TYPE</CODE> argument is a type specifier name. 
  An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed otherwise. The <CODE 
  class=constant>:TYPE</CODE> argument defaults to the symbol <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_t.html" target=_top><CODE 
  class=constant>T</CODE></A>. 
  <LI>The <CODE class=constant>:ALLOCATION</CODE> argument is a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_symbol.html" target=_top><CODE 
  class=classname>SYMBOL</CODE></A>. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed otherwise. The <CODE 
  class=constant>:ALLOCATION</CODE> argument defaults to the symbol <CODE 
  class=constant>:INSTANCE</CODE>.
  <LI>The <CODE class=constant>:INITARGS</CODE> argument is a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_list.html" target=_top><CODE 
  class=classname>LIST</CODE></A> of <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_symbol.html" target=_top><CODE 
  class=classname>SYMBOL</CODE></A>s. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this argument is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A>, or if any element of this list is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_symbol.html" target=_top><CODE 
  class=classname>SYMBOL</CODE></A>. The <CODE class=constant>:INITARGS</CODE> 
  argument defaults to the empty list.
  <LI>The <CODE class=constant>:READERS</CODE> and <CODE 
  class=constant>:WRITERS</CODE> arguments are <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_list.html" target=_top><CODE 
  class=classname>LIST</CODE></A>s of function names. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if they are not <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A>s, or if any element is not a valid function name. 
  They default to the empty list. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if either of these arguments is supplied 
  and the metaobject is not a <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:DIRECT-SLOT-DEFINITION</CODE></A>. 
  <LI>The <CODE class=constant>:DOCUMENTATION</CODE> argument is a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if it is not. This argument default to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> during initialization.</LI></UL></DIV>
<P>After the processing and defaulting of initialization arguments described 
above, the value of each initialization argument is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>. These values can then be accessed by calling the 
corresponding generic function. The correspondences are as follows: </P>
<DIV class=table><A id=slotd-mo-initargs></A>
<P class=title><B>Table&nbsp;29.3.&nbsp;Initialization arguments and accessors 
for <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>s</B></P>
<DIV class=table-contents>
<TABLE 
summary="Initialization arguments and&#10;  accessors for slot definition metaobjects" 
border=1>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Initialization Argument</TH>
    <TH align=middle>Generic Function</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><CODE class=constant>:NAME</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.1.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-NAME" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name"><CODE 
      class=function>CLOS:SLOT-DEFINITION-NAME</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:INITFORM</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.1.3.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFORM" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initform"><CODE 
      class=function>CLOS:SLOT-DEFINITION-INITFORM</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:INITFUNCTION</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.1.4.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITFUNCTION" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initfunction"><CODE 
      class=function>CLOS:SLOT-DEFINITION-INITFUNCTION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:TYPE</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.1.5.&nbsp;Generic Function CLOS:SLOT-DEFINITION-TYPE" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-type"><CODE 
      class=function>CLOS:SLOT-DEFINITION-TYPE</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:ALLOCATION</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.1.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-ALLOCATION" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-allocation"><CODE 
      class=function>CLOS:SLOT-DEFINITION-ALLOCATION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:INITARGS</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.1.6.&nbsp;Generic Function CLOS:SLOT-DEFINITION-INITARGS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-initargs"><CODE 
      class=function>CLOS:SLOT-DEFINITION-INITARGS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:READERS</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.3.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-READERS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-readers"><CODE 
      class=function>CLOS:SLOT-DEFINITION-READERS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:WRITERS</CODE></TD>
    <TD align=middle><A 
      title="29.1.4.2.3.2.&nbsp;Generic Function CLOS:SLOT-DEFINITION-WRITERS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-writers"><CODE 
      class=function>CLOS:SLOT-DEFINITION-WRITERS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DOCUMENTATION</CODE></TD>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_doc_umentationcp.html" 
      target=_top><CODE 
class=function>DOCUMENTATION</CODE></A></TD></TR></TBODY></TABLE></DIV></DIV>
<P><BR class=table-break></P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=slotdef-mo-methods></A>29.1.4.3.1.&nbsp;Methods</H5></DIV></DIV></DIV>
<P>It is not specified which methods provide the initialization and 
reinitialization behavior described above. Instead, the information needed to 
allow portable programs to specialize this behavior is presented as a set of 
restrictions on the methods a portable program can define. The model is that 
portable initialization methods have access to the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> when either all or none of the specified 
initialization has taken effect.</P>
<P>These restrictions govern the methods that a portable program can define on 
the generic functions <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>, and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A>. These 
restrictions apply only to methods on these generic functions for which the 
first specializer is a subclass of the class <A 
title="29.1.4.&nbsp;Slot Definitions" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
class=classname>CLOS:SLOT-DEFINITION</CODE></A>. Other portable methods on these 
generic functions are not affected by these restrictions.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>Portable programs must not define methods on <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>.
  <LI>
  <P>For <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>: </P>
  <DIV class=itemizedlist>
  <UL type=circle>
    <LI>Portable programs must not define primary methods. 
    <LI>Portable programs may define around-methods, but these must be 
    extending, not overriding methods.
    <LI>Portable before-methods must assume that when they are run, none of the 
    initialization behavior described above has been completed.
    <LI>Portable after-methods must assume that when they are run, all of the 
    initialization behavior described above has been 
  completed.</LI></UL></DIV></LI></UL></DIV>
<P>The results are undefined if any of these restrictions are 
violated.</P></DIV><!--slotdef-mo-methods--></DIV><!--mop-sd-init--></DIV><!--mop-sd-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-gf></A>29.1.5.&nbsp;Generic 
Functions</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-inheritance">29.1.5.1. 
  Inheritance Structure of generic function metaobject Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-readers">29.1.5.2. 
  Introspection: Readers for generic function metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name">29.1.5.2.1. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods">29.1.5.2.2. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list">29.1.5.2.3. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order">29.1.5.2.4. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations">29.1.5.2.5. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class">29.1.5.2.6. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination">29.1.5.2.7. 
    Generic Function <CODE 
    class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name-methods">29.1.5.2.8. 
    Methods</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init">29.1.5.3. 
  Initialization of Generic Functions</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-defgeneric">29.1.5.3.1. 
    Macro <CODE class=function>DEFGENERIC</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-invocation">29.1.5.3.2. 
    Generic Function Invocation Protocol</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-mo">29.1.5.3.3. 
    Initialization of generic function metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-mo-init-methods">29.1.5.3.3.1. 
      Methods</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-customize">29.1.5.4. 
  Customization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#setf-gf-name">29.1.5.4.1. 
    Generic Function <CODE class=code>(SETF 
    CLOS:GENERIC-FUNCTION-NAME)</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf">29.1.5.4.2. 
    Generic Function <CODE 
    class=function>ENSURE-GENERIC-FUNCTION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC">29.1.5.4.3. 
    Generic Function <CODE 
    class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-add-method">29.1.5.4.4. 
    Generic Function <CODE class=function>ADD-METHOD</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-remove-method">29.1.5.4.5. 
    Generic Function <CODE class=function>REMOVE-METHOD</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods">29.1.5.4.6. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC">29.1.5.4.7. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method">29.1.5.4.8. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function">29.1.5.4.9. 
    Function <CODE 
    class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda">29.1.5.4.10. 
    Generic Function <CODE 
    class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function">29.1.5.4.11. 
    Generic Function <CODE 
    class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-gf-inheritance></A>29.1.5.1.&nbsp;Inheritance 
Structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> Classes</H4></DIV></DIV></DIV>
<DIV class=figure><A id=mop-gf-inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.4.&nbsp;Inheritance structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG 
      alt="Inheritance structure of generic function metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-genfun.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR 
class=figure-break></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-gf-readers></A>29.1.5.2.&nbsp;Introspection: Readers 
for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name">29.1.5.2.1. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods">29.1.5.2.2. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list">29.1.5.2.3. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order">29.1.5.2.4. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations">29.1.5.2.5. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class">29.1.5.2.6. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination">29.1.5.2.7. 
  Generic Function <CODE 
  class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name-methods">29.1.5.2.8. 
  Methods</A></SPAN></DT></DL></DIV>
<P>The reader generic functions which simply return information associated with 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s are presented together here in the format described in 
<A title="29.1.3.3.&nbsp;Introspection: Readers for class metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers">Section&nbsp;29.1.3.3, 
“Introspection: Readers for class metaobjects”</A>.</P>
<P>Each of the reader generic functions for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s has the same syntax, accepting one required argument 
called <EM class=replaceable><CODE>generic-function</CODE></EM>, which must be a 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>; otherwise, an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed. An <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is also <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> has not been initialized.</P>
<P>These generic functions can be called by the user or the implementation.</P>
<P>For any of these generic functions which returns a list, such lists will not 
be mutated by the implementation. The results are undefined if a portable 
program allows such a list to be mutated.</P><!--begin generic-function basic introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-name></A>29.1.5.2.1.&nbsp;Generic Function <A 
title="29.1.5.2.1.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-NAME" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name"><CODE 
class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.1.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-NAME" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name"><CODE 
class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the name of the generic function, or <A 
href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A> if the generic function has no name. This is the 
defaulted value of the <CODE class=constant>:NAME</CODE> initialization argument 
that was associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> during initialization or reinitialization. (See also <A 
title="29.1.5.4.1.&nbsp;Generic Function (SETF CLOS:GENERIC-FUNCTION-NAME)" 
href="http://clisp.cons.org/impnotes/mop-chap.html#setf-gf-name"><CODE 
class=code>(SETF CLOS:GENERIC-FUNCTION-NAME)</CODE></A>.)</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-methods></A>29.1.5.2.2.&nbsp;Generic Function <A 
title="29.1.5.2.2.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHODS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.2.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHODS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the set of methods currently connected to the generic function. This 
is a set of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s. This value is maintained by the generic functions <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
target=_top><CODE class=function>ADD-METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
target=_top><CODE class=function>REMOVE-METHOD</CODE></A>.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-lambda-list></A>29.1.5.2.3.&nbsp;Generic Function <A 
title="29.1.5.2.3.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-LAMBDA-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list"><CODE 
class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.3.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-LAMBDA-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list"><CODE 
class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> of the generic 
function. This is the defaulted value of the <CODE 
class=constant>:LAMBDA-LIST</CODE> initialization argument that was associated 
with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> during initialization or reinitialization. An <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if the <A 
title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> has yet to be 
supplied.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-argument-precedence-order></A>29.1.5.2.4.&nbsp;Generic 
Function <A 
title="29.1.5.2.4.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order"><CODE 
class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.4.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order"><CODE 
class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the argument precedence order of the generic function. This value is 
a list of symbols, a permutation of the required parameters in the <A 
title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> of the generic 
function. This is the defaulted value of the <CODE 
class=constant>:ARGUMENT-PRECEDENCE-ORDER</CODE> initialization argument that 
was associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> during initialization or reinitialization.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
target=_top><CODE class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if the <A 
title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> has not yet 
been supplied.</P></DIV></DIV><!--end generic-function basic introspection--><!--begin generic-function advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-declarations></A>29.1.5.2.5.&nbsp;Generic Function <A 
title="29.1.5.2.5.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-DECLARATIONS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations"><CODE 
class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.5.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-DECLARATIONS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations"><CODE 
class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a possibly empty list of the “<SPAN class=quote>declarations</SPAN>” 
of the generic function. The elements of this list are <A 
href="http://www.lisp.org/HyperSpec/Body/glo_d.html#declaration_specifier" 
target=_top>declaration specifier</A>s. This list is the defaulted value of the 
<CODE class=constant>:DECLARATIONS</CODE> initialization argument that was 
associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> during initialization or reinitialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-method-class></A>29.1.5.2.6.&nbsp;Generic Function <A 
title="29.1.5.2.6.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.6.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the default method class of the generic function. This class must be 
a subclass of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
class=classname>METHOD</CODE></A>. This is the defaulted value of the <CODE 
class=constant>:METHOD-CLASS</CODE> initialization argument that was associated 
with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> during initialization or reinitialization. </P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=gf-method-combination></A>29.1.5.2.7.&nbsp;Generic 
Function <A 
title="29.1.5.2.7.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-COMBINATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.5.2.7.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-COMBINATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A> <EM 
class=replaceable><CODE>generic-function</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the method combination of the generic function. This is a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
combination metaobject</A>. This is the defaulted value of the <CODE 
class=constant>:METHOD-COMBINATION</CODE> initialization argument that was 
associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> during initialization or reinitialization.</P></DIV><!--end generic-function advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=gf-name-methods></A>29.1.5.2.8.&nbsp;Methods</H5></DIV></DIV></DIV>
<DIV class=variablelist>
<P class=title><B>The specified methods for the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> reader generic functions</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.1.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-NAME" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.3.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-LAMBDA-LIST" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.4.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.5.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-DECLARATIONS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.6.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.7.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-COMBINATION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for these methods beyond that which is specified 
  for their respective generic functions.
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.2.2.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>The value returned by this method is maintained by <SPAN class=method><CODE 
  class=literal><A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A>(<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>)</CODE></SPAN> 
  and <SPAN class=method><CODE class=literal><A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A>(<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>)</CODE></SPAN>.</P></DD></DL></DIV></DIV><!--gf-name-methods--></DIV><!--mop-gf-readers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-gf-init></A>29.1.5.3.&nbsp;Initialization of Generic 
Functions</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-defgeneric">29.1.5.3.1. 
  Macro <CODE class=function>DEFGENERIC</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-invocation">29.1.5.3.2. 
  Generic Function Invocation Protocol</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-mo">29.1.5.3.3. 
  Initialization of generic function metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-mo-init-methods">29.1.5.3.3.1. 
    Methods</A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-gf-init-defgeneric></A>29.1.5.3.1.&nbsp;Macro <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A></H5></DIV></DIV></DIV>
<P>The evaluation or execution of a <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> form results in a call to the <A 
title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A> function. The arguments 
received by <A title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A> are derived from the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> form in a defined way. As with <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" target=_top><CODE 
class=function>DEFCLASS</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A>, the exact macro-expansion of the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> form is not defined, only the relationship 
between the arguments to the macro and the arguments received by <A 
title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A>.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The <EM class=replaceable><CODE>function-name</CODE></EM> argument to <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> becomes the first 
  argument to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>. This is the only positional 
  argument accepted by <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>; all other arguments are 
  keyword arguments.
  <LI>The <EM class=replaceable><CODE>lambda-list</CODE></EM> argument to <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> becomes the value of 
  the <CODE class=constant>:LAMBDA-LIST</CODE> keyword argument to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>.
  <LI>
  <P>For each of the options <CODE 
  class=constant>:ARGUMENT-PRECEDENCE-ORDER</CODE>, <CODE 
  class=constant>:DOCUMENTATION</CODE>, <CODE 
  class=constant>:GENERIC-FUNCTION-CLASS</CODE> and <CODE 
  class=constant>:METHOD-CLASS</CODE>, the value of the option becomes the value 
  of the keyword argument with the same name. If the option does not appear in 
  the macro form, the keyword argument does not appear in the resulting call to 
  <A title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If the option does not appear in the macro form, the keyword argument 
  appears in the resulting call to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>, with a default value: the 
  <EM class=replaceable><CODE>lambda list</CODE></EM> for <CODE 
  class=constant>:ARGUMENT-PRECEDENCE-ORDER</CODE>, <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> for <CODE class=constant>:DOCUMENTATION</CODE>, 
  the class <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> for 
  <CODE class=constant>:GENERIC-FUNCTION-CLASS</CODE>, the class <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE class=classname>STANDARD-METHOD</CODE></A> for <CODE 
  class=constant>:METHOD-CLASS</CODE>. This is needed to make the generic 
  function reflect the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> form.</P></DIV>
  <LI>
  <P>For the option <CODE class=constant>:DECLARE</CODE>, the list of “<SPAN 
  class=quote>declarations</SPAN>” becomes the value of the <CODE 
  class=constant>:DECLARATIONS</CODE> keyword argument. If the <CODE 
  class=constant>:DECLARE</CODE> option does not appear in the macro form, the 
  <CODE class=constant>:DECLARATIONS</CODE> keyword argument does not appear in 
  the call to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If the <CODE class=constant>:DECLARE</CODE> option does not appear in the 
  macro form, the <CODE class=constant>:DECLARATIONS</CODE> keyword argument 
  appears in the resulting call to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>, with a default value of <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. This is needed to make the generic function 
  reflect the <A href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> form. </P></DIV>
  <LI>
  <P>The handling of the <CODE class=constant>:METHOD-COMBINATION</CODE> option 
  is not specified.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>If the <CODE class=constant>:METHOD-COMBINATION</CODE> option does not 
  appear in the macro form, the <CODE class=constant>:METHOD-COMBINATION</CODE> 
  keyword argument still appears in the resulting call to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>, but in a position where it 
  can be overridden by user-defined initargs and default initargs. </P></DIV>
  <LI>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>The <CODE class=constant>:DECLARE</CODE> keyword is recognized as 
  equivalent to the <CODE class=constant>:DECLARATIONS</CODE> keyword, for 
  compatibility with <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A> in [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>]. If both <CODE class=constant>:DECLARE</CODE> 
  and <CODE class=constant>:DECLARATIONS</CODE> keyword arguments are specified, 
  an <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>Any other generic function options become the value of keyword arguments 
  with the same name. The value of the keyword argument is the tail of the 
  generic function option. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if any generic function option appears more 
  than once in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> form.</P>
  <P>The default initargs of the <EM 
  class=replaceable><CODE>generic-function-class</CODE></EM> are added at the 
  end of the list of arguments to pass to <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>. This is needed to make the 
  generic function reflect the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> form.</P></DIV>
  <LI>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P><A id=mop-defgeneric-user-options></A><B>User-defined options.&nbsp;</B>Any 
  other options become the value of keyword arguments with the same name. The 
  value of the keyword argument is the tail of the option. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if any option appears more than once in the 
  <A href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> 
form.</P></DIV></LI></UL></DIV>
<P>The result of the call to <A 
title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A> is returned as the result of 
evaluating or executing the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> form.</P></DIV><!--mop-gf-init-defgeneric-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-gf-invocation></A>29.1.5.3.2.&nbsp;Generic Function 
Invocation Protocol</H5></DIV></DIV></DIV>
<P>Associated with each generic function is its discriminating function. Each 
time the generic function is called, the discriminating function is called to 
provide the behavior of the generic function. The discriminating function 
receives the full set of arguments received by the generic function. It must 
lookup and execute the appropriate methods, and return the appropriate 
values.</P>
<P>The discriminating function is computed by the highest layer of the generic 
function invocation protocol, <A 
title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A>. Whenever a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> is initialized, reinitialized, or a method is added or 
removed, the discriminating function is recomputed. The new discriminating 
function is then stored with <A 
title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A>.</P>
<P>Discriminating functions call <A 
title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A> and <A 
title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> to 
compute the methods applicable to the generic functions arguments. Applicable 
methods are combined by <A 
title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> to produce an <STRONG 
class=first><EM class=firstterm>effective method</EM></STRONG>. Provisions are 
made to allow memoization of the method applicability and effective methods 
computations. (See the description of <A 
title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> for details.)</P>
<P>The body of method definitions are processed by <A 
title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A>. The result of this generic 
function is a <A href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" 
target=_top>lambda expression</A> which is processed by either <A 
href="http://www.lisp.org/HyperSpec/Body/fun_compile.html" target=_top><CODE 
class=function>COMPILE</CODE></A> or <A 
href="http://www.lisp.org/HyperSpec/Body/fun_compile-file.html" 
target=_top><CODE class=function>COMPILE-FILE</CODE></A> to produce a <STRONG 
class=first><EM class=firstterm>method function</EM></STRONG>. The arguments 
received by the method function are controlled by the <A 
href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
target=_top><CODE class=function>CALL-METHOD</CODE></A> forms appearing in the 
effective methods. By default, method functions accept two arguments: a list of 
arguments to the generic function, and a list of next methods. The list of next 
methods corresponds to the next methods argument to <A 
href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
target=_top><CODE class=function>CALL-METHOD</CODE></A>. If <A 
href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
target=_top><CODE class=function>CALL-METHOD</CODE></A> appears with additional 
arguments, these will be passed to the method functions as well; in these cases, 
<A title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> must have created the method 
lambdas to expect additional arguments.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>See <A 
title="The generic function CLOS:MAKE-METHOD-LAMBDA is not implemented" 
href="http://clisp.cons.org/impnotes/mop-chap.html#no-make-method-lambda">The 
generic function <CODE class=function>CLOS:MAKE-METHOD-LAMBDA</CODE> is not 
implemented</A>.</P>
<P>See <A title="Method function arguments" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-functions-args">Method 
function arguments</A>.</P></DIV></DIV><!--mop-gf-invocation-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-gf-init-mo></A>29.1.5.3.3.&nbsp;Initialization of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-mo-init-methods">29.1.5.3.3.1. 
  Methods</A></SPAN></DT></DL></DIV>
<P>A <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> can be created by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The initialization 
arguments establish the definition of the generic function. A <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> can be redefined by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. Some classes 
of <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> do not support redefinition; in these cases, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A>.</P>
<P>Initialization of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> must be done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> and allowing it to 
call <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>. 
Reinitialization of a generic-function metaobject must be done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. Portable 
programs must <SPAN class=strong><STRONG>not</STRONG></SPAN></P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> directly to 
  initialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A> directly to 
  initialize or reinitialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> to change the class 
  of any <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A> or to turn a non-generic-function object into a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>.</LI></UL></DIV>
<P>Since metaobject classes may not be redefined, no behavior is specified for 
the result of calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_efined-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-REDEFINED-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s. Since the class of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> may not be changed, no behavior is specified for the 
results of calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_ferent-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-DIFFERENT-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s.</P>
<P>During initialization or reinitialization, each initialization argument is 
checked for errors and then associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>. The value can then be accessed by calling the 
appropriate accessor as shown in <A 
title="Table&nbsp;29.4.&nbsp;Initialization arguments and accessors&#10;  for generic function metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-mo-initargs">Table&nbsp;29.4, 
“Initialization arguments and accessors for generic function 
metaobjects”</A>.</P>
<P>This section begins with a description of the error checking and processing 
of each initialization argument. This is followed by a table showing the generic 
functions that can be used to access the stored initialization arguments. The 
section ends with a set of restrictions on portable methods affecting <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> initialization and reinitialization.</P>
<P>In these descriptions, the phrase “<SPAN class=quote>this argument defaults 
to <EM class=replaceable><CODE>value</CODE></EM></SPAN>” means that when that 
initialization argument is not supplied, initialization or reinitialization is 
performed as if <EM class=replaceable><CODE>value</CODE></EM> had been supplied. 
For some initialization arguments this could be done by the use of default 
initialization arguments, but whether it is done this way is not specified. 
Implementations are free to define default initialization arguments for 
specified <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> classes. Portable programs are free to define default 
initialization arguments for portable subclasses of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A>.</P>
<P>Unless there is a specific note to the contrary, then during 
reinitialization, if an initialization argument is not supplied, the previously 
stored value is left unchanged.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>
  <P>The <CODE class=constant>:ARGUMENT-PRECEDENCE-ORDER</CODE> argument is a 
  list of symbols.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this argument appears but the <CODE 
  class=constant>:LAMBDA-LIST</CODE> argument does not appear. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A> or if this value is not a permutation of the 
  symbols from the required arguments part of the <CODE 
  class=constant>:LAMBDA-LIST</CODE> initialization argument.</P>
  <P>When the generic function is being initialized or reinitialized, and this 
  argument is not supplied, but the <CODE class=constant>:LAMBDA-LIST</CODE> 
  argument is supplied, this value defaults to the symbols from the required 
  arguments part of the <CODE class=constant>:LAMBDA-LIST</CODE> argument, in 
  the order they appear in that argument. If neither argument is supplied, 
  neither are initialized (see the description of <CODE 
  class=constant>:LAMBDA-LIST</CODE>.)</P>
  <LI>
  <P>The <CODE class=constant>:DECLARATIONS</CODE> argument is a list of <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_d.html#declaration_specifier" 
  target=_top>declaration specifier</A>s. </P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A> or if each of its elements is not a legal <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_d.html#declaration_specifier" 
  target=_top>declaration specifier</A>.</P>
  <P>When the generic function is being initialized, and this argument is not 
  supplied, it defaults to the empty list. </P>
  <LI>The <CODE class=constant>:DOCUMENTATION</CODE> argument is a <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_string.html" target=_top><CODE 
  class=classname>STRING</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if it is not. This argument default to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> during initialization.
  <LI>
  <P>The <CODE class=constant>:LAMBDA-LIST</CODE> argument is a <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a proper generic 
  function <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>.</P>
  <P>When the generic function is being initialized, and this argument is not 
  supplied, the generic function's <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> is not 
  initialized. The <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> will be 
  initialized later, either when the first method is added to the generic 
  function, or a later reinitialization of the generic function.</P>
  <LI>The <CODE class=constant>:METHOD-COMBINATION</CODE> argument is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
  combination metaobject</A>. 
  <LI>
  <P>The <CODE class=constant>:METHOD-CLASS</CODE> argument is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. </P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a subclass of the 
  class <A href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
  target=_top><CODE class=classname>METHOD</CODE></A>.</P>
  <P>When the generic function is being initialized, and this argument is not 
  supplied, it defaults to the class <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>. </P>
  <LI>
  <P>The <CODE class=constant>:NAME</CODE> argument is an object.</P>
  <P>If the generic function is being initialized, this argument defaults to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. </P></LI></UL></DIV>
<P>After the processing and defaulting of initialization arguments described 
above, the value of each initialization argument is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>. These values can then be accessed by calling the 
corresponding generic function. The correspondences are as follows: </P>
<DIV class=table><A id=gf-mo-initargs></A>
<P class=title><B>Table&nbsp;29.4.&nbsp;Initialization arguments and accessors 
for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s</B></P>
<DIV class=table-contents>
<TABLE 
summary="Initialization arguments and accessors&#10;  for generic function metaobjects" 
border=1>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Initialization Argument</TH>
    <TH align=middle>Generic Function</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><CODE class=constant>:ARGUMENT-PRECEDENCE-ORDER</CODE></TD>
    <TD align=middle><A 
      title="29.1.5.2.4.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order"><CODE 
      class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DECLARATIONS</CODE></TD>
    <TD align=middle><A 
      title="29.1.5.2.5.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-DECLARATIONS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-declarations"><CODE 
      class=function>CLOS:GENERIC-FUNCTION-DECLARATIONS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DOCUMENTATION</CODE></TD>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_doc_umentationcp.html" 
      target=_top><CODE class=function>DOCUMENTATION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:LAMBDA-LIST</CODE></TD>
    <TD align=middle><A 
      title="29.1.5.2.3.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-LAMBDA-LIST" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-lambda-list"><CODE 
      class=function>CLOS:GENERIC-FUNCTION-LAMBDA-LIST</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:METHOD-COMBINATION</CODE></TD>
    <TD align=middle><A 
      title="29.1.5.2.7.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-COMBINATION" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-combination"><CODE 
      class=function>CLOS:GENERIC-FUNCTION-METHOD-COMBINATION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:METHOD-CLASS</CODE></TD>
    <TD align=middle><A 
      title="29.1.5.2.6.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-CLASS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class"><CODE 
      class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:NAME</CODE></TD>
    <TD align=middle><A 
      title="29.1.5.2.1.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-NAME" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#gf-name"><CODE 
      class=function>CLOS:GENERIC-FUNCTION-NAME</CODE></A></TD></TR></TBODY></TABLE></DIV></DIV>
<P><BR class=table-break></P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=gf-mo-init-methods></A>29.1.5.3.3.1.&nbsp;Methods</H6></DIV></DIV></DIV>
<P>It is not specified which methods provide the initialization and 
reinitialization behavior described above. Instead, the information needed to 
allow portable programs to specialize this behavior is presented as a set of 
restrictions on the methods a portable program can define. The model is that 
portable initialization methods have access to the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> when either all or none of the specified initialization 
has taken effect.</P>
<P>These restrictions govern the methods that a portable program can define on 
the generic functions <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>, and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A>. These 
restrictions apply only to methods on these generic functions for which the 
first specializer is a subclass of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A>. Other portable 
methods on these generic functions are not affected by these restrictions.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>Portable programs must not define methods on <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A>.
  <LI>
  <P>For <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> and <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>: </P>
  <DIV class=itemizedlist>
  <UL type=circle>
    <LI>Portable programs must not define primary methods. 
    <LI>Portable programs may define around-methods, but these must be 
    extending, not overriding methods.
    <LI>Portable before-methods must assume that when they are run, none of the 
    initialization behavior described above has been completed.
    <LI>Portable after-methods must assume that when they are run, all of the 
    initialization behavior described above has been 
  completed.</LI></UL></DIV></LI></UL></DIV>
<P>The results are undefined if any of these restrictions are 
violated.</P></DIV><!--gf-mo-init-methods--></DIV><!--mop-gf-init-mo--></DIV><!--mop-gf-init-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-gf-customize></A>29.1.5.4.&nbsp;Customization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-gf-name">29.1.5.4.1. 
  Generic Function <CODE class=code>(SETF 
  CLOS:GENERIC-FUNCTION-NAME)</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf">29.1.5.4.2. 
  Generic Function <CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC">29.1.5.4.3. 
  Generic Function <CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-add-method">29.1.5.4.4. 
  Generic Function <CODE class=function>ADD-METHOD</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-remove-method">29.1.5.4.5. 
  Generic Function <CODE class=function>REMOVE-METHOD</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods">29.1.5.4.6. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC">29.1.5.4.7. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method">29.1.5.4.8. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function">29.1.5.4.9. 
  Function <CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda">29.1.5.4.10. 
  Generic Function <CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function">29.1.5.4.11. 
  Generic Function <CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A></SPAN></DT></DL></DIV><!--begin generic-function basic customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=setf-gf-name></A>29.1.5.4.1.&nbsp;Generic Function <A 
title="29.1.5.4.1.&nbsp;Generic Function (SETF CLOS:GENERIC-FUNCTION-NAME)" 
href="http://clisp.cons.org/impnotes/mop-chap.html#setf-gf-name"><CODE 
class=code>(SETF CLOS:GENERIC-FUNCTION-NAME)</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.1.&nbsp;Generic Function (SETF CLOS:GENERIC-FUNCTION-NAME)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-gf-name"><CODE 
  class=code>(SETF CLOS:GENERIC-FUNCTION-NAME)</CODE></A> <EM 
  class=replaceable><CODE>new-name</CODE></EM> <EM 
  class=replaceable><CODE>generic-function</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>new-name</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/glo_f.html#function_name" 
    target=_top>function name</A> or <A 
    href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
    class=constant>NIL</CODE></A>. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This function returns its <EM class=replaceable><CODE>new-name</CODE></EM> 
  argument. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function changes the name of <EM 
  class=replaceable><CODE>generic-function</CODE></EM> to <EM 
  class=replaceable><CODE>new-name</CODE></EM>. This value is usually a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_f.html#function_name" 
  target=_top>function name</A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>, if the generic function is to have no name.</P>
  <P>This function works by calling <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> with <EM 
  class=replaceable><CODE>generic-function</CODE></EM> as its first argument, 
  the symbol <CODE class=constant>:NAME</CODE> as its second argument and <EM 
  class=replaceable><CODE>new-name</CODE></EM> as its third argument. 
</P></DD></DL></DIV></DIV><!--setf-gf-name-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=ensure-gf></A>29.1.5.4.2.&nbsp;Generic Function <A 
title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A> <EM 
  class=replaceable><CODE>function-name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>function-name</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/glo_f.html#function_name" 
    target=_top>function name</A>
    <DT><SPAN class=term>keyword arguments</SPAN>
    <DD>Some of the keyword arguments accepted by this function are actually 
    processed by <A 
    title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
    class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A>, others 
    are processed during initialization of the <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A> (as described in <A 
    title="29.1.5.3.3.&nbsp;Initialization of generic function metaobjects" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-mo">Section&nbsp;29.1.5.3.3, 
    “Initialization of generic function metaobjects”</A>). </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function is called to define a globally named generic function or to 
  specify or modify options and declarations that pertain to a globally named 
  generic function as a whole. It can be called by the user or the 
  implementation.</P>
  <P>It is the functional equivalent of <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A>, and is called by the 
  expansion of the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> and <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> macros. </P>
  <P>The behavior of this function is actually implemented by the generic 
  function <A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A>. When <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A> is called, it immediately 
  calls <A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> and returns 
  that result as its own.</P>
  <P>The first argument to <A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> is computed 
  as follows: </P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI>If <EM class=replaceable><CODE>function-name</CODE></EM> names a 
    non-generic function, a macro, or a special form, an <A 
    href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
    target=_top><CODE class=classname>ERROR</CODE></A> is <A 
    href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
    class=function>SIGNAL</CODE></A>ed. 
    <LI>If <EM class=replaceable><CODE>function-name</CODE></EM> names a generic 
    function, that <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A> is used.
    <LI>Otherwise, <A href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" 
    target=_top><CODE class=constant>NIL</CODE></A> is used. </LI></UL></DIV>
  <P>The second argument is <EM 
  class=replaceable><CODE>function-name</CODE></EM>. The remaining arguments are 
  the complete set of keyword arguments received by <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>. </P></DD></DL></DIV></DIV><!--ensure-gf-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=ensure-gf-UC></A>29.1.5.4.3.&nbsp;Generic Function <A 
title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>function-name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE 
  class=constant>:ARGUMENT-PRECEDENCE-ORDER</CODE> <CODE 
  class=constant>:DECLARATIONS</CODE> <CODE class=constant>:DOCUMENTATION</CODE> 
  <CODE class=constant>:GENERIC-FUNCTION-CLASS</CODE> <CODE 
  class=constant>:LAMBDA-LIST</CODE> <CODE class=constant>:METHOD-CLASS</CODE> 
  <CODE class=constant>:METHOD-COMBINATION</CODE> <CODE 
  class=constant>:NAME</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A> or <A 
    href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
    class=constant>NIL</CODE></A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>function-name</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/glo_f.html#function_name" 
    target=_top>function name</A>
    <DT><SPAN class=term><CODE 
    class=constant>:GENERIC-FUNCTION-CLASS</CODE></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> or a class name. If it is not supplied, it defaults to the 
    class named <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>. If a 
    class name is supplied, it is interpreted as the class with that name. If a 
    class name is supplied, but there is no such class, an <A 
    href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
    target=_top><CODE class=classname>ERROR</CODE></A> is <A 
    href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
    class=function>SIGNAL</CODE></A>ed. 
    <DT><SPAN class=term>additional keyword arguments</SPAN>
    <DD>
    <P>see <A 
    title="29.1.5.3.3.&nbsp;Initialization of generic function metaobjects" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-mo">Section&nbsp;29.1.5.3.3, 
    “Initialization of generic function metaobjects”</A>.</P>
    <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
    <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
    class=command>CLISP</STRONG></SPAN></H3>
    <P>The <CODE class=constant>:DECLARE</CODE> keyword is recognized as 
    equivalent to the <CODE class=constant>:DECLARATIONS</CODE> keyword, for 
    compatibility with <A 
    title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
    class=function>ENSURE-GENERIC-FUNCTION</CODE></A> in [<A title="[ANSI CL]" 
    href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
    class=abbrev>ANSI CL</ABBR></A>].</P></DIV></DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>The generic function <A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> is called 
  to define or modify the definition of a globally named generic function. It is 
  called by the <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A> function. It can also be 
  called directly.</P>
  <P>The first step performed by this generic function is to compute the set of 
  initialization arguments which will be used to create or reinitialize the 
  globally named generic function. These initialization arguments are computed 
  from the full set of keyword arguments received by this generic function as 
  follows: </P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI>The <CODE class=constant>:GENERIC-FUNCTION-CLASS</CODE> argument is not 
    included in the initialization arguments. 
    <LI>If the <CODE class=constant>:METHOD-CLASS</CODE> argument was received 
    by this generic function, it is converted into a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>. This is done by looking up the class name with <A 
    href="http://www.lisp.org/HyperSpec/Body/acc_find-class.html" 
    target=_top><CODE class=function>FIND-CLASS</CODE></A>. If there is no such 
    class, an <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
    target=_top><CODE class=classname>ERROR</CODE></A> is <A 
    href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
    class=function>SIGNAL</CODE></A>ed.
    <LI>All other keyword arguments are included directly in the initialization 
    arguments.</LI></UL></DIV>
  <P>If the <EM class=replaceable><CODE>generic-function</CODE></EM> argument is 
  <A href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>, an instance of the class specified by the <CODE 
  class=constant>:GENERIC-FUNCTION-CLASS</CODE> argument is created by calling 
  <A href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> with the previously 
  computed initialization arguments. The function name <EM 
  class=replaceable><CODE>function-name</CODE></EM> is set to name the generic 
  function. The newly created <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A> is returned. </P>
  <P>If the class of the <EM 
  class=replaceable><CODE>generic-function</CODE></EM> argument is not the same 
  as the class specified by the <CODE 
  class=constant>:GENERIC-FUNCTION-CLASS</CODE> argument, an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>The description of <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A> in [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] specifies that in this case, <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> is called if the 
  class of the <EM class=replaceable><CODE>generic-function</CODE></EM> argument 
  and the class specified by the <CODE 
  class=constant>:GENERIC-FUNCTION-CLASS</CODE> argument are compatible. Given 
  the description of <A 
  title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>, this also applies to the <A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> function. 
  <A href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></A>'s implementation calls <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> always, and leaves it 
  to the <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> function to signal an 
  error if needed.</P></DIV>
  <P>Otherwise the generic function <EM 
  class=replaceable><CODE>generic-function</CODE></EM> is redefined by calling 
  the <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> generic 
  function with <EM class=replaceable><CODE>generic-function</CODE></EM> and the 
  initialization arguments. The <EM 
  class=replaceable><CODE>generic-function</CODE></EM> argument is then 
  returned. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_generic-function.html" 
  target=_top><CODE class=classname>GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>function-name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE 
  class=constant>:GENERIC-FUNCTION-CLASS</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function in the case 
  where <EM class=replaceable><CODE>function-name</CODE></EM> names an existing 
  generic function.</P>
  <P>This method can be overridden.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_null.html" target=_top><CODE 
  class=classname>NULL</CODE></A>) <EM 
  class=replaceable><CODE>function-name</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;KEY</CODE></A> <CODE 
  class=constant>:GENERIC-FUNCTION-CLASS</CODE> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;ALLOW-OTHER-KEYS</CODE></A>)</CODE></SPAN></SPAN>
  <DD>This method implements the behavior of the generic function in the case 
  where <EM class=replaceable><CODE>function-name</CODE></EM> names no function, 
  generic function, macro or special form. </DD></DL></DIV></DIV><!--ensure-gf-UC-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-add-method></A>29.1.5.4.4.&nbsp;Generic Function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
target=_top><CODE class=function>ADD-METHOD</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>method</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>method</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The <EM class=replaceable><CODE>generic-function</CODE></EM> argument is 
  returned. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function associates an unattached method with a generic 
  function.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if the <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> of the 
  method is not congruent with the <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> of the 
  generic function.</P>
  <P>An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if the method is already associated with 
  some other generic function.</P>
  <P>If the given method agrees with an existing method of the generic function 
  on parameter specializers and qualifiers, the existing method is removed by 
  calling <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> before the new 
  method is added. See the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_7-6-3.html" target=_top>7.6.3 
  “<SPAN class=quote>Agreement on Parameter Specializers and 
  Qualifiers</SPAN>”</A> for a definition of agreement in this context.</P>
  <P>Associating the method with the generic function then proceeds in four 
  steps:</P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI>add <EM class=replaceable><CODE>method</CODE></EM> to the set returned 
    by <A 
    title="29.1.5.2.2.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHODS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods"><CODE 
    class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A> and arrange for <A 
    title="29.1.6.2.4.&nbsp;Generic Function CLOS:METHOD-GENERIC-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf"><CODE 
    class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A> to return <EM 
    class=replaceable><CODE>generic-function</CODE></EM>; 
    <LI>call <A title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
    class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> for each of the method's 
    specializers;
    <LI>call <A 
    title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
    class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> and install 
    its result with <A 
    title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
    class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A>; and 
    <LI>update the dependents of the generic function. </LI></OL></DIV>
  <P>The generic function <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A> can be called by the 
  user or the implementation.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for this method beyond that which is specified 
  for the generic function.
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
  class=classname>METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>This method is specified by [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>]. </DD></DL></DIV></DIV><!--add-method-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-remove-method></A>29.1.5.4.5.&nbsp;Generic Function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
target=_top><CODE class=function>REMOVE-METHOD</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>method</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>method</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The <EM class=replaceable><CODE>generic-function</CODE></EM> argument is 
  returned. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function breaks the association between a generic function and 
  one of its methods.</P>
  <P>No <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if the method is not among the methods of 
  the generic function.</P>
  <P>Breaking the association between the method and the generic function 
  proceeds in four steps:</P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI>remove <EM class=replaceable><CODE>method</CODE></EM> from the set 
    returned by <A 
    title="29.1.5.2.2.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHODS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#gf-methods"><CODE 
    class=function>CLOS:GENERIC-FUNCTION-METHODS</CODE></A> and arrange for <A 
    title="29.1.6.2.4.&nbsp;Generic Function CLOS:METHOD-GENERIC-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf"><CODE 
    class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A> to return <A 
    href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
    class=constant>NIL</CODE></A>; 
    <LI>call <A 
    title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
    class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> for each of the method's 
    specializers;
    <LI>call <A 
    title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
    class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> and install 
    its result with <A 
    title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
    class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A>; and
    <LI>update the dependents of the generic function. </LI></OL></DIV>
  <P>The generic function <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> can be called by the 
  user or the implementation. </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for this method beyond that which is specified 
  for the generic function.
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
  class=classname>METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>This method is specified by [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>]. </DD></DL></DIV></DIV><!--mop-remove-method--><!--end generic-function basic customization--><!--begin generic-function advanced customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-applicable-methods></A>29.1.5.4.6.&nbsp;Generic 
Function <A 
title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>arguments</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM 
class=replaceable><CODE>arguments</CODE></EM></SPAN>
    <DD>a list of objects.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns a possibly empty list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function determines the method applicability of a generic 
  function given a list of required arguments. The returned list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s is sorted by precedence order with the most specific method 
  appearing first. If no methods are applicable to the supplied arguments the 
  empty list is returned.</P>
  <P>When a generic function is invoked, the discriminating function must 
  determine the ordered list of methods applicable to the arguments. Depending 
  on the generic function and the arguments, this is done in one of three ways: 
  using a memoized value; calling <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A>; or 
  calling <A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A>. (Refer to the 
  description of <A 
  title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> for the details 
  of this process.)</P>
  <P>The <EM class=replaceable><CODE>arguments</CODE></EM> argument is permitted 
  to contain more elements than the generic function accepts required arguments; 
  in these cases the extra arguments will be ignored. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if <EM 
  class=replaceable><CODE>arguments</CODE></EM> contains fewer elements than the 
  generic function accepts required arguments.</P>
  <P>The list returned by this function will not be mutated by the 
  implementation. The results are undefined if a portable program mutates the 
  list returned by this function.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>arguments</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> if any method of the generic function has a 
  specializer which is neither a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> nor an <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializer metaobject.</P>
  <P>Otherwise, this method computes the sorted list of applicable methods 
  according to the rules described in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>] section <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_7-6-6.html" target=_top>7.6.6 
  “<SPAN class=quote>Method Selection and Combination</SPAN>”</A></P>
  <P>This method can be overridden. Because of the consistency requirements 
  between this generic function and <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A>, doing 
  so may require also overriding <SPAN class=method><CODE class=literal><A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> (<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
  class=classname>T</CODE></A>)</CODE></SPAN>. </P></DD></DL></DIV>
<P><A id=mop-cam-remarks></A><B>Remarks.&nbsp;</B> <!--sds-->See also the [<A 
title="[ANSI CL]" 
href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
class=abbrev>ANSI CL</ABBR></A>] function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_com_able-methods.html" 
target=_top><CODE class=function>COMPUTE-APPLICABLE-METHODS</CODE></A>. 
</P></DIV><!--compute-applicable-methods-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-applicable-methods-UC></A>29.1.5.4.7.&nbsp;Generic 
Function <A 
title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>classes</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>classes</CODE></EM></SPAN>
    <DD>a list of <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>s. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns two values. The first is a possibly empty 
  list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s. The second is either true or false.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to attempt to determine the method 
  applicability of a generic function given only the classes of the required 
  arguments.</P>
  <P>If it is possible to completely determine the ordered list of applicable 
  methods based only on the supplied classes, this generic function returns that 
  list as its <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#primary_value" 
  target=_top>primary value</A> and true as its second value. The returned list 
  of <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s is sorted by precedence order, the most specific method coming 
  first. If no methods are applicable to arguments with the specified classes, 
  the empty list and true are returned.</P>
  <P>If it is not possible to completely determine the ordered list of 
  applicable methods based only on the supplied classes, this generic function 
  returns an unspecified <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#primary_value" 
  target=_top>primary value</A> and false as its second value.</P>
  <P>When a generic function is invoked, the discriminating function must 
  determine the ordered list of methods applicable to the arguments. Depending 
  on the generic function and the arguments, this is done in one of three ways: 
  using a memoized value; calling <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A>; or 
  calling <A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A>. (Refer to the 
  description of <A 
  title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> for the details 
  of this process.) </P>
  <P>The following consistency relationship between <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> and <A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A> must be maintained: 
  for any given generic function and set of arguments, if <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> 
  returns a second value of true, the <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#primary_value" 
  target=_top>primary value</A> must be equal to the value that would be 
  returned by a corresponding call to <A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A>. The results are 
  undefined if a portable method on either of these generic functions causes 
  this consistency to be violated.</P>
  <P>The list returned by this function will not be mutated by the 
  implementation. The results are undefined if a portable program mutates the 
  list returned by this function.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>classes</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>If any method of the generic function has a specializer which is neither a 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> nor an <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializer metaobject, this method <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>.</P>
  <P>In cases where the generic function has no methods with <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializers, or has no methods with <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializers that could be applicable to 
  arguments of the supplied classes, this method returns the ordered list of 
  applicable methods as its first value and true as its second value.</P>
  <P>Otherwise this method returns an unspecified <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#primary_value" 
  target=_top>primary value</A> and false as its second value.</P>
  <P>This method can be overridden. Because of the consistency requirements 
  between this generic function and <A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A>, doing so may 
  require also overriding <SPAN class=method><CODE class=literal><A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A> (<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
  class=classname>T</CODE></A>) </CODE></SPAN>. </P></DD></DL></DIV>
<DIV class=simplesect lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A id=mop-cam-UC-remarks></A>Remarks</H6></DIV></DIV></DIV>
<P>This generic function exists to allow user extensions which alter method 
lookup rules, but which base the new rules only on the classes of the required 
arguments, to take advantage of the class-based method lookup memoization found 
in many implementations. (There is of course no requirement for an 
implementation to provide this optimization.)</P>
<P>Such an extension can be implemented by two methods, one on this generic 
function and one on <A 
title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A>. Whenever the user 
extension is in effect, the first method will return a second value of true. 
This should allow the implementation to absorb these cases into its own 
memoization scheme.</P>
<P>To get appropriate performance, other kinds of extensions may require methods 
on <A 
title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> which implement 
their own memoization scheme.</P></DIV></DIV><!--compute-applicable-methods-UC-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=compute-effective-method></A>29.1.5.4.8.&nbsp;Generic 
Function <A 
title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>method-combination</CODE></EM> <EM 
  class=replaceable><CODE>methods</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>method-combination</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
    combination metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>methods</CODE></EM></SPAN>
    <DD>a list of <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>s.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns two values. The first is an effective 
  method, the second is a list of effective method options.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to determine the effective method from a 
  sorted list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s.</P>
  <P>An effective method is a form that describes how the applicable methods are 
  to be combined. Inside of effective method forms are <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A> forms which indicate 
  that a particular method is to be called. The arguments to the <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A> form indicate exactly 
  how the method function of the method should be called. (See <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> for more details about 
  method functions.)</P>
  <P>An effective method option has the same interpretation and syntax as either 
  the <CODE class=constant>:ARGUMENTS</CODE> or the <CODE 
  class=constant>:GENERIC-FUNCTION</CODE> option in the long form of <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_define-me_-combination.html" 
  target=_top><CODE class=function>DEFINE-METHOD-COMBINATION</CODE></A>.</P>
  <P>More information about the form and interpretation of effective methods and 
  effective method options can be found under the description of the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_define-me_-combination.html" 
  target=_top><CODE class=function>DEFINE-METHOD-COMBINATION</CODE></A> macro in 
  the <A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
  target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> 
  specification.</P>
  <P>This generic function can be called by the user or the implementation. It 
  is called by discriminating functions whenever a sorted list of applicable 
  methods must be converted to an effective method.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>method-combination</CODE></EM> <EM 
  class=replaceable><CODE>methods</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method computes the effective method according to the rules of the 
  method combination type implemented by <EM 
  class=replaceable><CODE>method-combination</CODE></EM>.</P>
  <P>This method can be overridden.</P></DD></DL></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The second return value may contain only one <CODE 
class=constant>:ARGUMENTS</CODE> option and only one <CODE 
class=constant>:GENERIC-FUNCTION</CODE> option. When overriding a <A 
title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> method, before adding an 
<CODE class=constant>:ARGUMENTS</CODE> or <CODE 
class=constant>:GENERIC-FUNCTION</CODE> option, you therefore need to check 
whether it this option is already present.</P></DIV></DIV><!--compute-effective-method-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=compute-effective-method-as-function></A>29.1.5.4.9.&nbsp;Function <A 
title="29.1.5.4.9.&nbsp;Function CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A></H5></DIV></DIV></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P></P></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.9.&nbsp;Function CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>methods</CODE></EM> <EM 
  class=replaceable><CODE>arguments</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>methods</CODE></EM></SPAN>
    <DD>a list of <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>s.
    <DT><SPAN class=term><EM 
class=replaceable><CODE>arguments</CODE></EM></SPAN>
    <DD>a list of arguments. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This function returns the effective method as a function, accepting any 
  set of arguments for which all of the given methods are applicable.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function is called to determine the effective method from a sorted 
  list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s, and convert it to a function. The <EM 
  class=replaceable><CODE>arguments</CODE></EM> are a set of arguments to which 
  the methods are applicable, and are used solely for error message 
purposes.</P>
  <P>This function calls <A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> using the <EM 
  class=replaceable><CODE>generic-function</CODE></EM>'s method combination, 
  wraps local macro definitions for <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A> and <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>MAKE-METHOD</CODE></A> around it, handles the 
  <CODE class=constant>:ARGUMENTS</CODE> and <CODE 
  class=constant>:GENERIC-FUNCTION</CODE> options, and compiles the resulting 
  form to a function.</P></DD></DL></DIV></DIV><!--compute-effective-method-as-function-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=make-method-lambda></A>29.1.5.4.10.&nbsp;Generic Function 
<A title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>method</CODE></EM> <EM 
  class=replaceable><CODE>lambda-expression</CODE></EM> <EM 
  class=replaceable><CODE><A 
  href="http://www.lisp.org/HyperSpec/sec_3-1-1-4.html" 
  target=_top>environment</A></CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>method</CODE></EM></SPAN>
    <DD>a (possibly uninitialized) <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>. <!--change to uninitialized?????-->
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>lambda-expression</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" 
    target=_top>lambda expression</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE><A 
    href="http://www.lisp.org/HyperSpec/sec_3-1-1-4.html" 
    target=_top>environment</A></CODE></EM></SPAN>
    <DD>the same as the <A 
    href="http://www.lisp.org/HyperSpec/Body/sec_3-4-4.html" target=_top><CODE 
    class=literal>&amp;ENVIRONMENT</CODE></A> argument to macro expansion 
    functions.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns two values. The first is a <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" target=_top>lambda 
  expression</A>, the second is a list of initialization arguments and values.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to produce a <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" target=_top>lambda 
  expression</A> which can itself be used to produce a method function for a 
  method and generic function with the specified classes. The generic function 
  and method the method function will be used with are not required to be the 
  given ones. Moreover, the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A> may be uninitialized.</P>
  <P>Either the function <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_compile.html" target=_top><CODE 
  class=function>COMPILE</CODE></A>, the special form <A 
  href="http://www.lisp.org/HyperSpec/Body/speope_function.html" 
  target=_top><CODE class=function>FUNCTION</CODE></A> or the function <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_coerce.html" target=_top><CODE 
  class=function>COERCE</CODE></A> must be used to convert the <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" target=_top>lambda 
  expression</A> a method function. The method function itself can be applied to 
  arguments with <A href="http://www.lisp.org/HyperSpec/Body/fun_apply.html" 
  target=_top><CODE class=function>APPLY</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_funcall.html" target=_top><CODE 
  class=function>FUNCALL</CODE></A>.</P>
  <P>When a method is actually called by an effective method, its first argument 
  will be a list of the arguments to the generic function. Its remaining 
  arguments will be all but the first argument passed to <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A>. By default, all 
  method functions must accept two arguments: the list of arguments to the 
  generic function and the list of next methods.</P>
  <P>For a given generic function and method class, the applicable methods on <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> and <A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> must be consistent in 
  the following way: each use of <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A> returned by the method 
  on <A title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> must have the same 
  number of arguments, and the method lambda returned by the method on <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> must accept a corresponding 
  number of arguments.</P>
  <P>Note that the system-supplied implementation of <A 
  href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
  target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> is not required 
  to handle extra arguments to the method function. Users who define additional 
  arguments to the method function must either redefine or forego <A 
  href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
  target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A>. (See the example 
  below.)</P>
  <P>When the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A> is created with <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>, the method function 
  must be the value of the <CODE class=constant>:FUNCTION</CODE> initialization 
  argument. The additional initialization arguments, returned as the second 
  value of this generic function, must also be passed in this call to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>) <EM 
  class=replaceable><CODE>lambda-expression</CODE></EM> <EM 
  class=replaceable><CODE><A 
  href="http://www.lisp.org/HyperSpec/sec_3-1-1-4.html" 
  target=_top>environment</A></CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>This method returns a method lambda which accepts two arguments, the list 
  of arguments to the generic function, and the list of next methods. What 
  initialization arguments may be returned in the second value are 
  unspecified.</P>
  <P>This method can be overridden.</P></DD></DL></DIV>
<DIV class=informalexample>
<P>This example shows how to define a kind of method which, from within the body 
of the method, has access to the actual <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> for the method. This simplified code overrides whatever method 
combination is specified for the generic function, implementing a simple method 
combination supporting only primary methods, <A 
href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/locfun_next-method-p.html" 
target=_top><CODE class=function>NEXT-METHOD-P</CODE></A>. (In addition, its a 
simplified version of <A 
href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> which does no error 
checking.)</P>
<P>Notice that the extra lexical function bindings get wrapped around the body 
before <A href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> is called. In this 
way, the user's definition of <A 
href="http://www.lisp.org/HyperSpec/Body/locfun_call-next-method.html" 
target=_top><CODE class=function>CALL-NEXT-METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/locfun_next-method-p.html" 
target=_top><CODE class=function>NEXT-METHOD-P</CODE></A> are sure to override 
the system's definitions.</P><PRE class=programlisting>(defclass my-generic-function (standard-generic-function)
  ()
  (:default-initargs :method-class (find-class 'my-method)))

(defclass my-method (standard-method) ())

(defmethod make-method-lambda ((gf my-generic-function)
                               (method my-method)
                               lambda-expression
                               environment)
  (declare (ignore environment))
  `(lambda (args next-methods this-method)
     (,(call-next-method gf method
         `(lambda ,(cadr lambda-expression)
            (flet ((this-method () this-method)
                   (call-next-method (<A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;REST</CODE></A> cnm-args)
                     (funcall (method-function (car next-methods))
                              (or cnm-args args)
                              (cdr next-methods)
                              (car next-methods)))
                   (next-method-p ()
                     (not (null next-methods))))
              ,@(cddr lambda-expression)))
          environment)
       args next-methods)))

(defmethod compute-effective-method ((gf my-generic-function)
                                     method-combination
                                     methods)
  `(call-method ,(car methods) ,(cdr methods) ,(car methods)))
</PRE></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P><A id=no-make-method-lambda></A><B>The generic function <A 
title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> is not 
implemented.&nbsp;</B>Its specification is misdesigned: it mixes <A 
href="http://www.lisp.org/HyperSpec/Body/glo_c.html#compile_time" 
target=_top>compile time</A> and <A 
href="http://www.lisp.org/HyperSpec/Body/glo_e.html#execution_time" 
target=_top>execution time</A> behaviour. The essential problem is: where could 
the generic-function argument come from? </P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>If a <A href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" 
  target=_top><CODE class=function>DEFMETHOD</CODE></A> form occurs in a source 
  file, is <A title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> then called at compile time 
  or at load time? If it was called at compile time, there's no possible value 
  for the first argument, since the class of the generic function to which the 
  method will belong is not known until load time. If it was called at load 
  time, it would mean that the method's source code could only be compiled at 
  load time, not earlier - which defeats the purpose of <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_compile-file.html" 
  target=_top><CODE class=function>COMPILE-FILE</CODE></A>
  <LI>When a method is removed from a generic function using <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> and then added 
  through <A href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A> to a different generic 
  function, possibly belonging to a different generic function class, would <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> then be called again or not? 
  If no, then <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A>'s first argument is useless. 
  If yes, then the source code of every method would have to be present at 
  runtime, and its lexical environment as well. </LI></UL></DIV>
<P><A id=method-functions-args></A><B>Method function arguments.&nbsp;</B></P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI><A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A> always expect exactly 
  two arguments: the method and a list of next methods. 
  <LI>Method functions always expect exactly two arguments: the list of 
  arguments passed to the generic function, and the list of next methods. 
</LI></UL></DIV></DIV></DIV><!--make-method-lambda-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=compute-discriminating-function></A>29.1.5.4.11.&nbsp;Generic Function <A 
title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is a function.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to determine the discriminating function 
  for a generic function. When a generic function is called, the <STRONG 
  class=first><EM class=firstterm>installed</EM></STRONG> discriminating 
  function is called with the full set of arguments received by the generic 
  function, and must implement the behavior of calling the generic function: 
  determining the ordered set of applicable methods, determining the effective 
  method, and running the effective method.</P>
  <P>To determine the ordered set of applicable methods, the discriminating 
  function first calls <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A>. If <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> 
  returns a second value of false, the discriminating function then calls <A 
  title="29.1.5.4.6.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS</CODE></A>. </P>
  <P>When <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> 
  returns a second value of true, the discriminating function is permitted to 
  memoize the <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#primary_value" 
  target=_top>primary value</A> as follows. The discriminating function may 
  reuse the list of applicable methods without calling <A 
  title="29.1.5.4.7.&nbsp;Generic Function CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-applicable-methods-UC"><CODE 
  class=function>CLOS:COMPUTE-APPLICABLE-METHODS-USING-CLASSES</CODE></A> again 
  provided that: </P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI>the generic function is being called again with required arguments which 
    are instances of the same classes, 
    <LI>the generic function has not been reinitialized, 
    <LI>no method has been added to or removed from the generic function,
    <LI>for all the specializers of all the generic function's methods which are 
    classes, their class precedence lists have not changed, and
    <LI>for any such memoized value, the class precedence list of the class of 
    each of the required arguments has not changed. </LI></OL></DIV>
  <P>Determination of the effective method is done by calling <A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A>. When the effective 
  method is run, each method's function is called, and receives as arguments: 
  </P>
  <DIV class=orderedlist>
  <OL type=i>
    <LI>a list of the arguments to the generic function, 
    <LI>whatever other arguments are specified in the <A 
    href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
    target=_top><CODE class=function>CALL-METHOD</CODE></A> form indicating that 
    the method should be called. </LI></OL></DIV>
  <P>(See <A title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> for more information about 
  how method functions are called.)</P>
  <P>The generic function <A 
  title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> is called, and 
  its result installed, by <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A>, <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A>, <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> and <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>. 
</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE 
  class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method can be overridden.</P></DD></DL></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>Overriding methods can make use of the function <A 
title="29.1.5.4.9.&nbsp;Function CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A>. It is more 
convenient to call <A 
title="29.1.5.4.9.&nbsp;Function CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A> than <A 
title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> because the in the 
latter case one needs a lot of “<SPAN class=quote>glue code</SPAN>” for 
implementing the local macros <A 
href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
target=_top><CODE class=function>CALL-METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
target=_top><CODE class=function>MAKE-METHOD</CODE></A>, and this glue code is 
implementation dependent because it needs</P>
<DIV class=orderedlist>
<OL type=1>
  <LI>to retrieve the declarations list stored in the method-combination object 
  and
  <LI>to handle implementation dependent options that are returned as second 
  value from <A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A>. 
</LI></OL></DIV></DIV></DIV><!--compute-discriminating-function--><!--end generic-function advanced customization--></DIV><!--mop-gf-customize--></DIV><!--mop-gf-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-meth></A>29.1.6.&nbsp;Methods</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-inheritance">29.1.6.1. 
  Inheritance Structure of method metaobject Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-mo-readers">29.1.6.2. 
  Introspection: Readers for method metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers">29.1.6.2.1. 
    Generic Function <CODE 
    class=function>CLOS:METHOD-SPECIALIZERS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-qualifiers">29.1.6.2.2. 
    Generic Function <CODE class=function>METHOD-QUALIFIERS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list">29.1.6.2.3. 
    Generic Function <CODE 
    class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf">29.1.6.2.4. 
    Generic Function <CODE 
    class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#method-function">29.1.6.2.5. 
    Generic Function <CODE class=function>CLOS:METHOD-FUNCTION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-mo-readers-methods">29.1.6.2.6. 
    Methods</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init">29.1.6.3. 
  Initialization of Methods</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod">29.1.6.3.1. 
    Macro <CODE class=function>DEFMETHOD</CODE></A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-body">29.1.6.3.1.1. 
      Processing Method Bodies</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-mo">29.1.6.3.1.2. 
      Initialization of Generic Function and method metaobjects</A></SPAN>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-efficiency">29.1.6.3.1.3. 
      Efficiency</A></SPAN></DT></DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo">29.1.6.3.2. 
    Initialization of method metaobjects</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=section><A 
      href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo-method">29.1.6.3.2.1. 
      Methods</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-customize">29.1.6.4. 
  Customization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list">29.1.6.4.1. 
    Function <CODE class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names">29.1.6.4.2. 
    Function <CODE 
    class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-meth-inheritance></A>29.1.6.1.&nbsp;Inheritance 
Structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> Classes</H4></DIV></DIV></DIV>
<DIV class=figure><A id=mop-meth-inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.5.&nbsp;Inheritance structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG alt="Inheritance structure of method metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-method.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR 
class=figure-break></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-meth-mo-readers></A>29.1.6.2.&nbsp;Introspection: 
Readers for <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers">29.1.6.2.1. 
  Generic Function <CODE 
  class=function>CLOS:METHOD-SPECIALIZERS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-qualifiers">29.1.6.2.2. 
  Generic Function <CODE class=function>METHOD-QUALIFIERS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list">29.1.6.2.3. 
  Generic Function <CODE 
class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf">29.1.6.2.4. 
  Generic Function <CODE 
  class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-function">29.1.6.2.5. 
  Generic Function <CODE class=function>CLOS:METHOD-FUNCTION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-mo-readers-methods">29.1.6.2.6. 
  Methods</A></SPAN></DT></DL></DIV>
<P>The reader generic functions which simply return information associated with 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s are presented together here in the format described in <A 
title="29.1.3.3.&nbsp;Introspection: Readers for class metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-readers">Section&nbsp;29.1.3.3, 
“Introspection: Readers for class metaobjects”</A>.</P>
<P>Each of these reader generic functions have the same syntax, accepting one 
required argument called <EM class=replaceable><CODE>method</CODE></EM>, which 
must be a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>; otherwise, an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed. An <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A> is also <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>ed if the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> has not been initialized.</P>
<P>These generic functions can be called by the user or the implementation.</P>
<P>For any of these generic functions which returns a list, such lists will not 
be mutated by the implementation. The results are undefined if a portable 
program allows such a list to be mutated.</P><!--begin method basic introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=method-specializers></A>29.1.6.2.1.&nbsp;Generic Function 
<A title="29.1.6.2.1.&nbsp;Generic Function CLOS:METHOD-SPECIALIZERS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers"><CODE 
class=function>CLOS:METHOD-SPECIALIZERS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.6.2.1.&nbsp;Generic Function CLOS:METHOD-SPECIALIZERS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers"><CODE 
class=function>CLOS:METHOD-SPECIALIZERS</CODE></A> <EM 
class=replaceable><CODE>method</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a list of the specializers of <EM 
class=replaceable><CODE>method</CODE></EM>. This value is a list of specializer 
metaobjects. This is the value of the <CODE class=constant>:SPECIALIZERS</CODE> 
initialization argument that was associated with the method during 
initialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=method-qualifiers></A>29.1.6.2.2.&nbsp;Generic Function <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_met_d-qualifiers.html" 
target=_top><CODE class=function>METHOD-QUALIFIERS</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_met_d-qualifiers.html" 
target=_top><CODE class=function>METHOD-QUALIFIERS</CODE></A> <EM 
class=replaceable><CODE>method</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns a (possibly empty) list of the qualifiers of <EM 
class=replaceable><CODE>method</CODE></EM>. This value is a list of non-<A 
href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A> atoms. This is the defaulted value of the <CODE 
class=constant>:QUALIFIERS</CODE> initialization argument that was associated 
with the method during initialization.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=method-lambda-list></A>29.1.6.2.3.&nbsp;Generic Function 
<A title="29.1.6.2.3.&nbsp;Generic Function CLOS:METHOD-LAMBDA-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list"><CODE 
class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.6.2.3.&nbsp;Generic Function CLOS:METHOD-LAMBDA-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list"><CODE 
class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A> <EM 
class=replaceable><CODE>method</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the (unspecialized) <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> of <EM 
class=replaceable><CODE>method</CODE></EM>. This value is a <A 
href="http://www.lisp.org/" target=_top><SPAN><STRONG class=command>Common 
Lisp</STRONG></SPAN></A> <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>. This is the 
value of the <CODE class=constant>:LAMBDA-LIST</CODE> initialization argument 
that was associated with the method during initialization.</P></DIV><!--end method basic introspection--><!--begin method advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=method-gf></A>29.1.6.2.4.&nbsp;Generic Function <A 
title="29.1.6.2.4.&nbsp;Generic Function CLOS:METHOD-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf"><CODE 
class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.6.2.4.&nbsp;Generic Function CLOS:METHOD-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf"><CODE 
class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A> <EM 
class=replaceable><CODE>method</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the generic function that <EM 
class=replaceable><CODE>method</CODE></EM> is currently connected to, or <A 
href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A> if it is not currently connected to any generic 
function. This value is either a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> or <A 
href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
class=constant>NIL</CODE></A>. When a method is first created it is not 
connected to any generic function. This connection is maintained by the generic 
functions <A href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
target=_top><CODE class=function>ADD-METHOD</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
target=_top><CODE class=function>REMOVE-METHOD</CODE></A>.</P></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=method-function></A>29.1.6.2.5.&nbsp;Generic Function <A 
title="29.1.6.2.5.&nbsp;Generic Function CLOS:METHOD-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-function"><CODE 
class=function>CLOS:METHOD-FUNCTION</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.6.2.5.&nbsp;Generic Function CLOS:METHOD-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#method-function"><CODE 
class=function>CLOS:METHOD-FUNCTION</CODE></A> <EM 
class=replaceable><CODE>method</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>Returns the method function of <EM 
class=replaceable><CODE>method</CODE></EM>. This is the value of the <CODE 
class=constant>:FUNCTION</CODE> initialization argument that was associated with 
the method during initialization.</P></DIV><!--end method advanced introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=mop-meth-mo-readers-methods></A>29.1.6.2.6.&nbsp;Methods</H5></DIV></DIV></DIV>
<DIV class=variablelist>
<P class=title><B>The specified methods for the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> readers</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.6.2.1.&nbsp;Generic Function CLOS:METHOD-SPECIALIZERS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers"><CODE 
  class=function>CLOS:METHOD-SPECIALIZERS</CODE></A> (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_met_d-qualifiers.html" 
  target=_top><CODE class=function>METHOD-QUALIFIERS</CODE></A> (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.6.2.3.&nbsp;Generic Function CLOS:METHOD-LAMBDA-LIST" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list"><CODE 
  class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A> (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.6.2.5.&nbsp;Generic Function CLOS:METHOD-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-function"><CODE 
  class=function>CLOS:METHOD-FUNCTION</CODE></A> (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for these methods beyond that which is specified 
  for their respective generic functions.
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.6.2.4.&nbsp;Generic Function CLOS:METHOD-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#method-gf"><CODE 
  class=function>CLOS:METHOD-GENERIC-FUNCTION</CODE></A> (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>The value returned by this method is maintained by <SPAN class=method><CODE 
  class=literal><A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A>(<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE class=classname>STANDARD-METHOD</CODE></A>)</CODE></SPAN> 
  and <SPAN class=method><CODE class=literal><A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A>(<A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-method.html" 
  target=_top><CODE 
  class=classname>STANDARD-METHOD</CODE></A>)</CODE></SPAN>.</P></DD></DL></DIV></DIV><!--mop-meth-mo-readers-methods--></DIV><!--mop-meth-mo-readers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-meth-init></A>29.1.6.3.&nbsp;Initialization of 
Methods</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod">29.1.6.3.1. 
  Macro <CODE class=function>DEFMETHOD</CODE></A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-body">29.1.6.3.1.1. 
    Processing Method Bodies</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-mo">29.1.6.3.1.2. 
    Initialization of Generic Function and method metaobjects</A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-efficiency">29.1.6.3.1.3. 
    Efficiency</A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo">29.1.6.3.2. 
  Initialization of method metaobjects</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo-method">29.1.6.3.2.1. 
    Methods</A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-meth-init-defmethod></A>29.1.6.3.1.&nbsp;Macro <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A></H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-body">29.1.6.3.1.1. 
  Processing Method Bodies</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-mo">29.1.6.3.1.2. 
  Initialization of Generic Function and method metaobjects</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-efficiency">29.1.6.3.1.3. 
  Efficiency</A></SPAN></DT></DL></DIV>
<P>The evaluation or execution of a <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> form requires first that the body of the 
method be converted to a method function. This process is described <A 
title="29.1.6.3.1.1.&nbsp;Processing Method Bodies" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-body">below</A>. 
The result of this process is a method function and a set of additional 
initialization arguments to be used when creating the new method. Given these 
two values, the evaluation or execution of a <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> form proceeds in three steps.</P>
<P>The first step ensures the existence of a generic function with the specified 
name. This is done by calling the function <A 
title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A>. The first argument in this 
call is the generic function name specified in the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> form.</P>
<P>The second step is the creation of the new <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The class of the new 
<A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> is determined by calling <A 
title="29.1.5.2.6.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A> on the result of 
the call to <A title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A> from the first step.</P>
<P>The initialization arguments received by the call to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> are as follows:</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The value of the <CODE class=constant>:QUALIFIERS</CODE> initialization 
  argument is a list of the qualifiers which appeared in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> form. No special processing is done on 
  these values. The order of the elements of this list is the same as in the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> form. 
  <LI>The value of the <CODE class=constant>:LAMBDA-LIST</CODE> initialization 
  argument is the unspecialized <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> from the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> form. 
  <LI>The value of the <CODE class=constant>:SPECIALIZERS</CODE> initialization 
  argument is a list of the specializers for the method. For specializers which 
  are classes, the specializer is the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> itself. In the case of <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializers, it will be an <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:EQL-SPECIALIZER</CODE></A> metaobject obtained by calling 
  <A title="29.1.8.3.1.&nbsp;Function CLOS:INTERN-EQL-SPECIALIZER" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer"><CODE 
  class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A> on the result of 
  evaluating the <A href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" 
  target=_top><CODE class=classname>EQL</CODE></A> specializer form in the <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-1-1-3.html" target=_top>lexical 
  environment</A> of the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> form.
  <LI>The value of the <CODE class=constant>:FUNCTION</CODE> initialization 
  argument is the method function.
  <LI>
  <P>The value of the <CODE class=constant>:DECLARATIONS</CODE> initialization 
  argument is a list of the <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_d.html#declaration_specifier" 
  target=_top>declaration specifier</A>s from the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> form. If there are no declarations in the 
  macro form, this initialization argument either does not appear, or appears 
  with a value of the empty list.</P>
  <DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
  <H3 class=title>Implementation dependent: only in <SPAN><STRONG 
  class=command>CLISP</STRONG></SPAN></H3>
  <P>No <CODE class=constant>:DECLARATIONS</CODE> initialization argument is 
  provided, because method initialization does not support a <CODE 
  class=constant>:DECLARATIONS</CODE> argument, and because the method function 
  is already completely provided through the <CODE 
  class=constant>:FUNCTION</CODE> initialization argument.</P></DIV>
  <LI>The value of the <CODE class=constant>:DOCUMENTATION</CODE> initialization 
  argument is the documentation string from the <A 
  href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
  class=function>DEFMETHOD</CODE></A> form. If there is no documentation string 
  in the macro form this initialization argument either does not appear, or 
  appears with a value of false. 
  <LI>Any other initialization argument produced in conjunction with the method 
  function are also included.
  <LI>The implementation is free to include additional initialization arguments 
  provided these are not symbols accessible in the <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_11-1-2-2.html" 
  target=_top><STRONG class=package>“<SPAN 
  class=quote>COMMON-LISP-USER</SPAN>”</STRONG></A> package, or exported by any 
  package defined in the [<A title="[ANSI CL]" 
  href="http://clisp.cons.org/impnotes/references.html#ansi-cl"><ABBR 
  class=abbrev>ANSI CL</ABBR></A>].</LI></UL></DIV>
<P>In the third step, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
target=_top><CODE class=function>ADD-METHOD</CODE></A> is called to add the 
newly created method to the set of methods associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>.</P>
<P>The result of the call to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
target=_top><CODE class=function>ADD-METHOD</CODE></A> is returned as the result 
of evaluating or executing the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> form.</P>
<P>An example showing a typical <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> form and a sample expansion is shown in the 
following example: </P>
<DIV class=informalexample><A id=defmethod-ex-1></A>
<P>An example <A href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" 
target=_top><CODE class=function>DEFMETHOD</CODE></A> form and one possible 
correct expansion. In the expansion, <EM 
class=replaceable><CODE>method-lambda</CODE></EM> is the result of calling <A 
title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> as described in <A 
title="29.1.6.3.1.1.&nbsp;Processing Method Bodies" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-defmethod-body">Section&nbsp;29.1.6.3.1.1, 
“Processing Method Bodies”</A>. The initargs appearing after <CODE 
class=constant>:FUNCTION</CODE> are assumed to be additional initargs returned 
from the call to <A 
title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A>.</P><PRE class=programlisting>(defmethod move :before ((p position) (l (eql 0))
                         <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> (visiblyp t)
                         <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> color)
  (set-to-origin p)
  (when visiblyp (show-move p 0 color)))

(let ((#:g001 (ensure-generic-function 'move)))
  (add-method #:g001
    (make-instance (generic-function-method-class #:g001)
                   :qualifiers '(:before)
                   :specializers (list (find-class 'position)
                                       (intern-eql-specializer 0))
                   :lambda-list '(p l <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> (visiblyp t)
                                      <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> color)
                   :function (function <EM class=replaceable><CODE>method-lambda</CODE></EM>)
                   'additional-initarg-1 't
                   'additional-initarg-2 '39)))
</PRE></DIV>
<P>The processing of the method body for this method is shown <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#defmethod-ex-2">below</A>.</P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=mop-meth-init-defmethod-body></A>29.1.6.3.1.1.&nbsp;Processing Method 
Bodies</H6></DIV></DIV></DIV>
<P>Before a method can be created, the list of forms comprising the method body 
must be converted to a method function. This conversion is a two step 
process.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Note</H3>
<P>The body of methods can also appear in the <CODE 
class=constant>:METHOD</CODE> option of <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" target=_top><CODE 
class=function>DEFGENERIC</CODE></A> forms. Initial methods are not considered 
by any of the protocols specified in this document. </P></DIV>
<DIV class=informalexample><A id=defmethod-ex-2></A>
<P>During macro-expansion of the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> macro shown in the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#defmethod-ex-1">previous 
example</A> code similar to this would be run to produce the method lambda and 
additional initargs. In this example, <EM class=replaceable><CODE><A 
href="http://www.lisp.org/HyperSpec/sec_3-1-1-4.html" 
target=_top>environment</A></CODE></EM> is the macroexpansion environment of the 
<A href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" 
target=_top><CODE class=function>DEFMETHOD</CODE></A> macro form.</P><PRE class=programlisting>(let ((gf (ensure-generic-function 'move)))
  (make-method-lambda
    gf
    (class-prototype (generic-function-method-class gf))
    '(lambda (p l <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> (visiblyp t) <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> color)
       (set-to-origin p)
       (when visiblyp (show-move p 0 color)))
    <EM class=replaceable><CODE><A href="http://www.lisp.org/HyperSpec/sec_3-1-1-4.html" target=_top>environment</A></CODE></EM>))
</PRE></DIV>
<P>The first step occurs during macro-expansion of the macro form. In this step, 
the method <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>, declarations 
and body are converted to a <A 
href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" target=_top>lambda 
expression</A> called a <STRONG class=first><EM class=firstterm>method 
lambda</EM></STRONG>. This conversion is based on information associated with 
the generic function definition in effect at the time the macro form is 
expanded.</P>
<P>The generic function definition is obtained by calling <A 
title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
class=function>ENSURE-GENERIC-FUNCTION</CODE></A> with a first argument of the 
generic function name specified in the macro form. The <CODE 
class=constant>:LAMBDA-LIST</CODE> keyword argument is not passed in this 
call.</P>
<P>Given the generic function, production of the method lambda proceeds by 
calling <A title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A>. The first argument in this 
call is the generic function obtained as described above. The second argument is 
the result of calling <A 
title="29.1.3.3.10.&nbsp;Generic Function CLOS:CLASS-PROTOTYPE" 
href="http://clisp.cons.org/impnotes/mop-chap.html#class-prototype"><CODE 
class=function>CLOS:CLASS-PROTOTYPE</CODE></A> on the result of calling <A 
title="29.1.5.2.6.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#gf-method-class"><CODE 
class=function>CLOS:GENERIC-FUNCTION-METHOD-CLASS</CODE></A> on the generic 
function. The third argument is a <A 
href="http://www.lisp.org/HyperSpec/Body/sec_3-1-3.html" target=_top>lambda 
expression</A> formed from the method <A 
title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>, declarations 
and body. The fourth argument is the macro-expansion environment of the macro 
form; this is the value of the <A 
href="http://www.lisp.org/HyperSpec/Body/sec_3-4-4.html" target=_top><CODE 
class=literal>&amp;ENVIRONMENT</CODE></A> argument to the <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> macro.</P>
<P>The generic function <A 
title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> returns two values. The first 
is the method lambda itself. The second is a list of initialization arguments 
and values. These are included in the initialization arguments when the method 
is created.</P>
<P>In the second step, the method lambda is converted to a function which 
properly captures the lexical scope of the macro form. This is done by having 
the method lambda appear in the macro-expansion as the argument of the <A 
href="http://www.lisp.org/HyperSpec/Body/speope_function.html" target=_top><CODE 
class=function>FUNCTION</CODE></A> special form. During the subsequent 
evaluation of the macro-expansion, the result of the <A 
href="http://www.lisp.org/HyperSpec/Body/speope_function.html" target=_top><CODE 
class=function>FUNCTION</CODE></A> special form is the method function.</P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>See <A 
title="The generic function CLOS:MAKE-METHOD-LAMBDA is not implemented" 
href="http://clisp.cons.org/impnotes/mop-chap.html#no-make-method-lambda">The 
generic function <CODE class=function>CLOS:MAKE-METHOD-LAMBDA</CODE> is not 
implemented</A>. </P></DIV></DIV><!--mop-meth-init-defmethod-body-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=mop-meth-init-defmethod-mo></A>29.1.6.3.1.2.&nbsp;Initialization of Generic 
Function and <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s</H6></DIV></DIV></DIV>
<P>An example of creating a generic function and a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>, and then adding the method to the generic function is shown 
below. This example is comparable to the method definition shown <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#defmethod-ex-1">above</A>: 
</P><PRE class=programlisting>(let* ((gf (make-instance 'standard-generic-function
                          :lambda-list '(p l <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> visiblyp <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A>)))
       (method-class (generic-function-method-class gf)))
  (multiple-value-bind (lambda initargs)
       (make-method-lambda
         gf
         (class-prototype method-class)
         '(lambda (p l <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> (visiblyp t) <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> color)
            (set-to-origin p)
            (when visiblyp (show-move p 0 color)))
         nil)
    (add-method gf
                (apply #'make-instance method-class
                       :function (compile nil lambda)
                       :specializers (list (find-class 'position)
                                           (intern-eql-specializer 0))
                       :qualifiers ()
                       :lambda-list '(p l <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> (visiblyp t)
                                          <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A> color)
                       initargs))))
</PRE></DIV><!--mop-meth-init-defmethod-mo-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=mop-meth-efficiency></A>29.1.6.3.1.3.&nbsp;Efficiency</H6></DIV>
<DIV>
<H6 class=subtitle>Implementation dependent: only in <A 
href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></A> and some other 
implementations</H6></DIV></DIV></DIV>
<P>Methods created through <A 
href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" target=_top><CODE 
class=function>DEFMETHOD</CODE></A> have a faster calling convention than 
methods created through a portable <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> invocation.</P></DIV><!--mop-meth-efficiency--></DIV><!--mop-meth-init-defmethod-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=mop-meth-init-mo></A>29.1.6.3.2.&nbsp;Initialization of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s</H5></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo-method">29.1.6.3.2.1. 
  Methods</A></SPAN></DT></DL></DIV>
<P>A <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> can be created by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A>. The initialization 
arguments establish the definition of the method. A <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> cannot be redefined; calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
class=function>SIGNAL</CODE></A>s an <A 
href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
class=classname>ERROR</CODE></A>.</P>
<P>Initialization of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> must be done by calling <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> and allowing it to 
call <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>. Portable 
programs must <SPAN class=strong><STRONG>not</STRONG></SPAN></P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A> directly to 
  initialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A> directly to 
  initialize a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>;
  <LI>... call <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_change-class.html" 
  target=_top><CODE class=function>CHANGE-CLASS</CODE></A> to change the class 
  of any <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A> or to turn a non-method object into a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>. </LI></UL></DIV>
<P>Since metaobject classes may not be redefined, no behavior is specified for 
the result of calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_efined-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-REDEFINED-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s. Since the class of a <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> cannot be changed, no behavior is specified for the result of 
calls to <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_upd_ferent-class.html" 
target=_top><CODE class=function>UPDATE-INSTANCE-FOR-DIFFERENT-CLASS</CODE></A> 
on <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s.</P>
<P>During initialization, each initialization argument is checked for errors and 
then associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>. The value can then be accessed by calling the appropriate 
accessor as shown in <A 
title="Table&nbsp;29.5.&nbsp;Initialization arguments and&#10;  accessors for method metaobjects" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-initargs">Table&nbsp;29.5, 
“Initialization arguments and accessors for method metaobjects”</A>.</P>
<P>This section begins with a description of the error checking and processing 
of each initialization argument. This is followed by a table showing the generic 
functions that can be used to access the stored initialization arguments. The 
section ends with a set of restrictions on portable methods affecting <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> initialization.</P>
<P>In these descriptions, the phrase “<SPAN class=quote>this argument defaults 
to <EM class=replaceable><CODE>value</CODE></EM></SPAN>” means that when that 
initialization argument is not supplied, initialization is performed as if <EM 
class=replaceable><CODE>value</CODE></EM> had been supplied. For some 
initialization arguments this could be done by the use of default initialization 
arguments, but whether it is done this way is not specified. Implementations are 
free to define default initialization arguments for specified <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> classes. Portable programs are free to define default 
initialization arguments for portable subclasses of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
class=classname>METHOD</CODE></A>.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>The <CODE class=constant>:QUALIFIERS</CODE> argument is a list of method 
  qualifiers. An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A>, or if any element of the list is not a non-null 
  atom. This argument defaults to the empty list.
  <LI>The <CODE class=constant>:LAMBDA-LIST</CODE> argument is the unspecialized 
  <A title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> of the 
  method. An <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a proper <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>. If this 
  value is not supplied, an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed. 
  <LI>The <CODE class=constant>:SPECIALIZERS</CODE> argument is a list of the 
  specializer metaobjects for the method. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a <A 
  href="http://www.lisp.org/HyperSpec/Body/glo_p.html#proper_list" 
  target=_top>proper list</A>, or if the length of the list differs from the 
  number of required arguments in the <CODE class=constant>:LAMBDA-LIST</CODE> 
  argument, or if any element of the list is not a specializer metaobject. If 
  this value is not supplied, an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.
  <LI>The <CODE class=constant>:FUNCTION</CODE> argument is a method function. 
  It must be compatible with the methods on <A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> defined for this class 
  of method and generic function with which it will be used. That is, it must 
  accept the same number of arguments as all uses of <A 
  href="http://www.lisp.org/HyperSpec/Body/locmac_call-m__make-method.html" 
  target=_top><CODE class=function>CALL-METHOD</CODE></A> that will call it 
  supply. (See <A 
  title="29.1.5.4.8.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD</CODE></A> and <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> for more information.) An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this argument is not supplied.
  <LI>When the method being initialized is an instance of a subclass of <A 
  title="29.1.6.3.2.&nbsp;Initialization of method metaobjects" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo"><CODE 
  class=classname>CLOS:STANDARD-ACCESSOR-METHOD</CODE></A>, the <CODE 
  class=constant>:SLOT-DEFINITION</CODE> initialization argument must be 
  provided. Its value is the direct <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> which defines this accessor method. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if the value is not an instance of a 
  subclass of <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:DIRECT-SLOT-DEFINITION</CODE></A>.
  <LI>The <CODE class=constant>:DOCUMENTATION</CODE> argument is a string or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. An <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed if this value is not a string or <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>. This argument defaults to <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A>.</LI></UL></DIV>
<P>After the processing and defaulting of initialization arguments described 
above, the value of each initialization argument is associated with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>. These values can then be accessed by calling the corresponding 
generic function. The correspondences are as follows: </P>
<DIV class=table><A id=mop-meth-initargs></A>
<P class=title><B>Table&nbsp;29.5.&nbsp;Initialization arguments and accessors 
for <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A>s</B></P>
<DIV class=table-contents>
<TABLE 
summary="Initialization arguments and&#10;  accessors for method metaobjects" 
border=1>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Initialization Argument</TH>
    <TH align=middle>Generic Function</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><CODE class=constant>:QUALIFIERS</CODE></TD>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_met_d-qualifiers.html" 
      target=_top><CODE class=function>METHOD-QUALIFIERS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:LAMBDA-LIST</CODE></TD>
    <TD align=middle><A 
      title="29.1.6.2.3.&nbsp;Generic Function CLOS:METHOD-LAMBDA-LIST" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-lambda-list"><CODE 
      class=function>CLOS:METHOD-LAMBDA-LIST</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:SPECIALIZERS</CODE></TD>
    <TD align=middle><A 
      title="29.1.6.2.1.&nbsp;Generic Function CLOS:METHOD-SPECIALIZERS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-specializers"><CODE 
      class=function>CLOS:METHOD-SPECIALIZERS</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:FUNCTION</CODE></TD>
    <TD align=middle><A 
      title="29.1.6.2.5.&nbsp;Generic Function CLOS:METHOD-FUNCTION" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#method-function"><CODE 
      class=function>CLOS:METHOD-FUNCTION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:SLOT-DEFINITION</CODE></TD>
    <TD align=middle><A 
      title="29.1.7.1.1.&nbsp;Generic Function CLOS:ACCESSOR-METHOD-SLOT-DEFINITION" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef"><CODE 
      class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A></TD></TR>
  <TR>
    <TD align=middle><CODE class=constant>:DOCUMENTATION</CODE></TD>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/stagenfun_doc_umentationcp.html" 
      target=_top><CODE 
class=function>DOCUMENTATION</CODE></A></TD></TR></TBODY></TABLE></DIV></DIV>
<P><BR class=table-break></P>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H6 class=title><A 
id=mop-meth-init-mo-method></A>29.1.6.3.2.1.&nbsp;Methods</H6></DIV></DIV></DIV>
<P>It is not specified which methods provide the initialization behavior 
described above. Instead, the information needed to allow portable programs to 
specialize this behavior is presented in as a set of restrictions on the methods 
a portable program can define. The model is that portable initialization methods 
have access to the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> when either all or none of the specified initialization has taken 
effect.</P>
<P>These restrictions govern the methods that a portable program can define on 
the generic functions <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>, <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>, and <A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A>. These 
restrictions apply only to methods on these generic functions for which the 
first specializer is a subclass of the class <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
class=classname>METHOD</CODE></A>. Other portable methods on these generic 
functions are not affected by these restrictions.</P>
<DIV class=itemizedlist>
<UL type=disc>
  <LI>Portable programs must not define methods on <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_sha_d-initialize.html" 
  target=_top><CODE class=function>SHARED-INITIALIZE</CODE></A> or <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>.
  <LI>
  <P>For <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_ini_ize-instance.html" 
  target=_top><CODE class=function>INITIALIZE-INSTANCE</CODE></A>: </P>
  <DIV class=itemizedlist>
  <UL type=circle>
    <LI>Portable programs must not define primary methods. 
    <LI>Portable programs may define around-methods, but these must be 
    extending, not overriding methods.
    <LI>Portable before-methods must assume that when they are run, none of the 
    initialization behavior described above has been completed.
    <LI>Portable after-methods must assume that when they are run, all of the 
    initialization behavior described above has been 
  completed.</LI></UL></DIV></LI></UL></DIV>
<P>The results are undefined if any of these restrictions are 
violated.</P></DIV><!--mop-meth-init-mo-method--></DIV><!--mop-meth-init-mo--></DIV><!--mop-meth-init-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-meth-customize></A>29.1.6.4.&nbsp;Customization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list">29.1.6.4.1. 
  Function <CODE class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names">29.1.6.4.2. 
  Function <CODE 
  class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A></SPAN></DT></DL></DIV><!--begin method advanced customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=extract-lambda-list></A>29.1.6.4.1.&nbsp;Function <A 
title="29.1.6.4.1.&nbsp;Function CLOS:EXTRACT-LAMBDA-LIST" 
href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list"><CODE 
class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.6.4.1.&nbsp;Function CLOS:EXTRACT-LAMBDA-LIST" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list"><CODE 
  class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A> <EM 
  class=replaceable><CODE>specialized-lambda-list</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>specialized-lambda-list</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-3.html" 
    target=_top>specialized lambda list</A> as accepted by <A 
    href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" 
    target=_top><CODE class=function>DEFMETHOD</CODE></A>. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is an unspecialized <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function takes a <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-3.html" 
  target=_top>specialized lambda list</A> and returns the <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> with the 
  specializers removed. This is a non-destructive operation. Whether the result 
  shares any structure with the argument is unspecified.</P>
  <P>If the <EM class=replaceable><CODE>specialized-lambda-list</CODE></EM> 
  argument does not have legal syntax, an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed. This syntax checking does not check the 
  syntax of the actual specializer names, only the syntax of the <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> and where 
  the specializers appear. </P></DD></DL></DIV>
<P><B>Examples.&nbsp;</B></P>
<DIV class=informalexample><PRE class=programlisting>(<A title="29.1.6.4.1.&nbsp;Function CLOS:EXTRACT-LAMBDA-LIST" href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list"><CODE class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A> '((p position)))
⇒&nbsp;<CODE class=computeroutput>(P)</CODE>
(<A title="29.1.6.4.1.&nbsp;Function CLOS:EXTRACT-LAMBDA-LIST" href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list"><CODE class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A> '((p position) x y))
⇒&nbsp;<CODE class=computeroutput>(P X Y)</CODE>
(<A title="29.1.6.4.1.&nbsp;Function CLOS:EXTRACT-LAMBDA-LIST" href="http://clisp.cons.org/impnotes/mop-chap.html#extract-lambda-list"><CODE class=function>CLOS:EXTRACT-LAMBDA-LIST</CODE></A> '(a (b (eql x)) c <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;REST</CODE></A> i))
⇒&nbsp;<CODE class=computeroutput>(A B C <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;OPTIONAL</CODE></A> I)</CODE>
</PRE></DIV></DIV><!--extract-lambda-list-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=extract-specializer-names></A>29.1.6.4.2.&nbsp;Function <A 
title="29.1.6.4.2.&nbsp;Function CLOS:EXTRACT-SPECIALIZER-NAMES" 
href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names"><CODE 
class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.6.4.2.&nbsp;Function CLOS:EXTRACT-SPECIALIZER-NAMES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names"><CODE 
  class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A> <EM 
  class=replaceable><CODE>specialized-lambda-list</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>specialized-lambda-list</CODE></EM></SPAN>
    <DD>a <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-3.html" 
    target=_top>specialized lambda list</A> as accepted by <A 
    href="http://www.lisp.org/HyperSpec/Body/mac_defmethod.html" 
    target=_top><CODE class=function>DEFMETHOD</CODE></A>. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is a list of specializer names. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function takes a <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-3.html" 
  target=_top>specialized lambda list</A> and returns its specializer names. 
  This is a non-destructive operation. Whether the result shares structure with 
  the argument is unspecified. </P>
  <P>The list returned by this function will not be mutated by the 
  implementation. The results are undefined if a portable program mutates the 
  list returned by this function.</P>
  <P>The result of this function will be a list with a number of elements equal 
  to the number of required arguments in <EM 
  class=replaceable><CODE>specialized-lambda-list</CODE></EM>. Specializers are 
  defaulted to the symbol <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
  class=classname>T</CODE></A>. </P>
  <P>If the <EM class=replaceable><CODE>specialized-lambda-list</CODE></EM> 
  argument does not have legal syntax, an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed. This syntax checking does not check the 
  syntax of the actual specializer names, only the syntax of the <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda list</A> and where 
  the specializers appear. </P></DD></DL></DIV>
<P><B>Examples.&nbsp;</B></P>
<DIV class=informalexample><PRE class=programlisting>(<A title="29.1.6.4.2.&nbsp;Function CLOS:EXTRACT-SPECIALIZER-NAMES" href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names"><CODE class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A> '((p position)))
⇒&nbsp;<CODE class=computeroutput>(POSITION)</CODE>
(<A title="29.1.6.4.2.&nbsp;Function CLOS:EXTRACT-SPECIALIZER-NAMES" href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names"><CODE class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A> '((p position) x y))
⇒&nbsp;<CODE class=computeroutput>(POSITION T T)</CODE>
(<A title="29.1.6.4.2.&nbsp;Function CLOS:EXTRACT-SPECIALIZER-NAMES" href="http://clisp.cons.org/impnotes/mop-chap.html#extract-specializer-names"><CODE class=function>CLOS:EXTRACT-SPECIALIZER-NAMES</CODE></A> '(a (b (eql x)) c <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;REST</CODE></A> i))
⇒&nbsp;<CODE class=computeroutput>(T (EQL X) T)</CODE>
</PRE></DIV></DIV><!--extract-specializer-names--><!--end method advanced customization--></DIV><!--mop-meth-customize--></DIV><!--mop-meth-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-accessors></A>29.1.7.&nbsp;Accessor 
Methods</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-acc-readers">29.1.7.1. 
  Introspection</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef">29.1.7.1.1. 
    Generic Function <CODE 
    class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-acc-customize">29.1.7.2. 
  Customization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class">29.1.7.2.1. 
    Generic Function <CODE 
    class=function>CLOS:READER-METHOD-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class">29.1.7.2.2. 
    Generic Function <CODE 
    class=function>CLOS:WRITER-METHOD-CLASS</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-acc-readers></A>29.1.7.1.&nbsp;Introspection</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef">29.1.7.1.1. 
  Generic Function <CODE 
  class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A></SPAN></DT></DL></DIV><!--begin accessor-method basic introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=accessor-method-slotdef></A>29.1.7.1.1.&nbsp;Generic 
Function <A 
title="29.1.7.1.1.&nbsp;Generic Function CLOS:ACCESSOR-METHOD-SLOT-DEFINITION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef"><CODE 
class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A></H5></DIV>
<DIV>
<H6 class=subtitle><CODE class=code>(<A 
title="29.1.7.1.1.&nbsp;Generic Function CLOS:ACCESSOR-METHOD-SLOT-DEFINITION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef"><CODE 
class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A> <EM 
class=replaceable><CODE>method</CODE></EM>)</CODE></H6></DIV></DIV></DIV>
<P>This accessor can only be called on accessor methods. It returns the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A> that defined this method. This is the value of the 
<CODE class=constant>:SLOT-DEFINITION</CODE> initialization argument associated 
with the method during initialization.</P>
<DIV class=variablelist>
<P class=title><B>The specified methods for the accessor <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
metaobject</A> readers</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.7.1.1.&nbsp;Generic Function CLOS:ACCESSOR-METHOD-SLOT-DEFINITION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#accessor-method-slotdef"><CODE 
  class=function>CLOS:ACCESSOR-METHOD-SLOT-DEFINITION</CODE></A> (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  title="29.1.6.3.2.&nbsp;Initialization of method metaobjects" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-init-mo"><CODE 
  class=classname>CLOS:STANDARD-ACCESSOR-METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for this method beyond that which is specified 
  for the generic function.</DD></DL></DIV></DIV><!--end accessor-method basic introspection--></DIV><!--mop-acc-readers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-acc-customize></A>29.1.7.2.&nbsp;Customization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class">29.1.7.2.1. 
  Generic Function <CODE 
  class=function>CLOS:READER-METHOD-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class">29.1.7.2.2. 
  Generic Function <CODE 
  class=function>CLOS:WRITER-METHOD-CLASS</CODE></A></SPAN></DT></DL></DIV><!--begin accessor-method advanced customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=reader-method-class></A>29.1.7.2.1.&nbsp;Generic Function 
<A title="29.1.7.2.1.&nbsp;Generic Function CLOS:READER-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class"><CODE 
class=function>CLOS:READER-METHOD-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.7.2.1.&nbsp;Generic Function CLOS:READER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class"><CODE 
  class=function>CLOS:READER-METHOD-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>direct-slot-definition</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>direct-slot-definition</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>alternating initialization argument names and values. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to determine the class of reader methods 
  created during class initialization and reinitialization. The result must be a 
  subclass of <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-READER-METHOD</CODE></A>.</P>
  <P>The <EM class=replaceable><CODE>initargs</CODE></EM> argument must be the 
  same as will be passed to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> to create the reader 
  method. The <EM class=replaceable><CODE>initargs</CODE></EM> must include 
  <CODE class=constant>:SLOT-DEFINITION</CODE> with <EM 
  class=replaceable><CODE>slot-definition</CODE></EM> as its value. 
</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.7.2.1.&nbsp;Generic Function CLOS:READER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class"><CODE 
  class=function>CLOS:READER-METHOD-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>direct-slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.7.2.1.&nbsp;Generic Function CLOS:READER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#reader-method-class"><CODE 
  class=function>CLOS:READER-METHOD-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>direct-slot-definition</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>These methods return the class <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-READER-METHOD</CODE></A>.</P>
  <P>These methods can be overridden.</P></DD></DL></DIV></DIV><!--reader-method-class-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=writer-method-class></A>29.1.7.2.2.&nbsp;Generic Function 
<A title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
class=function>CLOS:WRITER-METHOD-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
  class=function>CLOS:WRITER-METHOD-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>direct-slot</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>direct-slot</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dsd-mo">direct</A> <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>a list of initialization arguments and values. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A>. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to determine the class of writer methods 
  created during class initialization and reinitialization. The result must be a 
  subclass of <A 
  title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
  class=classname>CLOS:STANDARD-WRITER-METHOD</CODE></A>.</P>
  <P>The <EM class=replaceable><CODE>initargs</CODE></EM> argument must be the 
  same as will be passed to <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_make-instance.html" 
  target=_top><CODE class=function>MAKE-INSTANCE</CODE></A> to create the reader 
  method. The <EM class=replaceable><CODE>initargs</CODE></EM> must include 
  <CODE class=constant>:SLOT-DEFINITION</CODE> with <A 
  title="29.1.4.&nbsp;Slot Definitions" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sd"><CODE 
  class=classname>CLOS:SLOT-DEFINITION</CODE></A> as its value. 
</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
  class=function>CLOS:WRITER-METHOD-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>direct-slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
  class=function>CLOS:WRITER-METHOD-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>direct-slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-DIRECT-SLOT-DEFINITION</CODE></A>) <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>These methods returns the class <A 
  title="29.1.7.2.2.&nbsp;Generic Function CLOS:WRITER-METHOD-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#writer-method-class"><CODE 
  class=classname>CLOS:STANDARD-WRITER-METHOD</CODE></A>.</P>
  <P>These methods can be overridden.</P></DD></DL></DIV></DIV><!--writer-method-class--><!--end accessor-method advanced customization--></DIV><!--mop-acc-customize--></DIV><!--mop-accessors-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A 
id=mop-specializers></A>29.1.8.&nbsp;Specializers</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-specializers-inheritance">29.1.8.1. 
  Inheritance Structure of Specializer Metaobject Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-spec-readers">29.1.8.2. 
  Introspection</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#eql-specializer-object">29.1.8.2.1. 
    Function <CODE 
    class=function>CLOS:EQL-SPECIALIZER-OBJECT</CODE></A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-spec-init">29.1.8.3. 
  Initialization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer">29.1.8.3.1. 
    Function <CODE 
    class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A></SPAN></DT></DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-spec-dep">29.1.8.4. 
  Updating Dependencies</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods">29.1.8.4.1. 
    Generic Function <CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs">29.1.8.4.2. 
    Generic Function <CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method">29.1.8.4.3. 
    Generic Function <CODE 
    class=function>CLOS:ADD-DIRECT-METHOD</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method">29.1.8.4.4. 
    Generic Function <CODE 
    class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-specializers-inheritance></A>29.1.8.1.&nbsp;Inheritance Structure of 
Specializer Metaobject Classes</H4></DIV></DIV></DIV>
<DIV class=figure><A id=mop-specializers-inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.6.&nbsp;Inheritance structure of specializer 
metaobject classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG alt="Inheritance structure of specializer metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-specializer.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR 
class=figure-break></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-spec-readers></A>29.1.8.2.&nbsp;Introspection</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#eql-specializer-object">29.1.8.2.1. 
  Function <CODE 
  class=function>CLOS:EQL-SPECIALIZER-OBJECT</CODE></A></SPAN></DT></DL></DIV><!--begin specializer basic introspection-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=eql-specializer-object></A>29.1.8.2.1.&nbsp;Function <A 
title="29.1.8.2.1.&nbsp;Function CLOS:EQL-SPECIALIZER-OBJECT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#eql-specializer-object"><CODE 
class=function>CLOS:EQL-SPECIALIZER-OBJECT</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.8.2.1.&nbsp;Function CLOS:EQL-SPECIALIZER-OBJECT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#eql-specializer-object"><CODE 
  class=function>CLOS:EQL-SPECIALIZER-OBJECT</CODE></A> <EM 
  class=replaceable><CODE>eql-specializer</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>eql-specializer</CODE></EM></SPAN>
    <DD>an <A href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" 
    target=_top><CODE class=classname>EQL</CODE></A> specializer metaobject. 
    </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this function is an object. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function returns the object associated with <EM 
  class=replaceable><CODE>eql-specializer</CODE></EM> during initialization. The 
  value is guaranteed to be <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> to the value originally passed to <A 
  title="29.1.8.3.1.&nbsp;Function CLOS:INTERN-EQL-SPECIALIZER" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer"><CODE 
  class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A>, but it is not 
  necessarily <A href="http://www.lisp.org/HyperSpec/Body/fun_eq.html" 
  target=_top><CODE class=function>EQ</CODE></A> to that value.</P>
  <P>This function <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> if <EM 
  class=replaceable><CODE>eql-specializer</CODE></EM> is not an <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializer.</P></DD></DL></DIV></DIV><!--eql-specializer-object--><!--end specializer basic introspection--></DIV><!--mop-spec-readers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-spec-init></A>29.1.8.3.&nbsp;Initialization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer">29.1.8.3.1. 
  Function <CODE 
  class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=intern-eql-specializer></A>29.1.8.3.1.&nbsp;Function <A 
title="29.1.8.3.1.&nbsp;Function CLOS:INTERN-EQL-SPECIALIZER" 
href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer"><CODE 
class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.8.3.1.&nbsp;Function CLOS:INTERN-EQL-SPECIALIZER" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer"><CODE 
  class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A> <EM 
  class=replaceable><CODE>object</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>object</CODE></EM></SPAN>
    <DD>any Lisp object.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result is the <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializer metaobject for <EM 
  class=replaceable><CODE>object</CODE></EM>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This function returns the unique <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializer metaobject for <EM 
  class=replaceable><CODE>object</CODE></EM>, creating one if necessary. Two 
  calls to <A title="29.1.8.3.1.&nbsp;Function CLOS:INTERN-EQL-SPECIALIZER" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer"><CODE 
  class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A> with <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> arguments will return the same (i.e., <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_eq.html" target=_top><CODE 
  class=function>EQ</CODE></A>) value.</DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>The result of calling <A 
title="29.1.8.2.1.&nbsp;Function CLOS:EQL-SPECIALIZER-OBJECT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#eql-specializer-object"><CODE 
class=function>CLOS:EQL-SPECIALIZER-OBJECT</CODE></A> on the result of a call to 
<A title="29.1.8.3.1.&nbsp;Function CLOS:INTERN-EQL-SPECIALIZER" 
href="http://clisp.cons.org/impnotes/mop-chap.html#intern-eql-specializer"><CODE 
class=function>CLOS:INTERN-EQL-SPECIALIZER</CODE></A> is only guaranteed to be 
<A href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
class=classname>EQL</CODE></A> to the original <EM 
class=replaceable><CODE>object</CODE></EM> argument, not necessarily <A 
href="http://www.lisp.org/HyperSpec/Body/fun_eq.html" target=_top><CODE 
class=function>EQ</CODE></A>.</P></DIV><!--intern-eql-specializer--></DIV><!--mop-spec-init-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-spec-dep></A>29.1.8.4.&nbsp;Updating 
Dependencies</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods">29.1.8.4.1. 
  Generic Function <CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs">29.1.8.4.2. 
  Generic Function <CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method">29.1.8.4.3. 
  Generic Function <CODE class=function>CLOS:ADD-DIRECT-METHOD</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method">29.1.8.4.4. 
  Generic Function <CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=specializer-direct-methods></A>29.1.8.4.1.&nbsp;Generic 
Function <A 
title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A> <EM 
  class=replaceable><CODE>specializer</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>specializer</CODE></EM></SPAN>
    <DD>a specializer metaobject. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result of this generic function is a possibly empty list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This generic function returns the possibly empty set of those methods, 
  connected to generic functions, which have <EM 
  class=replaceable><CODE>specializer</CODE></EM> as a specializer. The elements 
  of this set are <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
  metaobject</A>s. This value is maintained by the generic functions <A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> and <A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A>. </DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
    class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
    target=_top><CODE class=classname>METHOD</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
    class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
    target=_top><CODE class=classname>METHOD</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:EQL-SPECIALIZER</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for this method beyond that which is specified 
  for the generic function.</DD></DL></DIV></DIV><!--specializer-direct-methods-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=specializer-direct-gfs></A>29.1.8.4.2.&nbsp;Generic 
Function <A 
title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A> <EM 
  class=replaceable><CODE>specializer</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>specializer</CODE></EM></SPAN>
    <DD>a specializer metaobject. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result of this generic function is a possibly empty list of <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>s.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This generic function returns the possibly empty set of those generic 
  functions which have a method with <EM 
  class=replaceable><CODE>specializer</CODE></EM> as a specializer. The elements 
  of this set are <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
  function metaobject</A>s. This value is maintained by the generic functions <A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> and <A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A>.</DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
    class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
    target=_top><CODE class=classname>METHOD</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
    class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
    target=_top><CODE class=classname>METHOD</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:EQL-SPECIALIZER</CODE></A>))</CODE></SPAN></SPAN>
  <DD>No behavior is specified for this method beyond that which is specified 
  for the generic function.</DD></DL></DIV></DIV><!--specializer-direct-gfs-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=add-direct-method></A>29.1.8.4.3.&nbsp;Generic Function <A 
title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
class=function>CLOS:ADD-DIRECT-METHOD</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> <EM 
  class=replaceable><CODE>specializer</CODE></EM> <EM 
  class=replaceable><CODE>method</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>specializer</CODE></EM></SPAN>
    <DD>a specializer metaobject. 
    <DT><SPAN class=term><EM class=replaceable><CODE>method</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to maintain a set of backpointers from a 
  specializer to the set of methods specialized to it. If <EM 
  class=replaceable><CODE>method</CODE></EM> is already in the set, it is not 
  added again (no <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed).</P>
  <P>This set can be accessed as a list by calling the generic function <A 
  title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A>. Methods are removed 
  from the set by <A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A>.</P>
  <P>The generic function <A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> is called by <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A> whenever a method is 
  added to a generic function. It is called once for each of the specializers of 
  the method. Note that in cases where a specializer appears more than once in 
  the specializers of a method, this generic function will be called more than 
  once with the same specializer as argument.</P>
  <P>The results are undefined if the <EM 
  class=replaceable><CODE>specializer</CODE></EM> argument is not one of the 
  specializers of the <EM class=replaceable><CODE>method</CODE></EM> argument. 
  </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
  class=classname>METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function for class 
  specializers.</P>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
    class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
    target=_top><CODE class=classname>METHOD</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <P></P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:EQL-SPECIALIZER</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
  class=classname>METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function for <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializers.</P>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P></DD></DL></DIV></DIV><!--add-direct-method-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=remove-direct-method></A>29.1.8.4.4.&nbsp;Generic Function 
<A title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> <EM 
  class=replaceable><CODE>specializer</CODE></EM> <EM 
  class=replaceable><CODE>method</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>specializer</CODE></EM></SPAN>
    <DD>a specializer metaobject. 
    <DT><SPAN class=term><EM class=replaceable><CODE>method</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-method-mo">method 
    metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to maintain a set of backpointers from a 
  specializer to the set of methods specialized to it. If <EM 
  class=replaceable><CODE>method</CODE></EM> is in the set it is removed. If it 
  is not, no <A href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" 
  target=_top><CODE class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>This set can be accessed as a list by calling the generic function <A 
  title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
  class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A>. Methods are added 
  to the set by <A 
  title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
  class=function>CLOS:ADD-DIRECT-METHOD</CODE></A>.</P>
  <P>The generic function <A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> is called by <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A> whenever a method is 
  removed from a generic function. It is called once for each of the 
  specializers of the method. Note that in cases where a specializer appears 
  more than once in the specializers of a method, this generic function will be 
  called more than once with the same specializer as argument.</P>
  <P>The results are undefined if the <EM 
  class=replaceable><CODE>specializer</CODE></EM> argument is not one of the 
  specializers of the <EM class=replaceable><CODE>method</CODE></EM> argument. 
  </P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" target=_top><CODE 
  class=classname>CLASS</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
  class=classname>METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function for class 
  specializers.</P>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.3.&nbsp;Generic Function CLOS:ADD-DIRECT-METHOD" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-direct-method"><CODE 
    class=function>CLOS:ADD-DIRECT-METHOD</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
    target=_top><CODE class=classname>METHOD</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.2.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-gfs"><CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-GENERIC-FUNCTIONS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE class=classname>CLASS</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.8.4.1.&nbsp;Generic Function CLOS:SPECIALIZER-DIRECT-METHODS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#specializer-direct-methods"><CODE 
    class=function>CLOS:SPECIALIZER-DIRECT-METHODS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_class.html" 
    target=_top><CODE 
  class=classname>CLASS</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.8.4.4.&nbsp;Generic Function CLOS:REMOVE-DIRECT-METHOD" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-direct-method"><CODE 
  class=function>CLOS:REMOVE-DIRECT-METHOD</CODE></A> (<EM 
  class=replaceable><CODE>specializer</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:EQL-SPECIALIZER</CODE></A>) (<EM 
  class=replaceable><CODE>method</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" target=_top><CODE 
  class=classname>METHOD</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>This method implements the behavior of the generic function for <A 
  href="http://www.lisp.org/HyperSpec/Body/typspe_eql.html" target=_top><CODE 
  class=classname>EQL</CODE></A> specializers.</P>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P></DD></DL></DIV></DIV><!--remove-direct-method--></DIV><!--mop-spec-dep--></DIV><!--mop-specializers-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-meth-comb></A>29.1.9.&nbsp;Method 
Combinations</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comb-inheritance">29.1.9.1. 
  Inheritance Structure of method combination metaobject Classes</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comb-customize">29.1.9.2. 
  Customization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#find-method-combination">29.1.9.2.1. 
    Generic Function <CODE 
    class=function>CLOS:FIND-METHOD-COMBINATION</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-meth-comb-inheritance></A>29.1.9.1.&nbsp;Inheritance 
Structure of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
combination metaobject</A> Classes</H4></DIV></DIV></DIV>
<DIV class=figure><A id=mop-meth-comb-inheritance-fig></A>
<P class=title><B>Figure&nbsp;29.7.&nbsp;Inheritance structure of method 
combination metaobject classes</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject>
<TABLE cellSpacing=0 cellPadding=0 width="100%" 
summary="manufactured viewport for HTML img" border=0>
  <TBODY>
  <TR>
    <TD><IMG 
      alt="Inheritance structure of method combination metaobject classes" 
      src="29_1_&nbsp;Meta-Object Protocol_files/mop-classes-methcomb.png" 
      width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR 
class=figure-break></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-meth-comb-customize></A>29.1.9.2.&nbsp;Customization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#find-method-combination">29.1.9.2.1. 
  Generic Function <CODE 
  class=function>CLOS:FIND-METHOD-COMBINATION</CODE></A></SPAN></DT></DL></DIV><!--begin method-combination advanced customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=find-method-combination></A>29.1.9.2.1.&nbsp;Generic 
Function <A 
title="29.1.9.2.1.&nbsp;Generic Function CLOS:FIND-METHOD-COMBINATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#find-method-combination"><CODE 
class=function>CLOS:FIND-METHOD-COMBINATION</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.9.2.1.&nbsp;Generic Function CLOS:FIND-METHOD-COMBINATION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#find-method-combination"><CODE 
  class=function>CLOS:FIND-METHOD-COMBINATION</CODE></A> <EM 
  class=replaceable><CODE>generic-function</CODE></EM> <EM 
  class=replaceable><CODE>method-combination-type-name</CODE></EM> <EM 
  class=replaceable><CODE>method-combination-options</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>generic-function</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>method-combination-type-name</CODE></EM></SPAN>
    <DD>a symbol which names a type of method combination. 
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>method-combination-options</CODE></EM></SPAN>
    <DD>a list of arguments to the method combination type. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is a <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
  combination metaobject</A>.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This generic function is called to determine the method combination object 
  used by a generic function. </DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>Further details of <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-meth-comp-mo">method 
combination metaobject</A>s are not specified. </P></DIV><!--find-method-combination--><!--end method-combination advanced customization--></DIV><!--mop-meth-comb-customize--></DIV><!--mop-meth-comb-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-slot-access></A>29.1.10.&nbsp;Slot 
Access</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-instance-stuct">29.1.10.1. 
  Instance Structure Protocol</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable">29.1.10.2. 
  Funcallable Instances</A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-customize">29.1.10.3. 
  Customization</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access">29.1.10.3.1. 
    Function <CODE 
class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access">29.1.10.3.2. 
    Function <CODE 
    class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif">29.1.10.3.3. 
    Function <CODE 
    class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC">29.1.10.3.4. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC">29.1.10.3.5. 
    Generic Function <CODE class=code>(SETF 
    CLOS:SLOT-VALUE-USING-CLASS)</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC">29.1.10.3.6. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC">29.1.10.3.7. 
    Generic Function <CODE 
    class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-sa-instance-stuct></A>29.1.10.1.&nbsp;Instance 
Structure Protocol</H4></DIV></DIV></DIV>
<P>The instance structure protocol is responsible for implementing the behavior 
of the slot access functions like <A 
href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" target=_top><CODE 
class=function>SLOT-VALUE</CODE></A> and <CODE class=code>(<A 
href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
target=_top><CODE class=function>SETF</CODE></A> <A 
href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" target=_top><CODE 
class=function>SLOT-VALUE</CODE></A>)</CODE>.</P>
<P>For each <A href="http://www.lisp.org/HyperSpec/Body/chap-7.html" 
target=_top><SPAN><STRONG class=command>CLOS</STRONG></SPAN></A> slot access 
function other than <A 
href="http://www.lisp.org/HyperSpec/Body/fun_slot-exists-p.html" 
target=_top><CODE class=function>SLOT-EXISTS-P</CODE></A>, there is a 
corresponding generic function which actually provides the behavior of the 
function. When called, the slot access function finds the pertinent <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>, calls the corresponding generic function and returns 
its result. The arguments passed on to the generic function include one 
additional value, the class of the <EM 
class=replaceable><CODE>object</CODE></EM> argument, which always immediately 
precedes the <EM class=replaceable><CODE>object</CODE></EM> argument.</P>
<DIV class=table><A id=mop-sa-instance-stuct-table></A>
<P class=title><B>Table&nbsp;29.6.&nbsp;The correspondence between slot access 
function and underlying slot access generic function</B></P>
<DIV class=table-contents>
<TABLE 
summary="The correspondence between slot access function and&#10;  underlying slot access generic function" 
border=1>
  <COLGROUP>
  <COL>
  <COL></COLGROUP>
  <THEAD>
  <TR>
    <TH align=middle>Slot Access Function</TH>
    <TH align=middle>Corresponding Slot Access Generic Function</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" 
      target=_top><CODE class=function>SLOT-VALUE</CODE></A> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot-name</CODE></EM></TD>
    <TD align=middle><A 
      title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
      class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A> <EM 
      class=replaceable><CODE>class</CODE></EM> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot</CODE></EM></TD></TR>
  <TR>
    <TD align=middle><CODE class=code>(<A 
      href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
      target=_top><CODE class=function>SETF</CODE></A> <A 
      href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" 
      target=_top><CODE class=function>SLOT-VALUE</CODE></A>)</CODE> <EM 
      class=replaceable><CODE>new-value</CODE></EM> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot-name</CODE></EM></TD>
    <TD align=middle><A 
      title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
      class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> <EM 
      class=replaceable><CODE>new-value</CODE></EM> <EM 
      class=replaceable><CODE>class</CODE></EM> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot</CODE></EM></TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/fun_slot-boundp.html" 
      target=_top><CODE class=function>SLOT-BOUNDP</CODE></A> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot-name</CODE></EM></TD>
    <TD align=middle><A 
      title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
      class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A> <EM 
      class=replaceable><CODE>class</CODE></EM> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot</CODE></EM></TD></TR>
  <TR>
    <TD align=middle><A 
      href="http://www.lisp.org/HyperSpec/Body/fun_slot-makunbound.html" 
      target=_top><CODE class=function>SLOT-MAKUNBOUND</CODE></A> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot-name</CODE></EM></TD>
    <TD align=middle><A 
      title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
      href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
      class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A> <EM 
      class=replaceable><CODE>class</CODE></EM> <EM 
      class=replaceable><CODE>object</CODE></EM> <EM 
      class=replaceable><CODE>slot</CODE></EM></TD></TR></TBODY></TABLE></DIV></DIV><BR 
class=table-break>
<P>At the lowest level, the instance structure protocol provides only limited 
mechanisms for portable programs to control the implementation of instances and 
to directly access the storage associated with instances without going through 
the indirection of slot access. This is done to allow portable programs to 
perform certain commonly requested slot access optimizations.</P>
<P>In particular, portable programs can control the implementation of, and 
obtain direct access to, slots with allocation <CODE 
class=constant>:INSTANCE</CODE> and type <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
class=classname>T</CODE></A>. These are called <STRONG class=first><EM 
class=firstterm>directly accessible slots</EM></STRONG>.</P>
<P>The relevant specified around-method on <A 
title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A> determines the implementation of 
instances by deciding how each slot in the instance will be stored. For each 
directly accessible slot, this method allocates a <STRONG class=first><EM 
class=firstterm>location</EM></STRONG> and associates it with the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
definition metaobject</A>. The location can be accessed by calling the <A 
title="29.1.4.2.4.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-LOCATION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-location"><CODE 
class=function>CLOS:SLOT-DEFINITION-LOCATION</CODE></A> generic function. 
Locations are non-negative integers. For a given class, the locations increase 
consecutively, in the order that the directly accessible slots appear in the 
list of effective slots. (Note that here, the next paragraph, and the 
specification of this around-method are the only places where the value returned 
by <A title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A> is described as a list rather than 
a set.)</P>
<P>Given the location of a directly accessible slot, the value of that slot in 
an instance can be accessed with the appropriate accessor. For <A 
href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>, this accessor is 
the function <A title="29.1.10.3.1.&nbsp;Function CLOS:STANDARD-INSTANCE-ACCESS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access"><CODE 
class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A>. For <A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>, this accessor is the 
function <A 
title="29.1.10.3.2.&nbsp;Function CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access"><CODE 
class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A>. In each 
case, the arguments to the accessor are the instance and the slot location, in 
that order. See the definition of each accessor for additional restrictions on 
the use of these function.</P>
<P>Portable programs are permitted to affect and rely on the allocation of 
locations only in the following limited way: By first defining a portable 
primary method on <A 
title="29.1.3.6.11.&nbsp;Generic Function CLOS:COMPUTE-SLOTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#compute-slots"><CODE 
class=function>CLOS:COMPUTE-SLOTS</CODE></A> which orders the returned value in 
a predictable way, and then relying on the defined behavior of the specified 
around-method to assign locations to all directly accessible slots. Portable 
programs may compile-in calls to low-level accessors which take advantage of the 
resulting predictable allocation of slot locations.</P>
<DIV class=informalexample>
<P>This example shows the use of this mechanism to implement a new <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> class, <CODE class=classname>ordered-class</CODE> and class 
option <CODE class=constant>:SLOT-ORDER</CODE>. This option provides control 
over the allocation of slot locations. In this simple example implementation, 
the <CODE class=constant>:SLOT-ORDER</CODE> option is not inherited by 
subclasses; it controls only instances of the class itself. </P><PRE class=programlisting>(defclass ordered-class (standard-class)
  ((slot-order :initform ()
               :initarg :slot-order
               :reader class-slot-order)))

(defmethod compute-slots ((class ordered-class))
  (let ((order (class-slot-order class)))
    (sort (copy-list (call-next-method))
          #'(lambda (a b)
              (&lt; (position (slot-definition-name a) order)
                 (position (slot-definition-name a) order))))))
</PRE>
<P>Following is the source code the user of this extension would write. Note 
that because the code above does not implement inheritance of the <CODE 
class=constant>:SLOT-ORDER</CODE> option, the function <CODE 
class=function>distance</CODE> must not be called on instances of subclasses of 
<CODE class=classname>point</CODE>; it can only be called on instances of <CODE 
class=classname>point</CODE> itself. </P><PRE class=programlisting>(defclass point ()
  ((x :initform 0)
   (y :initform 0))
  (:metaclass ordered-class)
  (:slot-order x y))

(defun distance (point)
  (sqrt (/ (+ (expt (standard-instance-access point 0) 2)
              (expt (standard-instance-access point 1) 2))
           2.0)))
</PRE>
<P></P>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>You cannot assume that the slot-location values start at 0. In class <CODE 
class=classname>point</CODE>, for example, <EM 
class=replaceable><CODE>x</CODE></EM> and <EM 
class=replaceable><CODE>y</CODE></EM> will be at slot locations 1 and 2, not 0 
and 1.</P></DIV>
<P>In more realistic uses of this mechanism, the calls to the low-level instance 
structure accessors would not actually appear textually in the source program, 
but rather would be generated by a meta-level analysis program run during the 
process of compiling the source program. </P></DIV></DIV><!--mop-sa-instance-stuct-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A id=mop-sa-funcallable></A>29.1.10.2.&nbsp;Funcallable 
Instances</H4></DIV></DIV></DIV>
<P>Instances of classes which are themselves instances of <A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> or one of its 
subclasses are called <STRONG class=first><EM class=firstterm>funcallable 
instances</EM></STRONG>. Funcallable instances can only be created by <SPAN 
class=method><CODE class=literal><A 
href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> (<A 
title="29.1.10.2.&nbsp;Funcallable Instances" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>)</CODE></SPAN>.</P>
<P>Like standard instances, funcallable instances have slots with the normal 
behavior. They differ from standard instances in that they can be used as 
functions as well; that is, they can be passed to <A 
href="http://www.lisp.org/HyperSpec/Body/fun_funcall.html" target=_top><CODE 
class=function>FUNCALL</CODE></A> and <A 
href="http://www.lisp.org/HyperSpec/Body/fun_apply.html" target=_top><CODE 
class=function>APPLY</CODE></A>, and they can be stored as the definition of a 
function name. Associated with each funcallable instance is the function which 
it runs when it is called. This function can be changed with <A 
title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A>.</P>
<DIV class=informalexample>
<P>The following simple example shows the use of funcallable instances to create 
a simple, <A href="http://www.lisp.org/HyperSpec/Body/mac_defstruct.html" 
target=_top><CODE class=function>DEFSTRUCT</CODE></A>-like facility. 
(Funcallable instances are useful when a program needs to construct and maintain 
a set of functions and information about those functions. They make it possible 
to maintain both as the same object rather than two separate objects linked, for 
example, by hash tables.) </P><PRE class=programlisting>(defclass constructor ()
  ((name :initarg :name :accessor constructor-name)
   (fields :initarg :fields :accessor constructor-fields))
  (:metaclass funcallable-standard-class))
⇒&nbsp;<CODE class=computeroutput>#&gt;FUNCALLABLE-STANDARD-CLASS CONSTRUCTOR&gt;</CODE>
(defmethod initialize-instance :after ((c constructor) <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;KEY</CODE></A>)
  (with-slots (name fields) c
    (set-funcallable-instance-function
      c
      #'(lambda ()
          (let ((new (make-array (1+ (length fields)))))
            (setf (aref new 0) name)
            new)))))
⇒&nbsp;<CODE class=computeroutput>#&lt;STANDARD-METHOD :AFTER (#&lt;FUNCALLABLE-STANDARD-CLASS CONSTRUCTOR&gt;)&gt;</CODE>
(setq c1 (make-instance 'constructor :name 'position :fields '(x y)))
⇒&nbsp;<CODE class=computeroutput>#&lt;CONSTRUCTOR #&lt;UNBOUND&gt;&gt;</CODE>
(setq p1 (funcall c1))
⇒&nbsp;<CODE class=computeroutput>#(POSITION NIL NIL)</CODE>
</PRE></DIV></DIV><!--mop-sa-funcallable-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-sa-customize></A>29.1.10.3.&nbsp;Customization</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access">29.1.10.3.1. 
  Function <CODE class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access">29.1.10.3.2. 
  Function <CODE 
  class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif">29.1.10.3.3. 
  Function <CODE 
  class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC">29.1.10.3.4. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC">29.1.10.3.5. 
  Generic Function <CODE class=code>(SETF 
  CLOS:SLOT-VALUE-USING-CLASS)</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC">29.1.10.3.6. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC">29.1.10.3.7. 
  Generic Function <CODE 
  class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A></SPAN></DT></DL></DIV><!--begin slot access basic customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=standard-instance-access></A>29.1.10.3.1.&nbsp;Function <A 
title="29.1.10.3.1.&nbsp;Function CLOS:STANDARD-INSTANCE-ACCESS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access"><CODE 
class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.1.&nbsp;Function CLOS:STANDARD-INSTANCE-ACCESS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access"><CODE 
  class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A> <EM 
  class=replaceable><CODE>instance</CODE></EM> <EM 
  class=replaceable><CODE>location</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>instance</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>location</CODE></EM></SPAN>
    <DD>a slot location</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result of this function is an object. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function is called to provide direct access to a slot in an instance. 
  By usurping the normal slot lookup protocol, this function is intended to 
  provide highly optimized access to the slots associated with an instance.</P>
  <P>The following restrictions apply to the use of this function: </P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI>The <EM class=replaceable><CODE>instance</CODE></EM> argument must be a 
    standard instance (it must have been returned by <SPAN class=method><CODE 
    class=literal><A 
    href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
    target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A>(<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>)</CODE></SPAN>). 

    <LI>The <EM class=replaceable><CODE>instance</CODE></EM> argument cannot be 
    an non-updated obsolete instance.
    <LI>The <EM class=replaceable><CODE>location</CODE></EM> argument must be a 
    location of one of the directly accessible slots of the instance's class. 
    <LI>The slot must be bound. </LI></UL></DIV>
  <P>The results are undefined if any of these restrictions are 
  violated.</P></DD></DL></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The second and third restrictions do not apply in <A 
href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></A>. <A href="http://clisp.cons.org/" 
target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A>'s 
implementation supports non-updated obsolete instances and also supports slots 
with allocation <CODE class=constant>:CLASS</CODE>. </P></DIV></DIV><!--standard-instance-access-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A 
id=funcallable-standard-instance-access></A>29.1.10.3.2.&nbsp;Function <A 
title="29.1.10.3.2.&nbsp;Function CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access"><CODE 
class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.2.&nbsp;Function CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access"><CODE 
  class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A> <EM 
  class=replaceable><CODE>instance</CODE></EM> <EM 
  class=replaceable><CODE>location</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>instance</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>location</CODE></EM></SPAN>
    <DD>a slot location</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The result of this function is an object. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This function is called to provide direct access to a slot in an instance. 
  By usurping the normal slot lookup protocol, this function is intended to 
  provide highly optimized access to the slots associated with an instance.</P>
  <P>The following restrictions apply to the use of this function: </P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI>The <EM class=replaceable><CODE>instance</CODE></EM> argument must be a 
    funcallable instance (it must have been returned by <SPAN class=method><CODE 
    class=literal><A 
    href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
    target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>)</CODE></SPAN>).
    <LI>The <EM class=replaceable><CODE>instance</CODE></EM> argument cannot be 
    an non-updated obsolete instance.
    <LI>The <EM class=replaceable><CODE>location</CODE></EM> argument must be a 
    location of one of the directly accessible slots of the instance's class. 
    <LI>The slot must be bound. </LI></UL></DIV>
  <P>The results are undefined if any of these restrictions are 
  violated.</P></DD></DL></DIV>
<DIV class=note style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<H3 class=title>Implementation dependent: only in <SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></H3>
<P>The second and third restrictions do not apply in <A 
href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></A>. <A href="http://clisp.cons.org/" 
target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A>'s 
implementation supports non-updated obsolete instances and also supports slots 
with allocation <CODE class=constant>:CLASS</CODE>. </P></DIV></DIV><!--funcallable-standard-instance-access-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=set-fif></A>29.1.10.3.3.&nbsp;Function <A 
title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
  class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A> <EM 
  class=replaceable><CODE>funcallable-instance</CODE></EM> <EM 
  class=replaceable><CODE>function</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>funcallable-instance</CODE></EM></SPAN>
    <DD>a funcallable instance (it must have been returned by <SPAN 
    class=method><CODE class=literal><A 
    href="http://www.lisp.org/HyperSpec/Body/stagenfun_all_ate-instance.html" 
    target=_top><CODE class=function>ALLOCATE-INSTANCE</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>)</CODE></SPAN>). 
    <DT><SPAN class=term><EM class=replaceable><CODE>function</CODE></EM></SPAN>
    <DD>a function.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This function is called to set or to change the function of a funcallable 
  instance. After <A 
  title="29.1.10.3.3.&nbsp;Function CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#set-fif"><CODE 
  class=function>CLOS:SET-FUNCALLABLE-INSTANCE-FUNCTION</CODE></A> is called, 
  any subsequent calls to <EM 
  class=replaceable><CODE>funcallable-instance</CODE></EM> will run the new 
  function.</DD></DL></DIV></DIV><!--set-fif--><!--end slot access basic customization--><!--begin slot access advanced customization-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=slot-value-UC></A>29.1.10.3.4.&nbsp;Generic Function <A 
title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
  class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> - the class of the <EM 
    class=replaceable><CODE>object</CODE></EM> argument
    <DT><SPAN class=term><EM class=replaceable><CODE>object</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>slot</CODE></EM></SPAN>
    <DD>an <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
    <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A></DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is an object. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function implements the behavior of the <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" 
  target=_top><CODE class=function>SLOT-VALUE</CODE></A> function. It is called 
  by <A href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" 
  target=_top><CODE class=function>SLOT-VALUE</CODE></A> with the class of <EM 
  class=replaceable><CODE>object</CODE></EM> as its first argument and the 
  pertinent <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> as its third argument.</P>
  <P>The generic function <A 
  title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
  class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A> returns the value 
  contained in the given slot of the given object. If the slot is unbound, <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_slot-unbound.html" 
  target=_top><CODE class=function>SLOT-UNBOUND</CODE></A> is called.</P>
  <P>The results are undefined if the <EM 
  class=replaceable><CODE>class</CODE></EM> argument is not the class of the <EM 
  class=replaceable><CODE>object</CODE></EM> argument, or if the <EM 
  class=replaceable><CODE>slot</CODE></EM> argument does not appear among the 
  set of effective slots associated with the <EM 
  class=replaceable><CODE>class</CODE></EM> argument.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
  class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
  class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>These methods implement the full behavior of this generic function for 
  slots with allocation <CODE class=constant>:INSTANCE</CODE> and <CODE 
  class=constant>:CLASS</CODE>. If the supplied slot has an allocation other 
  than <CODE class=constant>:INSTANCE</CODE> or <CODE 
  class=constant>:CLASS</CODE> an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>Overriding these methods is permitted, but may require overriding other 
  methods in the standard implementation of the slot access protocol.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.4.&nbsp;Generic Function CLOS:SLOT-VALUE-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-value-UC"><CODE 
  class=function>CLOS:SLOT-VALUE-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
  target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>. </DD></DL></DIV></DIV><!--slot-value-UC-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=setf-slot-value-UC></A>29.1.10.3.5.&nbsp;Generic Function 
<A title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
  class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> <EM 
  class=replaceable><CODE>new-value</CODE></EM> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
class=replaceable><CODE>new-value</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> - the class of the <EM 
    class=replaceable><CODE>object</CODE></EM> argument.
    <DT><SPAN class=term><EM class=replaceable><CODE>object</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>slot</CODE></EM></SPAN>
    <DD>an <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
    <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns the <EM 
  class=replaceable><CODE>new-value</CODE></EM> argument. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>The generic function <A 
  title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
  class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> implements the 
  behavior of the <CODE class=code>(<A 
  href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
  target=_top><CODE class=function>SETF</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" 
  target=_top><CODE class=function>SLOT-VALUE</CODE></A>)</CODE> function. It is 
  called by <CODE class=code>(<A 
  href="http://www.lisp.org/HyperSpec/Body/mac_setfcm_psetf.html" 
  target=_top><CODE class=function>SETF</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_slot-value.html" 
  target=_top><CODE class=function>SLOT-VALUE</CODE></A>)</CODE> with the class 
  of <EM class=replaceable><CODE>object</CODE></EM> as its second argument and 
  the pertinent <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> as its fourth argument.</P>
  <P>The generic function <A 
  title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
  class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> sets the value 
  contained in the given slot of the given object to the given new value; any 
  previous value is lost.</P>
  <P>The results are undefined if the <EM 
  class=replaceable><CODE>class</CODE></EM> argument is not the class of the <EM 
  class=replaceable><CODE>object</CODE></EM> argument, or if the <EM 
  class=replaceable><CODE>slot</CODE></EM> argument does not appear among the 
  set of effective slots associated with the <EM 
  class=replaceable><CODE>class</CODE></EM> argument.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
  class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> <EM 
  class=replaceable><CODE>new-value</CODE></EM> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
  class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> <EM 
  class=replaceable><CODE>new-value</CODE></EM> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>These methods implement the full behavior of this generic function for 
  slots with allocation <CODE class=constant>:INSTANCE</CODE> and <CODE 
  class=constant>:CLASS</CODE>. If the supplied slot has an allocation other 
  than <CODE class=constant>:INSTANCE</CODE> or <CODE 
  class=constant>:CLASS</CODE> an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>Overriding these methods is permitted, but may require overriding other 
  methods in the standard implementation of the slot access protocol.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.5.&nbsp;Generic Function (SETF CLOS:SLOT-VALUE-USING-CLASS)" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#setf-slot-value-UC"><CODE 
  class=code>(SETF CLOS:SLOT-VALUE-USING-CLASS)</CODE></A> <EM 
  class=replaceable><CODE>new-value</CODE></EM> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
  target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>. </DD></DL></DIV></DIV><!--setf-slot-value-UC-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=slot-boundp-UC></A>29.1.10.3.6.&nbsp;Generic Function <A 
title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
  class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> - the class of the <EM 
    class=replaceable><CODE>object</CODE></EM> argument.
    <DT><SPAN class=term><EM class=replaceable><CODE>object</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>slot</CODE></EM></SPAN>
    <DD>an <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
    <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns true or false. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function implements the behavior of the <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_slot-boundp.html" 
  target=_top><CODE class=function>SLOT-BOUNDP</CODE></A> function. It is called 
  by <A href="http://www.lisp.org/HyperSpec/Body/fun_slot-boundp.html" 
  target=_top><CODE class=function>SLOT-BOUNDP</CODE></A> with the class of <EM 
  class=replaceable><CODE>object</CODE></EM> as its first argument and the 
  pertinent <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> as its third argument.</P>
  <P>The generic function <A 
  title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
  class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A> tests whether a 
  specific slot in an instance is bound.</P>
  <P>The results are undefined if the <EM 
  class=replaceable><CODE>class</CODE></EM> argument is not the class of the <EM 
  class=replaceable><CODE>object</CODE></EM> argument, or if the <EM 
  class=replaceable><CODE>slot</CODE></EM> argument does not appear among the 
  set of effective slots associated with the <EM 
  class=replaceable><CODE>class</CODE></EM> argument.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
  class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
  class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>These methods implement the full behavior of this generic function for 
  slots with allocation <CODE class=constant>:INSTANCE</CODE> and <CODE 
  class=constant>:CLASS</CODE>. If the supplied slot has an allocation other 
  than <CODE class=constant>:INSTANCE</CODE> or <CODE 
  class=constant>:CLASS</CODE> an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>Overriding these methods is permitted, but may require overriding other 
  methods in the standard implementation of the slot access protocol.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.6.&nbsp;Generic Function CLOS:SLOT-BOUNDP-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-boundp-UC"><CODE 
  class=function>CLOS:SLOT-BOUNDP-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
  target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>.</DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>In cases where the <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
metaobject</A> class does not distinguish unbound slots, true should be 
returned.</P></DIV><!--slot-boundp-UC-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=slot-makunbound-UC></A>29.1.10.3.7.&nbsp;Generic Function 
<A title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
  class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A> <EM 
  class=replaceable><CODE>class</CODE></EM> <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM class=replaceable><CODE>class</CODE></EM></SPAN>
    <DD>a <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
    metaobject</A> - the class of the <EM 
    class=replaceable><CODE>object</CODE></EM> argument.
    <DT><SPAN class=term><EM class=replaceable><CODE>object</CODE></EM></SPAN>
    <DD>an object
    <DT><SPAN class=term><EM class=replaceable><CODE>slot</CODE></EM></SPAN>
    <DD>an <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
    <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
    definition metaobject</A>.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>This generic function returns its <EM 
  class=replaceable><CODE>object</CODE></EM> argument. 
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function implements the behavior of the <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_slot-makunbound.html" 
  target=_top><CODE class=function>SLOT-MAKUNBOUND</CODE></A> function. It is 
  called by <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_slot-makunbound.html" 
  target=_top><CODE class=function>SLOT-MAKUNBOUND</CODE></A> with the class of 
  <EM class=replaceable><CODE>object</CODE></EM> as its first argument and the 
  pertinent <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-esd-mo">effective</A> 
  <A href="http://clisp.cons.org/impnotes/mop-chap.html#mop-slot-def-mo">slot 
  definition metaobject</A> as its third argument.</P>
  <P>The generic function <A 
  title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
  class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A> restores a slot in 
  an object to its unbound state. The interpretation of “<SPAN 
  class=quote>restoring a slot to its unbound state</SPAN>” depends on the <A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-class-mo">class 
  metaobject</A> class.</P>
  <P>The results are undefined if the <EM 
  class=replaceable><CODE>class</CODE></EM> argument is not the class of the <EM 
  class=replaceable><CODE>object</CODE></EM> argument, or if the <EM 
  class=replaceable><CODE>slot</CODE></EM> argument does not appear among the 
  set of effective slots associated with the <EM 
  class=replaceable><CODE>class</CODE></EM> argument.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
  class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN><BR></SPAN><SPAN 
  class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
  class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> (<EM 
  class=replaceable><CODE>slot</CODE></EM> <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:STANDARD-EFFECTIVE-SLOT-DEFINITION</CODE></A>))</CODE></SPAN></SPAN>
  <DD>
  <P>These methods implement the full behavior of this generic function for 
  slots with allocation <CODE class=constant>:INSTANCE</CODE> and <CODE 
  class=constant>:CLASS</CODE>. If the supplied slot has an allocation other 
  than <CODE class=constant>:INSTANCE</CODE> or <CODE 
  class=constant>:CLASS</CODE> an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>Overriding these methods is permitted, but may require overriding other 
  methods in the standard implementation of the slot access protocol.</P>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.10.3.7.&nbsp;Generic Function CLOS:SLOT-MAKUNBOUND-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slot-makunbound-UC"><CODE 
  class=function>CLOS:SLOT-MAKUNBOUND-USING-CLASS</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_built-in-class.html" 
  target=_top><CODE class=classname>BUILT-IN-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>object</CODE></EM> <EM 
  class=replaceable><CODE>slot</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>This method <A href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" 
  target=_top><CODE class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A>. </DD></DL></DIV></DIV><!--slot-makunbound-UC--><!--end slot access advanced customization--></DIV><!--mop-sa-customize--></DIV><!--mop-slot-access-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-dep-maint></A>29.1.11.&nbsp;Dependent 
Maintenance</H3></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint-protocol">29.1.11.1. 
  Protocol</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent">29.1.11.1.1. 
    Generic Function <CODE 
class=function>CLOS:UPDATE-DEPENDENT</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent">29.1.11.1.2. 
    Generic Function <CODE class=function>CLOS:ADD-DEPENDENT</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent">29.1.11.1.3. 
    Generic Function <CODE 
class=function>CLOS:REMOVE-DEPENDENT</CODE></A></SPAN>
    <DT><SPAN class=section><A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents">29.1.11.1.4. 
    Generic Function <CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A></SPAN></DT></DL></DD></DL></DIV>
<P>It is convenient for portable metaobjects to be able to memoize information 
about other metaobjects, portable or otherwise. Because class and <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s can be reinitialized, and <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s can be modified by adding and removing methods, a means 
must be provided to update this memoized information.</P>
<P>The dependent maintenance protocol supports this by providing a way to 
register an object which should be notified whenever a class or generic function 
is modified. An object which has been registered this way is called a <STRONG 
class=first><EM class=firstterm>dependent</EM></STRONG> of the class or <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>. The dependents of class and <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A>s are maintained with <A 
title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
class=function>CLOS:ADD-DEPENDENT</CODE></A> and <A 
title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
class=function>CLOS:REMOVE-DEPENDENT</CODE></A>. The dependents of a class or <A 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
function metaobject</A> can be accessed with <A 
title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
class=function>CLOS:MAP-DEPENDENTS</CODE></A>. Dependents are notified about a 
modification by calling <A 
title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
class=function>CLOS:UPDATE-DEPENDENT</CODE></A>. (See the specification of <A 
title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
class=function>CLOS:UPDATE-DEPENDENT</CODE></A> for detailed description of the 
circumstances under which it is called.)</P>
<P>To prevent conflicts between two portable programs, or between portable 
programs and the implementation, portable code must not register metaobjects 
themselves as dependents. Instead, portable programs which need to record a 
metaobject as a dependent, should encapsulate that metaobject in some other kind 
of object, and record that object as the dependent. The results are undefined if 
this restriction is violated.</P>
<DIV class=informalexample>
<P>This example shows a general facility for encapsulating metaobjects before 
recording them as dependents. The facility defines a basic kind of encapsulating 
object: an updater. Specializations of the basic class can be defined with 
appropriate special updating behavior. In this way, information about the 
updating required is associated with each updater rather than with the 
metaobject being updated.</P>
<P>Updaters are used to encapsulate any metaobject which requires updating when 
a given class or generic function is modified. The function <CODE 
class=function>record-updater</CODE> is called to both create an updater and add 
it to the dependents of the class or generic function. Methods on the generic 
function <A title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
class=function>CLOS:UPDATE-DEPENDENT</CODE></A>, specialized to the specific 
class of updater do the appropriate update work.</P><PRE class=programlisting>(defclass updater ()
  ((dependent :initarg :dependent :reader dependent)))

(defun record-updater (class dependee dependent <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;REST</CODE></A> initargs)
  (let ((updater (apply #'make-instance class :dependent dependent
                                              initargs)))
    (add-dependent dependee updater)
    updater))
</PRE>
<P>A <CODE class=function>flush-cache-updater</CODE> simply flushes the cache of 
the dependent when it is updated.</P><PRE class=programlisting>(defclass flush-cache-updater (updater) ())

(defmethod update-dependent (dependee (updater flush-cache-updater)
                             <A href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE class=literal>&amp;REST</CODE></A> args)
  (declare (ignore args))
  (flush-cache (dependent updater)))
</PRE></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H4 class=title><A 
id=mop-dep-maint-protocol></A>29.1.11.1.&nbsp;Protocol</H4></DIV></DIV></DIV>
<DIV class=toc>
<DL>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent">29.1.11.1.1. 
  Generic Function <CODE class=function>CLOS:UPDATE-DEPENDENT</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent">29.1.11.1.2. 
  Generic Function <CODE class=function>CLOS:ADD-DEPENDENT</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent">29.1.11.1.3. 
  Generic Function <CODE class=function>CLOS:REMOVE-DEPENDENT</CODE></A></SPAN>
  <DT><SPAN class=section><A 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents">29.1.11.1.4. 
  Generic Function <CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A></SPAN></DT></DL></DIV>
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=update-dependent></A>29.1.11.1.1.&nbsp;Generic Function <A 
title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
class=function>CLOS:UPDATE-DEPENDENT</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
  class=function>CLOS:UPDATE-DEPENDENT</CODE></A> <EM 
  class=replaceable><CODE>metaobject</CODE></EM> <EM 
  class=replaceable><CODE>dependent</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/sec_3-4-1.html" target=_top><CODE 
  class=literal>&amp;REST</CODE></A> <EM 
  class=replaceable><CODE>initargs</CODE></EM>) </CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>metaobject</CODE></EM></SPAN>
    <DD>a class or <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A> - the metaobject being reinitialized or otherwise 
    modified.
    <DT><SPAN class=term><EM 
class=replaceable><CODE>dependent</CODE></EM></SPAN>
    <DD>an object - the dependent being updated. 
    <DT><SPAN class=term><EM class=replaceable><CODE>initargs</CODE></EM></SPAN>
    <DD>a list of the initialization arguments for the metaobject 
    redefinition.</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function is called to update a dependent of <EM 
  class=replaceable><CODE>metaobject</CODE></EM>.</P>
  <P>When a class or a generic function is reinitialized each of its dependents 
  is updated. The <EM class=replaceable><CODE>initargs</CODE></EM> argument to 
  <A title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
  class=function>CLOS:UPDATE-DEPENDENT</CODE></A> is the set of initialization 
  arguments received by <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_rei_ize-instance.html" 
  target=_top><CODE class=function>REINITIALIZE-INSTANCE</CODE></A>.</P>
  <P>When a method is added to a generic function, each of the generic 
  function's dependents is updated. The <EM 
  class=replaceable><CODE>initargs</CODE></EM> argument is a list of two 
  elements: the symbol <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_add-method.html" 
  target=_top><CODE class=function>ADD-METHOD</CODE></A>, and the method that 
  was added.</P>
  <P>When a method is removed from a generic function, each of the generic 
  function's dependents is updated. The <EM 
  class=replaceable><CODE>initargs</CODE></EM> argument is a list of two 
  elements: the symbol <A 
  href="http://www.lisp.org/HyperSpec/Body/stagenfun_remove-method.html" 
  target=_top><CODE class=function>REMOVE-METHOD</CODE></A>, and the method that 
  was removed.</P>
  <P>In each case, <A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> is used to call <A 
  title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE 
  class=function>CLOS:UPDATE-DEPENDENT</CODE></A> on each of the dependents. So, 
  for example, the update of a generic function's dependents when a method is 
  added could be performed by the following code:</P><PRE class=programlisting>  (<A title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE class=function>CLOS:MAP-DEPENDENTS</CODE></A> <EM class=replaceable><CODE>generic-function</CODE></EM>
                  #'(lambda (dep)
                      (<A title="29.1.11.1.1.&nbsp;Generic Function CLOS:UPDATE-DEPENDENT" href="http://clisp.cons.org/impnotes/mop-chap.html#update-dependent"><CODE class=function>CLOS:UPDATE-DEPENDENT</CODE></A> <EM class=replaceable><CODE>generic-function</CODE></EM>
                                        dep
                                        'add-method
                                        new-method)))
</PRE></DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>See <A title="29.1.11.&nbsp;Dependent Maintenance" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint">Section&nbsp;29.1.11, 
“Dependent Maintenance”</A> for remarks about the use of this 
facility.</P></DIV><!--update-dependent-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=add-dependent></A>29.1.11.1.2.&nbsp;Generic Function <A 
title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
class=function>CLOS:ADD-DEPENDENT</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> <EM 
  class=replaceable><CODE>metaobject</CODE></EM> <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>metaobject</CODE></EM></SPAN>
    <DD>a class or <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>
    <DT><SPAN class=term><EM 
class=replaceable><CODE>dependent</CODE></EM></SPAN>
    <DD>an object</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function adds <EM 
  class=replaceable><CODE>dependent</CODE></EM> to the dependents of <EM 
  class=replaceable><CODE>metaobject</CODE></EM>. If <EM 
  class=replaceable><CODE>dependent</CODE></EM> is already in the set of 
  dependents it is not added again (no <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed).</P>
  <P>The generic function <A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> can be called to access the set 
  of dependents of a class or generic function. The generic function <A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> can be called to remove an 
  object from the set of dependents of a class or generic function. The effect 
  of calling <A title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> or <A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> while a call to <A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> on the same class or generic 
  function is in progress is unspecified.</P>
  <P>The situations in which <A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> is called are not 
  specified.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
    class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
    class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> (<EM 
  class=replaceable><CODE>generic-function</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
    class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV></DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>See <A title="29.1.11.&nbsp;Dependent Maintenance" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint">Section&nbsp;29.1.11, 
“Dependent Maintenance”</A> for remarks about the use of this 
facility.</P></DIV><!--add-dependent-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=remove-dependent></A>29.1.11.1.3.&nbsp;Generic Function <A 
title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
class=function>CLOS:REMOVE-DEPENDENT</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> <EM 
  class=replaceable><CODE>metaobject</CODE></EM> <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>metaobject</CODE></EM></SPAN>
    <DD>a class or <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>
    <DT><SPAN class=term><EM 
class=replaceable><CODE>dependent</CODE></EM></SPAN>
    <DD>an object</DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>
  <P>This generic function removes <EM 
  class=replaceable><CODE>dependent</CODE></EM> from the dependents of <EM 
  class=replaceable><CODE>metaobject</CODE></EM>. If <EM 
  class=replaceable><CODE>dependent</CODE></EM> is not one of the dependents of 
  <EM class=replaceable><CODE>metaobject</CODE></EM>, no <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> is <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>ed.</P>
  <P>The generic function <A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> can be called to access the set 
  of dependents of a class or generic function. The generic function <A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> can be called to add an object 
  from the set of dependents of a class or generic function. The effect of 
  calling <A title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> or <A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> while a call to <A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> on the same class or generic 
  function is in progress is unspecified.</P>
  <P>The situations in which <A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> is called are not 
  specified.</P></DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
    class=function>CLOS:ADD-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
    class=function>CLOS:ADD-DEPENDENT</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<EM 
  class=replaceable><CODE>class</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>dependent</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
    class=function>CLOS:ADD-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
    class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV></DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>See <A title="29.1.11.&nbsp;Dependent Maintenance" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint">Section&nbsp;29.1.11, 
“Dependent Maintenance”</A> for remarks about the use of this 
facility.</P></DIV><!--remove-dependent-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H5 class=title><A id=map-dependents></A>29.1.11.1.4.&nbsp;Generic Function <A 
title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
class=function>CLOS:MAP-DEPENDENTS</CODE></A></H5></DIV></DIV></DIV>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Syntax</SPAN>
  <DD><CODE class=code>(<A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> <EM 
  class=replaceable><CODE>metaobject</CODE></EM> <EM 
  class=replaceable><CODE>function</CODE></EM>)</CODE>
  <DT><SPAN class=term>Arguments</SPAN>
  <DD>
  <DIV class=variablelist>
  <DL>
    <DT><SPAN class=term><EM 
    class=replaceable><CODE>metaobject</CODE></EM></SPAN>
    <DD>a class or <A 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gen-fun-mo">generic 
    function metaobject</A>.
    <DT><SPAN class=term><EM class=replaceable><CODE>function</CODE></EM></SPAN>
    <DD>a function which accepts one argument. </DD></DL></DIV>
  <DT><SPAN class=term>Values</SPAN>
  <DD>The value returned by this generic function is unspecified.
  <DT><SPAN class=term>Purpose</SPAN>
  <DD>This generic function applies <EM 
  class=replaceable><CODE>function</CODE></EM> to each of the dependents of <EM 
  class=replaceable><CODE>metaobject</CODE></EM>. The order in which the 
  dependents are processed is not specified, but <EM 
  class=replaceable><CODE>function</CODE></EM> is applied to each dependent once 
  and only once. If, during the mapping, <A 
  title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
  class=function>CLOS:ADD-DEPENDENT</CODE></A> or <A 
  title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
  class=function>CLOS:REMOVE-DEPENDENT</CODE></A> is called to alter the 
  dependents of <EM class=replaceable><CODE>metaobject</CODE></EM>, it is not 
  specified whether the newly added or removed dependent will have <EM 
  class=replaceable><CODE>function</CODE></EM> applied to it. </DD></DL></DIV>
<DIV class=variablelist>
<P class=title><B>Methods</B></P>
<DL>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<EM 
  class=replaceable><CODE>metaobject</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
  target=_top><CODE class=classname>STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>function</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
    class=function>CLOS:ADD-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
    class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standard-class.html" 
    target=_top><CODE class=classname>STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<EM 
  class=replaceable><CODE>metaobject</CODE></EM> <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A>) <EM 
  class=replaceable><CODE>function</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
    class=function>CLOS:ADD-DEPENDENT</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
    class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<A 
    title="29.1.10.2.&nbsp;Funcallable Instances" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
    class=classname>CLOS:FUNCALLABLE-STANDARD-CLASS</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV>
  <DT><SPAN class=term><SPAN class=method><CODE class=literal>(<A 
  title="29.1.11.1.4.&nbsp;Generic Function CLOS:MAP-DEPENDENTS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#map-dependents"><CODE 
  class=function>CLOS:MAP-DEPENDENTS</CODE></A> (<EM 
  class=replaceable><CODE>metaobject</CODE></EM> <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
  target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A>) <EM 
  class=replaceable><CODE>function</CODE></EM>)</CODE></SPAN></SPAN>
  <DD>
  <P>No behavior is specified for this method beyond that which is specified for 
  the generic function.</P>
  <P>This method cannot be overridden unless the following methods are 
  overridden as well:</P>
  <DIV class=itemizedlist>
  <UL type=disc>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.2.&nbsp;Generic Function CLOS:ADD-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#add-dependent"><CODE 
    class=function>CLOS:ADD-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN>
    <LI><SPAN class=method><CODE class=literal><A 
    title="29.1.11.1.3.&nbsp;Generic Function CLOS:REMOVE-DEPENDENT" 
    href="http://clisp.cons.org/impnotes/mop-chap.html#remove-dependent"><CODE 
    class=function>CLOS:REMOVE-DEPENDENT</CODE></A> (<A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_standa_ric-function.html" 
    target=_top><CODE class=classname>STANDARD-GENERIC-FUNCTION</CODE></A> <A 
    href="http://www.lisp.org/HyperSpec/Body/syscla_t.html" target=_top><CODE 
    class=classname>T</CODE></A>)</CODE></SPAN></LI></UL></DIV></DD></DL></DIV>
<P><B>Remarks.&nbsp;</B>See <A title="29.1.11.&nbsp;Dependent Maintenance" 
href="http://clisp.cons.org/impnotes/mop-chap.html#mop-dep-maint">Section&nbsp;29.1.11, 
“Dependent Maintenance”</A> for remarks about the use of this 
facility.</P></DIV><!--map-dependents--></DIV><!--mop-dep-maint-protocol--></DIV><!--mop-dep-maint-->
<DIV class=section lang=en xml:lang="en">
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A id=mop-clisp></A>29.1.12.&nbsp;Deviations from [<A 
href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>]</H3></DIV></DIV></DIV>
<P>This section lists the differences between the [<A 
href="http://clisp.cons.org/impnotes/references.html#amop"><ABBR 
class=abbrev>AMOP</ABBR></A>] and the <A href="http://clisp.cons.org/" 
target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A> implementation 
thereof.</P>
<DIV class=itemizedlist><A id=mop-not-in-clisp></A>
<P class=title><B>Not implemented in <A href="http://clisp.cons.org/" 
target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A></B></P>
<UL type=disc>
  <LI>
  <P>The generic function <A 
  title="29.1.5.4.10.&nbsp;Generic Function CLOS:MAKE-METHOD-LAMBDA" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#make-method-lambda"><CODE 
  class=function>CLOS:MAKE-METHOD-LAMBDA</CODE></A> is not implemented. See <A 
  title="29.1.5.3.2.&nbsp;Generic Function Invocation Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-invocation">Section&nbsp;29.1.5.3.2, 
  “Generic Function Invocation Protocol”</A>.</P></LI></UL></DIV>
<DIV class=itemizedlist><A id=mop-clisp-different></A>
<P class=title><B>Features implemented differently in <A 
href="http://clisp.cons.org/" target=_top><SPAN><STRONG 
class=command>CLISP</STRONG></SPAN></A></B></P>
<UL type=disc>
  <LI>
  <P>The class precedence list of <A 
  title="29.1.10.2.&nbsp;Funcallable Instances" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-sa-funcallable"><CODE 
  class=classname>CLOS:FUNCALLABLE-STANDARD-OBJECT</CODE></A> is different. See 
  <A title="29.1.2.2.&nbsp;Inheritance Structure of Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-cl-inheritance">Section&nbsp;29.1.2.2, 
  “Inheritance Structure of Metaobject Classes”</A>.</P>
  <LI>
  <P>The <A href="http://www.lisp.org/HyperSpec/Body/mac_defclass.html" 
  target=_top><CODE class=function>DEFCLASS</CODE></A> macro passes default 
  values to <A title="29.1.3.6.2.&nbsp;Generic Function CLOS:ENSURE-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-class"><CODE 
  class=function>CLOS:ENSURE-CLASS</CODE></A>. See <A 
  title="29.1.3.1.&nbsp;Macro DEFCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-defclass">Section&nbsp;29.1.3.1, 
  “Macro <CODE class=function>DEFCLASS</CODE>”</A>.</P>
  <LI>
  <P>The <A href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> macro passes default 
  values to <A title="29.1.5.4.2.&nbsp;Generic Function ENSURE-GENERIC-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf"><CODE 
  class=function>ENSURE-GENERIC-FUNCTION</CODE></A>. See <A 
  title="29.1.5.3.1.&nbsp;Macro DEFGENERIC" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-gf-init-defgeneric">Section&nbsp;29.1.5.3.1, 
  “Macro <CODE class=function>DEFGENERIC</CODE>”</A>.</P>
  <LI>
  <P>The class <A 
  title="Table&nbsp;29.1.&nbsp;Direct Superclass Relationships Among The Specified Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-inherit-struct"><CODE 
  class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE></A> is implemented 
  differently. See <A 
  title="Implementation of class CLOS:FORWARD-REFERENCED-CLASS in CLISP" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#forward-referenced-class-clisp">Implementation 
  of class <CODE class=classname>CLOS:FORWARD-REFERENCED-CLASS</CODE> in 
  <SPAN><STRONG class=command>CLISP</STRONG></SPAN></A>.</P>
  <LI>
  <P>The function <A 
  title="29.1.5.2.4.&nbsp;Generic Function CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#gf-argument-precedence-order"><CODE 
  class=function>CLOS:GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER</CODE></A> <A 
  href="http://www.lisp.org/HyperSpec/Body/fun_signal.html" target=_top><CODE 
  class=function>SIGNAL</CODE></A>s an <A 
  href="http://www.lisp.org/HyperSpec/Body/contyp_error.html" target=_top><CODE 
  class=classname>ERROR</CODE></A> if the generic function has no <A 
  title="3.4.&nbsp;Lambda Lists [CLHS-3.4]" 
  href="http://clisp.cons.org/impnotes/lalist.html">lambda 
list</A>.</P></LI></UL></DIV>
<DIV class=itemizedlist><A id=mop-clisp-ext></A>
<P class=title><B>Extensions specific to <A href="http://clisp.cons.org/" 
target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A></B></P>
<UL type=disc>
  <LI>
  <P>The <A title="29.1.&nbsp;Meta-Object Protocol" 
  href="http://clisp.cons.org/impnotes/mop-chap.html">Meta-Object Protocol</A> 
  is applicable to classes of type <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_structure-class.html" 
  target=_top><CODE class=classname>STRUCTURE-CLASS</CODE></A>. The default 
  superclass for <A 
  href="http://www.lisp.org/HyperSpec/Body/syscla_structure-class.html" 
  target=_top><CODE class=classname>STRUCTURE-CLASS</CODE></A> instances is <A 
  href="http://www.lisp.org/HyperSpec/Body/cla_structure-object.html" 
  target=_top><CODE class=classname>STRUCTURE-OBJECT</CODE></A>. Structure 
  classes do not support multiple inheritance and reinitialization. See <A 
  title="29.1.3.5.1.&nbsp;Initialization of class metaobjects" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-cl-init-mo">Section&nbsp;29.1.3.5.1, 
  “Initialization of class metaobjects”</A>.</P>
  <LI>
  <P>The <A href="http://www.lisp.org/HyperSpec/Body/mac_defgeneric.html" 
  target=_top><CODE class=function>DEFGENERIC</CODE></A> macro supports 
  user-defined options. See <A title="User-defined options" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-defgeneric-user-options">User-defined 
  options</A>.</P>
  <LI>
  <P>The class <A href="http://www.lisp.org/HyperSpec/Body/syscla_method.html" 
  target=_top><CODE class=classname>METHOD</CODE></A> is subclassable. See <A 
  title="29.1.2.2.&nbsp;Inheritance Structure of Metaobject Classes" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#mop-mo-cl-inheritance">Section&nbsp;29.1.2.2, 
  “Inheritance Structure of Metaobject Classes”</A>.</P>
  <LI>
  <P>Slot names like <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_nil.html" target=_top><CODE 
  class=constant>NIL</CODE></A> and <A 
  href="http://www.lisp.org/HyperSpec/Body/convar_t.html" target=_top><CODE 
  class=constant>T</CODE></A> are allowed. See <A 
  title="29.1.4.2.1.1.&nbsp;Generic Function CLOS:SLOT-DEFINITION-NAME" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#slotdef-name">Section&nbsp;29.1.4.2.1.1, 
  “Generic Function <CODE 
  class=function>CLOS:SLOT-DEFINITION-NAME</CODE>”</A>.</P>
  <LI>
  <P>The <A title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass"><CODE 
  class=function>CLOS:VALIDATE-SUPERCLASS</CODE></A> method is more permissive 
  by default and does not need to be overridden in some “<SPAN 
  class=quote>obvious</SPAN>” cases. See <A 
  title="29.1.3.6.7.&nbsp;Generic Function CLOS:VALIDATE-SUPERCLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#validate-superclass">Section&nbsp;29.1.3.6.7, 
  “Generic Function <CODE 
  class=function>CLOS:VALIDATE-SUPERCLASS</CODE>”</A>.</P>
  <LI>
  <P>New generic function <A 
  title="29.1.3.6.8.&nbsp;Generic Function CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-dsd-initargs"><CODE 
  class=function>CLOS:COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS</CODE></A>. It can 
  sometimes be used when overriding <A 
  title="29.1.3.6.9.&nbsp;Generic Function CLOS:DIRECT-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#dsd-class"><CODE 
  class=function>CLOS:DIRECT-SLOT-DEFINITION-CLASS</CODE></A> is cumbersome.</P>
  <LI>
  <P>New generic function <A 
  title="29.1.3.6.13.&nbsp;Generic Function CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-esd-initargs"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS</CODE></A>. It 
  can sometimes be used when overriding <A 
  title="29.1.3.6.14.&nbsp;Generic Function CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#esd-class"><CODE 
  class=function>CLOS:EFFECTIVE-SLOT-DEFINITION-CLASS</CODE></A> is 
  cumbersome.</P>
  <LI>
  <P>New function <A 
  title="29.1.5.4.9.&nbsp;Function CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-effective-method-as-function"><CODE 
  class=function>CLOS:COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION</CODE></A>. It can be 
  used in overriding methods of <A 
  title="29.1.5.4.11.&nbsp;Generic Function CLOS:COMPUTE-DISCRIMINATING-FUNCTION" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#compute-discriminating-function"><CODE 
  class=function>CLOS:COMPUTE-DISCRIMINATING-FUNCTION</CODE></A>. </P>
  <LI>
  <P>The generic function <A 
  title="29.1.5.4.3.&nbsp;Generic Function CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#ensure-gf-UC"><CODE 
  class=function>CLOS:ENSURE-GENERIC-FUNCTION-USING-CLASS</CODE></A> accepts a 
  <CODE class=constant>:DECLARE</CODE> keyword.</P>
  <LI>
  <P>The functions <A 
  title="29.1.10.3.2.&nbsp;Function CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#funcallable-standard-instance-access"><CODE 
  class=function>CLOS:FUNCALLABLE-STANDARD-INSTANCE-ACCESS</CODE></A> and <A 
  title="29.1.10.3.1.&nbsp;Function CLOS:STANDARD-INSTANCE-ACCESS" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#standard-instance-access"><CODE 
  class=function>CLOS:STANDARD-INSTANCE-ACCESS</CODE></A> support non-updated 
  obsolete instances and also support slots with allocation <CODE 
  class=constant>:CLASS</CODE>.</P>
  <LI>
  <P>The existence of the <A 
  title="29.1.3.3.6.&nbsp;Generic Function CLOS:CLASS-DIRECT-SUBCLASSES" 
  href="http://clisp.cons.org/impnotes/mop-chap.html#class-direct-subclasses"><CODE 
  class=function>CLOS:CLASS-DIRECT-SUBCLASSES</CODE></A> function does not 
  prevent otherwise unreferenced classes from being <A class=olink 
  href="http://clisp.cons.org/impnotes/gc.html">garbage-collect</A>ed. 
</P></LI></UL></DIV></DIV><!--mop-clisp--></DIV>
<DIV class=bookinfo>
<HR width="100%">

<TABLE width="100%" summary="impnotes meta info">
  <TBODY>
  <TR>
    <TH>
    <TD align=left>These notes document <A href="http://clisp.cons.org/" 
      target=_top><SPAN><STRONG class=command>CLISP</STRONG></SPAN></A> version 
      2.41</TD>
    <TD align=right>Last modified: 2006-10-13</TD></TH></TR></TBODY></TABLE></DIV>
<DIV class=custom-footer>
<HR width="100%">

<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align=left><A href="http://clisp.cons.org/"><IMG height=48 
      alt="[CLISP home]" src="29_1_&nbsp;Meta-Object Protocol_files/clisp.png" 
      width=48></A></TD>
    <TD align=middle><A 
      href="http://sourceforge.net/donate/index.php?group_id=1355"><IMG 
      height=32 alt="[Support This Project]" 
      src="29_1_&nbsp;Meta-Object Protocol_files/project-support.jpg" width=88 
      border=0></A></TD>
    <TD align=right><A href="http://sourceforge.net/"><IMG height=37 
      alt=[SourceForge] src="29_1_&nbsp;Meta-Object Protocol_files/sflogo.png" 
      width=125></A></TD></TR></TBODY></TABLE></DIV>
<DIV class=navfooter>
<HR>

<TABLE width="100%" summary="Navigation footer">
  <TBODY>
  <TR>
    <TD align=left width="40%"><A accessKey=p 
      href="http://clisp.cons.org/impnotes/ext-standard.html">Prev</A>&nbsp;</TD>
    <TD align=middle width="20%"><A accessKey=u 
      href="http://clisp.cons.org/impnotes/ext-standard.html">Up</A></TD>
    <TD align=right width="40%">&nbsp;<A accessKey=n 
      href="http://clisp.cons.org/impnotes/gray.html">Next</A></TD></TR>
  <TR>
    <TD vAlign=top align=left width="40%">Chapter&nbsp;29.&nbsp;Standard 
      Widely Portable Extensions&nbsp;</TD>
    <TD align=middle width="20%"><A accessKey=h 
      href="http://clisp.cons.org/impnotes/index.html">Home</A></TD>
    <TD vAlign=top align=right width="40%">&nbsp;29.2.&nbsp;Gray 
  streams</TD></TR></TBODY></TABLE></DIV></BODY></HTML>
